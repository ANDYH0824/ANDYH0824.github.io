<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andy&#39;s Blog</title>
  
  <subtitle>开心</subtitle>
  <link href="https://andyh0824.github.io/atom.xml" rel="self"/>
  
  <link href="https://andyh0824.github.io/"/>
  <updated>2024-07-11T07:39:10.200Z</updated>
  <id>https://andyh0824.github.io/</id>
  
  <author>
    <name>Andy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式事务</title>
    <link href="https://andyh0824.github.io/posts/cdcc4eae.html"/>
    <id>https://andyh0824.github.io/posts/cdcc4eae.html</id>
    <published>2024-07-10T09:06:00.000Z</published>
    <updated>2024-07-11T07:39:10.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式事务问题"><a href="#分布式事务问题" class="headerlink" title="分布式事务问题"></a>分布式事务问题</h1><h2 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h2><ul><li>本地事务，也就是传统的<strong>单机事务</strong>。在传统数据库事务中，必须要满足四个原则：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mWrnB"/></div></div><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><ul><li><strong>分布式事务</strong>，就是指不是在单个服务或单个数据库架构下，产生的事务，例如：<ul><li>跨数据源的分布式事务</li><li>跨服务的分布式事务</li><li>综合情况</li></ul></li><li>在数据库水平拆分、服务垂直拆分之后，一个业务操作通常要跨多个数据库、服务才能完成。例如电商行业中比较常见的下单付款案例，包括下面几个行为：<ul><li>创建新订单</li><li>扣减商品库存</li><li>从用户账户余额扣除金额<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mWyHG"/></div></div></li></ul></li><li>订单的创建、库存的扣减、账户扣款在每一个服务和数据库内是一个本地事务，可以保证ACID原则。</li><li>但是当我们把三件事情看做一个”业务”，要满足保证“业务”的原子性，要么所有操作全部成功，要么全部失败，不允许出现部分成功部分失败的现象，这就是<strong>分布式系统下的事务</strong>了。</li><li>此时ACID难以满足，这是分布式事务要解决的问题</li></ul><h2 id="演示分布式事务问题"><a href="#演示分布式事务问题" class="headerlink" title="演示分布式事务问题"></a>演示分布式事务问题</h2><ul><li>我们通过一个案例来演示分布式事务的问题：<ol><li>创建数据库，名为seata_demo，然后导入课前资料提供的SQL文件：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mWzYn"/></div></div></li><li>导入课前资料提供的微服务：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mWQPd"/></div></div><ul><li>其中：seata-demo：父工程，负责管理项目依赖<ul><li>account-service：账户服务，负责管理用户的资金账户。提供扣减余额的接口</li><li>storage-service：库存服务，负责管理商品库存。提供扣减库存的接口</li><li>order-service：订单服务，负责管理订单。创建订单时，需要调用account-service和storage-service</li></ul></li></ul></li><li>启动nacos、所有微服务</li><li>测试下单功能，发出Post请求：<ul><li>请求如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;http://localhost:8082/order?userId=user202103032042012&amp;commodityCode=100202003032041&amp;count=20&amp;money=200&#x27;</span></span><br></pre></td></tr></table></figure></li><li>如图：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mWcSH"/></div></div></li><li>测试发现，当库存不足时，如果余额已经扣减，并不会回滚，出现了分布式事务问题。</li></ul></li></ol></li></ul><h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><ul><li>解决分布式事务问题，需要一些分布式系统的基础知识作为理论指导。</li></ul><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><ul><li>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标。<blockquote><ul><li>Consistency（一致性）</li><li>Availability（可用性）</li><li>Partition tolerance （分区容错性）<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mW49w"/></div></div></li></ul></blockquote></li><li>它们的第一个字母分别是 C、A、P。</li><li>Eric Brewer 说，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。</li></ul><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><ul><li>Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致。</li></ul><h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><ul><li>Availability （可用性）：用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝。</li></ul><h3 id="分区容错"><a href="#分区容错" class="headerlink" title="分区容错"></a>分区容错</h3><ul><li><strong>Partition（分区）</strong>：因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</li><li><strong>Tolerance（容错）</strong>：在集群出现分区时，整个系统也要持续对外提供服务</li></ul><h3 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h3><ul><li>在分布式系统中，系统间的网络不能100%保证健康，一定会有故障的时候，而服务有必须对外保证服务。因此Partition Tolerance不可避免。</li><li>如果此时要保证<strong>一致性</strong>，就必须等待网络恢复，完成数据同步后，整个集群才对外提供服务，服务处于阻塞状态，不可用。</li><li>如果此时要保证<strong>可用性</strong>，就不能等待网络恢复，那node01、node02与node03之间就会出现数据不一致。</li><li>也就是说，在P一定会出现的情况下，A和C之间只能实现一个。</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mXIjP"/></div></div><h2 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h2><ul><li>BASE理论是对CAP的一种解决思路，包含三个思想：<ul><li><strong>Basically Available</strong> <strong>（基本可用）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li><strong>Soft State（软状态）：</strong>在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li><strong>Eventually Consistent（最终一致性）</strong>：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul></li><li>而分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论：<ul><li>AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致。</li><li>CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态。</li></ul></li><li>但不管是哪一种模式，都需要在子系统事务之间互相通讯，协调事务状态，也就是需要一个<strong>事务协调者(TC)</strong>：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mX7ih"/></div></div></li><li>这里的子系统事务，称为<strong>分支事务</strong>；有关联的各个分支事务在一起称为<strong>全局事务</strong>。</li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mXKRQ"/></div></div><h1 id="初识Seata"><a href="#初识Seata" class="headerlink" title="初识Seata"></a>初识Seata</h1><ul><li>Seata是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。致力于提供高性能和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案。</li><li>官网地址：<a href="http://seata.io/">http://seata.io/</a> ，其中的文档、播客中提供了大量的使用说明、源码分析。</li></ul><h2 id="Seata的架构"><a href="#Seata的架构" class="headerlink" title="Seata的架构"></a>Seata的架构</h2><ul><li>Seata事务管理中有三个重要的角色：<ul><li><strong>TC (Transaction Coordinator) -</strong> <strong>事务协调者：</strong>维护全局和分支事务的状态，协调全局事务提交或回滚。</li><li><strong>TM (Transaction Manager) -</strong> <strong>事务管理器：</strong>定义全局事务的范围、开始全局事务、提交或回滚全局事务。</li><li><strong>RM (Resource Manager) -</strong> <strong>资源管理器：</strong>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul></li><li>整体的架构如图：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mXt7P"/></div></div></li><li>Seata提供了四种不同的分布式事务解决方案：<ul><li>XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li>TCC模式：最终一致的分阶段事务模式，有业务侵入</li><li>AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</li><li>SAGA模式：长事务模式，有业务侵入</li></ul></li><li>Seata基于上述架构提供了四种不同的分布式事务解决方案：<ul><li>XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li>TCC模式：最终一致的分阶段事务模式，有业务侵入</li><li>AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</li><li>SAGA模式：长事务模式，有业务侵入</li></ul></li><li>无论哪种方案，都离不开TC，也就是事务的协调者。</li></ul><h2 id="部署TC服务"><a href="#部署TC服务" class="headerlink" title="部署TC服务"></a>部署TC服务</h2><ul><li>参考课前资料提供的文档《 seata的部署和集成.md 》</li></ul><h2 id="微服务集成Seata"><a href="#微服务集成Seata" class="headerlink" title="微服务集成Seata"></a>微服务集成Seata</h2><ul><li>我们以storage-service为例来演示。</li></ul><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><ul><li>首先，在storage-service中引入依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置TC地址"><a href="#配置TC地址" class="headerlink" title="配置TC地址"></a>配置TC地址</h3><ul><li>在storage-service中的application.yml中，配置TC服务信息，通过注册中心nacos，结合服务名称获取TC地址：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span> <span class="comment"># 注册中心类型 nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># namespace，默认为空</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组，默认是DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span> <span class="comment"># seata服务名称</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SC</span></span><br></pre></td></tr></table></figure></li><li>微服务如何根据这些配置寻找TC的地址呢？<ul><li>我们知道注册到Nacos中的微服务，确定一个具体实例需要四个信息：<ul><li>namespace：命名空间</li><li>group：分组</li><li>application：服务名</li><li>cluster：集群名</li></ul></li><li>以上四个信息，在刚才的yaml文件中都能找到，namespace为空，就是默认的public，结合起来，TC服务的信息就是：public@DEFAULT_GROUP@seata-tc-server@SC，这样就能确定TC服务集群了。然后就可以去Nacos拉取对应的实例信息了。</li></ul></li></ul><h3 id="其它服务"><a href="#其它服务" class="headerlink" title="其它服务"></a>其它服务</h3><ul><li>其它两个微服务也都参考storage-service的步骤来做，完全一样。</li></ul><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZsJh"/></div></div><h1 id="动手实践"><a href="#动手实践" class="headerlink" title="动手实践"></a>动手实践</h1><h2 id="XA模式"><a href="#XA模式" class="headerlink" title="XA模式"></a>XA模式</h2><ul><li>XA 规范 是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的TM与局部的RM之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</li></ul><h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><ul><li><p>XA是规范，目前主流数据库都实现了这种规范，实现的原理都是基于两阶段提交。</p><ul><li>正常情况：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZH06"/></div></div></li><li>异常情况：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZW5q"/></div></div></li></ul></li><li><p>一阶段：</p><ul><li>事务协调者通知每个事物参与者执行本地事务</li><li>本地事务执行完成后报告事务执行状态给事务协调者，此时事务不提交，继续持有数据库锁</li></ul></li><li>二阶段：<ul><li>事务协调者基于一阶段的报告来判断下一步操作<ul><li>如果一阶段都成功，则通知所有事务参与者，提交事务</li><li>如果一阶段任意一个参与者失败，则通知所有事务参与者回滚事务</li></ul></li></ul></li></ul><h3 id="Seata的XA模型"><a href="#Seata的XA模型" class="headerlink" title="Seata的XA模型"></a>Seata的XA模型</h3><ul><li>Seata对原始的XA模式做了简单的封装和改造，以适应自己的事务模型，基本架构如图：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZXGr"/></div></div></li><li>RM一阶段的工作：<ul><li>注册分支事务到TC</li><li>执行分支业务sql但不提交</li><li>报告执行状态到TC</li></ul></li><li>TC二阶段的工作：<ul><li>TC检测各分支事务执行状态<ul><li>a.如果都成功，通知所有RM提交事务</li><li>b.如果有失败，通知所有RM回滚事务</li></ul></li></ul></li><li>RM二阶段的工作：<ul><li>接收TC指令，提交或回滚事务</li></ul></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>XA模式的优点是什么？<ul><li>事务的强一致性，满足ACID原则。</li><li>常用数据库都支持，实现简单，并且没有代码侵入</li></ul></li><li>XA模式的缺点是什么？<ul><li>因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</li><li>依赖关系型数据库实现事务</li></ul></li></ul><h3 id="实现XA模式"><a href="#实现XA模式" class="headerlink" title="实现XA模式"></a>实现XA模式</h3><ul><li>Seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下：<ol><li>修改application.yml文件（每个参与事务的微服务），开启XA模式：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span></span><br></pre></td></tr></table></figure></li><li>给发起全局事务的入口方法添加@GlobalTransactional注解:<ul><li>本例中是OrderServiceImpl中的create方法。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZTKB"/></div></div></li></ul></li><li>重启服务并测试<ul><li>重启order-service，再次测试，发现无论怎样，三个微服务都能成功回滚。</li></ul></li></ol></li></ul><h2 id="AT模式"><a href="#AT模式" class="headerlink" title="AT模式"></a>AT模式</h2><ul><li>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。</li></ul><h3 id="Seata的AT模型"><a href="#Seata的AT模型" class="headerlink" title="Seata的AT模型"></a>Seata的AT模型</h3><ul><li><p>基本流程图：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZ337"/></div></div></li><li><p>阶段一RM的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul></li><li>阶段二提交时RM的工作：<ul><li>删除undo-log即可</li></ul></li><li>阶段二回滚时RM的工作：<ul><li>根据undo-log恢复数据到更新前</li></ul></li></ul><h3 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h3><ul><li>我们用一个真实的业务来梳理下AT模式的原理。</li><li>比如，现在又一个数据库表，记录用户余额：</li></ul><div class="table-container"><table><thead><tr><th><strong>id</strong></th><th><strong>money</strong></th></tr></thead><tbody><tr><td>1</td><td>100</td></tr></tbody></table></div><ul><li>其中一个分支业务要执行的SQL为：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li>AT模式下，当前分支事务执行流程如下：<ul><li>一阶段：<ol><li>TM发起并注册全局事务到T- </li><li>TM调用分支事- </li><li>分支事务准备执行业务SQ- </li><li>RM拦截业务SQL，根据where条件查询原始数据，形成快照。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>RM执行业务SQL，提交本地事务，释放数据库锁。此时 <code>money = 90</code></li><li>RM报告本地事务状态给TC</li></ol></li><li>二阶段：<ol><li>TM通知TC事务结束</li><li>TC检查分支事务状态<ol><li>如果都成功，则立即删除快照</li><li>如果有分支事务失败，需要回滚。读取快照数据（<code>&#123;&quot;id&quot;: 1, &quot;money&quot;: 100&#125;</code>），将快照恢复到数据库。此时数据库再次恢复为100<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZc0w"/></div></div></li></ol></li></ol></li></ul></li></ul><h3 id="AT与XA的区别"><a href="#AT与XA的区别" class="headerlink" title="AT与XA的区别"></a>AT与XA的区别</h3><ul><li>简述AT模式与XA模式最大的区别是什么？<ul><li>XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。</li><li>XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。</li><li>XA模式强一致；AT模式最终一致</li></ul></li></ul><h3 id="脏写问题"><a href="#脏写问题" class="headerlink" title="脏写问题"></a>脏写问题</h3><ul><li>在多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZi5o"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZtTI"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZbvi"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZwKJ"/></div></div><ul><li>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZjbz"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mZYER"/></div></div><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>AT模式的优点：<ul><li>一阶段完成直接提交事务，释放数据库资源，性能比较好</li><li>利用全局锁实现读写隔离</li><li>没有代码侵入，框架自动完成回滚和提交</li></ul></li><li>AT模式的缺点：<ul><li>两阶段之间属于软状态，属于最终一致</li><li>框架的快照功能会影响性能，但比XA模式要好很多</li></ul></li></ul><h3 id="实现AT模式"><a href="#实现AT模式" class="headerlink" title="实现AT模式"></a>实现AT模式</h3><ul><li>AT模式中的快照生成、回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单。</li><li>只不过，AT模式需要一个表来记录全局锁、另一张表来记录数据快照undo_log。</li></ul><ol><li>导入数据库表，记录全局锁<ul><li>导入课前资料提供的Sql文件：seata-at.sql，其中lock_table导入到TC服务关联的数据库，undo_log表导入到微服务关联的数据库：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mGvOk"/></div></div></li></ul></li><li>修改application.yml文件，将事务模式修改为AT模式即可：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">AT</span> <span class="comment"># 默认就是AT</span></span><br></pre></td></tr></table></figure></li><li>重启服务并测试</li></ol><h2 id="TCC模式"><a href="#TCC模式" class="headerlink" title="TCC模式"></a>TCC模式</h2><ul><li>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：<ul><li>Try：资源的检测和预留； </li><li>Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</li><li>Cancel：预留资源释放，可以理解为try的反向操作。</li></ul></li></ul><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><ul><li>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</li><li><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</li><li>初识余额：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mGULm"/></div></div></li><li>余额充足，可以冻结：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mGkTX"/></div></div></li><li><strong>阶段二（Confirm）</strong>：假如要提交（Confirm），则冻结金额扣减30<ul><li>确认可以提交，不过之前可用金额已经扣减过了，这里只要清除冻结金额就好了：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mGqmK"/></div></div></li><li>此时，总金额 = 冻结金额 + 可用金额 = 0 + 70  = 70元</li></ul></li><li><strong>阶段二(Canncel)</strong>：如果要回滚（Cancel），则冻结金额扣减30，可用余额增加30<ul><li>需要回滚，那么就要释放冻结金额，恢复可用金额：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mG9Kj"/></div></div></li></ul></li></ul><h3 id="Seata的TCC模型"><a href="#Seata的TCC模型" class="headerlink" title="Seata的TCC模型"></a>Seata的TCC模型</h3><ul><li>Seata中的TCC模型依然延续之前的事务架构，如图：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mGREA"/></div></div></li></ul><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p>TCC模式的每个阶段是做什么的？</p><pre><code>- Try：资源检查和预留- Confirm：业务执行和提交- Cancel：预留资源的释放</code></pre><p>TCC的优点是什么？</p><pre><code>- 一阶段完成直接提交事务，释放数据库资源，性能好- 相比AT模型，无需生成快照，无需使用全局锁，性能最强- 不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</code></pre><p>TCC的缺点是什么？</p><pre><code>- 有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦- 软状态，事务是最终一致- 需要考虑Confirm和Cancel的失败情况，做好幂等处理</code></pre><h3 id="事务悬挂和空回滚"><a href="#事务悬挂和空回滚" class="headerlink" title="事务悬挂和空回滚"></a>事务悬挂和空回滚</h3><h4 id="1）空回滚"><a href="#1）空回滚" class="headerlink" title="1）空回滚"></a>1）空回滚</h4><ul><li>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。<br>如图：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mGjBq"/></div></div></li><li>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</li></ul><h4 id="2）业务悬挂"><a href="#2）业务悬挂" class="headerlink" title="2）业务悬挂"></a>2）业务悬挂</h4><ul><li>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</li><li>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</li></ul><h3 id="实现TCC模式"><a href="#实现TCC模式" class="headerlink" title="实现TCC模式"></a>实现TCC模式</h3><ul><li>解决空回滚和业务悬挂问题，必须要记录当前事务状态，是在try、还是cancel？</li></ul><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><ul><li><p>这里我们定义一张表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_freeze_tbl` (</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `freeze_money` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;冻结金额&#x27;</span>,</span><br><span class="line">  `state` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;事务状态，0:try，1:confirm，2:cancel&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`xid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHA</span><br></pre></td></tr></table></figure></li><li><p>其中：</p><ul><li>xid：是全局事务id</li><li>freeze_money：用来记录用户冻结金额</li><li>state：用来记录事务状态</li></ul></li><li><p>那此时，我们的业务开怎么做呢？</p><ul><li>Try业务：<ul><li>记录冻结金额和事务状态到account_freeze表</li><li>扣减account表可用金额</li></ul></li><li>Confirm业务<ul><li>根据xid删除account_freeze表的冻结记录</li></ul></li><li>Cancel业务<ul><li>修改account_freeze表，冻结金额为0，state为2</li><li>修改account表，恢复可用金额</li></ul></li><li>如何判断是否空回滚？<ul><li>cancel业务中，根据xid查询account_freeze，如果为null则说明try还没做，需要空回滚</li></ul></li><li>如何避免业务悬挂？<ul><li>try业务中，根据xid查询account_freeze ，如果已经存在则证明Cancel已经执行，拒绝执行try业务</li></ul></li></ul></li><li><p>接下来，我们改造account-service，利用TCC实现余额扣减功能。</p></li></ul><h4 id="声明TCC接口"><a href="#声明TCC接口" class="headerlink" title="声明TCC接口"></a>声明TCC接口</h4><ul><li>TCC的Try、Confirm、Cancel方法都需要在接口中基于注解来声明，</li><li>我们在account-service项目中的<code>cn.itcast.account.service</code>包中新建一个接口，声明TCC三个接口：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContextParameter;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.LocalTCC;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.TwoPhaseBusinessAction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountTCCService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name = &quot;deduct&quot;, commitMethod = &quot;confirm&quot;, rollbackMethod = &quot;cancel&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(<span class="meta">@BusinessActionContextParameter(paramName = &quot;userId&quot;)</span> String userId,</span></span><br><span class="line"><span class="params">                <span class="meta">@BusinessActionContextParameter(paramName = &quot;money&quot;)</span><span class="type">int</span> money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext ctx)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext ctx)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="编写实现类"><a href="#编写实现类" class="headerlink" title="编写实现类"></a>编写实现类</h4><ul><li>在account-service服务中的<code>cn.itcast.account.service.impl</code>包下新建一个类，实现TCC业务：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.entity.AccountFreeze;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountFreezeMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.service.AccountTCCService;</span><br><span class="line"><span class="keyword">import</span> io.seata.core.context.RootContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTCCServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountTCCService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountFreezeMapper freezeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(String userId, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">// 0.获取事务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> RootContext.getXID();</span><br><span class="line">        <span class="comment">// 1.扣减可用余额</span></span><br><span class="line">        accountMapper.deduct(userId, money);</span><br><span class="line">        <span class="comment">// 2.记录冻结金额，事务状态</span></span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">freeze</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountFreeze</span>();</span><br><span class="line">        freeze.setUserId(userId);</span><br><span class="line">        freeze.setFreezeMoney(money);</span><br><span class="line">        freeze.setState(AccountFreeze.State.TRY);</span><br><span class="line">        freeze.setXid(xid);</span><br><span class="line">        freezeMapper.insert(freeze);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext ctx)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取事务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> ctx.getXid();</span><br><span class="line">        <span class="comment">// 2.根据id删除冻结记录</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> freezeMapper.deleteById(xid);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext ctx)</span> &#123;</span><br><span class="line">        <span class="comment">// 0.查询冻结记录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> ctx.getXid();</span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">freeze</span> <span class="operator">=</span> freezeMapper.selectById(xid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.恢复可用余额</span></span><br><span class="line">        accountMapper.refund(freeze.getUserId(), freeze.getFreezeMoney());</span><br><span class="line">        <span class="comment">// 2.将冻结金额清零，状态改为CANCEL</span></span><br><span class="line">        freeze.setFreezeMoney(<span class="number">0</span>);</span><br><span class="line">        freeze.setState(AccountFreeze.State.CANCEL);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> freezeMapper.updateById(freeze);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SAGA模式"><a href="#SAGA模式" class="headerlink" title="SAGA模式"></a>SAGA模式</h2><ul><li>Saga 模式是 Seata 即将开源的长事务解决方案，将由蚂蚁金服主要贡献。</li><li>其理论基础是Hector &amp; Kenneth  在1987年发表的论文<a href="https://microservices.io/patterns/data/saga.html">Sagas</a>。</li><li>Seata官网对于Saga的指南：<a href="https://seata.io/zh-cn/docs/user/saga.html">https://seata.io/zh-cn/docs/user/saga.html</a></li></ul><h3 id="4-4-1-原理"><a href="#4-4-1-原理" class="headerlink" title="4.4.1.原理"></a>4.4.1.原理</h3><ul><li><p>在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。</p></li><li><p>分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会去退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mT91w"/></div></div></li><li><p>Saga也分为两个阶段：</p><ul><li>一阶段：直接提交本地事务</li><li>二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚</li></ul></li></ul><h3 id="4-4-2-优缺点"><a href="#4-4-2-优缺点" class="headerlink" title="4.4.2.优缺点"></a>4.4.2.优缺点</h3><ul><li>优点：<ul><li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li><li>一阶段直接提交事务，无锁，性能好</li><li>不用编写TCC中的三个阶段，实现简单</li></ul></li></ul><p>缺点：</p><pre><code>- 软状态持续时间不确定，时效性差- 没有锁，没有事务隔离，会有脏写</code></pre><h2 id="四种模式对比"><a href="#四种模式对比" class="headerlink" title="四种模式对比"></a>四种模式对比</h2><ul><li>我们从以下几个方面来对比四种实现：<ul><li>一致性：能否保证事务的一致性？强一致还是最终一致？</li><li>隔离性：事务之间的隔离性如何？</li><li>代码侵入：是否需要对业务代码改造？</li><li>性能：有无性能损耗？</li><li>场景：常见的业务场景<br>如图：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mTaBo"/></div></div></li></ul></li></ul><h1 id="实现高可用"><a href="#实现高可用" class="headerlink" title="实现高可用"></a>实现高可用</h1><ul><li>具体实现请参考课前资料提供的文档《seata的部署和集成.md》的第三章节。</li></ul><h2 id="TC服务的高可用和异地容灾"><a href="#TC服务的高可用和异地容灾" class="headerlink" title="TC服务的高可用和异地容灾"></a>TC服务的高可用和异地容灾</h2><h3 id="1-模拟异地容灾的TC集群"><a href="#1-模拟异地容灾的TC集群" class="headerlink" title="1.模拟异地容灾的TC集群"></a>1.模拟异地容灾的TC集群</h3><p>计划启动两台seata的tc服务节点：</p><div class="table-container"><table><thead><tr><th>节点名称</th><th>ip地址</th><th>端口号</th><th>集群名称</th></tr></thead><tbody><tr><td>seata</td><td>127.0.0.1</td><td>8091</td><td>SH</td></tr><tr><td>seata2</td><td>127.0.0.1</td><td>8092</td><td>HZ</td></tr></tbody></table></div><p>之前我们已经启动了一台seata服务，端口是8091，集群名为SH。</p><p>现在，将seata目录复制一份，起名为seata2</p><p>修改seata2/conf/registry.conf内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # tc服务的注册中心类，这里选择nacos，也可以是eureka、zookeeper等</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    # seata tc 服务注册到 nacos的服务名称，可以自定义</span><br><span class="line">    application = &quot;seata-tc-server&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8848&quot;</span><br><span class="line">    group = &quot;DEFAULT_GROUP&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;HZ&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line">  # 配置nacos地址等信息</span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">    dataId = &quot;seataServer.properties&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进入seata2/bin目录，然后运行命令：</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seata<span class="literal">-server</span>.bat <span class="literal">-p</span> <span class="number">8092</span></span><br></pre></td></tr></table></figure><h3 id="2-将事务组映射配置到nacos"><a href="#2-将事务组映射配置到nacos" class="headerlink" title="2.将事务组映射配置到nacos"></a>2.将事务组映射配置到nacos</h3><p>接下来，我们需要将tx-service-group与cluster的映射关系都配置到nacos配置中心。</p><p>新建一个配置：</p><p>配置的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 事务组映射关系</span><br><span class="line">service.vgroupMapping.seata-demo=SC</span><br><span class="line"></span><br><span class="line">service.enableDegrade=false</span><br><span class="line">service.disableGlobalTransaction=false</span><br><span class="line"># 与TC服务的通信配置</span><br><span class="line">transport.type=TCP</span><br><span class="line">transport.server=NIO</span><br><span class="line">transport.heartbeat=true</span><br><span class="line">transport.enableClientBatchSendRequest=false</span><br><span class="line">transport.threadFactory.bossThreadPrefix=NettyBoss</span><br><span class="line">transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker</span><br><span class="line">transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler</span><br><span class="line">transport.threadFactory.shareBossWorker=false</span><br><span class="line">transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector</span><br><span class="line">transport.threadFactory.clientSelectorThreadSize=1</span><br><span class="line">transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread</span><br><span class="line">transport.threadFactory.bossThreadSize=1</span><br><span class="line">transport.threadFactory.workerThreadSize=default</span><br><span class="line">transport.shutdown.wait=3</span><br><span class="line"># RM配置</span><br><span class="line">client.rm.asyncCommitBufferLimit=10000</span><br><span class="line">client.rm.lock.retryInterval=10</span><br><span class="line">client.rm.lock.retryTimes=30</span><br><span class="line">client.rm.lock.retryPolicyBranchRollbackOnConflict=true</span><br><span class="line">client.rm.reportRetryCount=5</span><br><span class="line">client.rm.tableMetaCheckEnable=false</span><br><span class="line">client.rm.tableMetaCheckerInterval=60000</span><br><span class="line">client.rm.sqlParserType=druid</span><br><span class="line">client.rm.reportSuccessEnable=false</span><br><span class="line">client.rm.sagaBranchRegisterEnable=false</span><br><span class="line"># TM配置</span><br><span class="line">client.tm.commitRetryCount=5</span><br><span class="line">client.tm.rollbackRetryCount=5</span><br><span class="line">client.tm.defaultGlobalTransactionTimeout=60000</span><br><span class="line">client.tm.degradeCheck=false</span><br><span class="line">client.tm.degradeCheckAllowTimes=10</span><br><span class="line">client.tm.degradeCheckPeriod=2000</span><br><span class="line"></span><br><span class="line"># undo日志配置</span><br><span class="line">client.undo.dataValidation=true</span><br><span class="line">client.undo.logSerialization=jackson</span><br><span class="line">client.undo.onlyCareUpdateColumns=true</span><br><span class="line">client.undo.logTable=undo_log</span><br><span class="line">client.undo.compress.enable=true</span><br><span class="line">client.undo.compress.type=zip</span><br><span class="line">client.undo.compress.threshold=64k</span><br><span class="line">client.log.exceptionRate=100</span><br></pre></td></tr></table></figure><h3 id="3-微服务读取nacos配置"><a href="#3-微服务读取nacos配置" class="headerlink" title="3.微服务读取nacos配置"></a>3.微服务读取nacos配置</h3><p>接下来，需要修改每一个微服务的application.yml文件，让微服务读取nacos中的client.properties文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">data-id:</span> <span class="string">client.properties</span></span><br></pre></td></tr></table></figure><ul><li>重启微服务，现在微服务到底是连接tc的SH集群，还是tc的HZ集群，都统一由nacos的client.properties来决定了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分布式事务问题&quot;&gt;&lt;a href=&quot;#分布式事务问题&quot; class=&quot;headerlink&quot; title=&quot;分布式事务问题&quot;&gt;&lt;/a&gt;分布式事务问题&lt;/h1&gt;&lt;h2 id=&quot;本地事务&quot;&gt;&lt;a href=&quot;#本地事务&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sentinel</title>
    <link href="https://andyh0824.github.io/posts/1408c19.html"/>
    <id>https://andyh0824.github.io/posts/1408c19.html</id>
    <published>2024-07-09T04:00:00.000Z</published>
    <updated>2024-07-10T07:25:54.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Sentinel"><a href="#初识Sentinel" class="headerlink" title="初识Sentinel"></a>初识Sentinel</h1><h2 id="雪崩问题及解决方案"><a href="#雪崩问题及解决方案" class="headerlink" title="雪崩问题及解决方案"></a>雪崩问题及解决方案</h2><h3 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h3><ul><li>微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mOn1n"/></div></div><ul><li>如图，如果服务提供者I发生了故障，当前的应用的部分业务因为依赖于服务I，因此也会被阻塞。此时，其它不依赖于服务I的业务似乎不受影响。</li><li>但是，依赖服务I的业务请求被阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞。</li><li>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，那么当前服务也就不可用了。</li><li>那么，依赖于当前服务的其它服务随着时间的推移，最终也都会变的不可用，形成级联失败，雪崩就发生了。</li></ul><h3 id="解决雪崩的四种常见方法"><a href="#解决雪崩的四种常见方法" class="headerlink" title="解决雪崩的四种常见方法"></a>解决雪崩的四种常见方法</h3><ul><li>解决雪崩问题的常见方式有四种：<ol><li>超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mOrrP"/></div></div></li><li>仓壁模式：限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mOzB4"/></div></div></li><li>熔断降级：由断路器统计业务执行的异常比例，如果超出阈值则会熔断该业务，拦截访问该业务的一切请求。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mO3pS"/></div></div></li><li>流量控制：限制业务访问的QPS，避免服务因流量的突增而故障。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mOQXh"/></div></div></li></ol></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>什么是雪崩问题？<ul><li>微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。</li></ul></li><li>如何避免因瞬间高并发流量而导致服务故障？<ul><li>流量控制</li></ul></li><li>如何避免因服务故障引起的雪崩问题？<ul><li>超时处理</li><li>线程隔离</li><li>降级熔断</li></ul></li></ul><h2 id="服务保护技术对比"><a href="#服务保护技术对比" class="headerlink" title="服务保护技术对比"></a>服务保护技术对比</h2><p>在SpringCloud当中支持多种服务保护技术：</p><ul><li><a href="https://github.com/Netflix/Hystrix">Netfix Hystrix</a></li><li><a href="https://github.com/alibaba/Sentinel">Sentinel</a></li><li><p><a href="https://github.com/resilience4j/resilience4j">Resilience4J</a></p></li><li><p>早期比较流行的是Hystrix框架，但目前国内实用最广泛的还是阿里巴巴的Sentinel框架，这里我们做下对比：</p></li></ul><div class="table-container"><table><thead><tr><th></th><th><strong>Sentinel</strong></th><th><strong>Hystrix</strong></th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离</td><td>线程池隔离/信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例或异常比例</td><td>基于失败比率</td></tr><tr><td>实时指标实现</td><td>滑动窗口</td><td>滑动窗口（基于 RxJava）</td></tr><tr><td>规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td></tr><tr><td>流量整形</td><td>支持慢启动、匀速排队模式</td><td>不支持</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td></tr><tr><td>控制台</td><td>开箱即用，可配置规则、查看秒级监控、机器发现等</td><td>不完善</td></tr><tr><td>常见框架的适配</td><td>Servlet、Spring Cloud、Dubbo、gRPC  等</td><td>Servlet、Spring Cloud Netflix</td></tr></tbody></table></div><h2 id="Sentinel介绍和安装"><a href="#Sentinel介绍和安装" class="headerlink" title="Sentinel介绍和安装"></a>Sentinel介绍和安装</h2><h3 id="初识Sentinel-1"><a href="#初识Sentinel-1" class="headerlink" title="初识Sentinel"></a>初识Sentinel</h3><ul><li><p>Sentinel是阿里巴巴开源的一款微服务流量控制组件。官网地址：<a href="https://sentinelguard.io/zh-cn/index.html">https://sentinelguard.io/zh-cn/index.html</a></p></li><li><p>Sentinel 具有以下特征:<br>  •<strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</p><p>  •<strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p><p>  •<strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p><p>  •<strong>完善的</strong> <strong>SPI</strong> <strong>扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p></li></ul><h3 id="安装Sentinel"><a href="#安装Sentinel" class="headerlink" title="安装Sentinel"></a>安装Sentinel</h3><ol><li>下载<ul><li>sentinel官方提供了UI控制台，方便我们对系统做限流设置。大家可以在<a href="https://github.com/alibaba/Sentinel/releases">GitHub</a>下载。<br>课前资料也提供了下载好的jar包：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSvUn"/></div></div></li></ul></li><li><p>运行</p><ul><li>将jar包放到任意非中文目录，执行命令：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSmMd"/></div></div></li><li><p>如果要修改Sentinel的默认端口、账户、密码，可以通过下列配置：</p><pre><code>  | **配置项**                       | **默认值** | **说明**   |  | -------------------------------- | ---------- | ---------- |  | server.port                      | 8080       | 服务端口   |  | sentinel.dashboard.auth.username | sentinel   | 默认用户名 |  | sentinel.dashboard.auth.password | sentinel   | 默认密码   |</code></pre></li><li><p>例如，修改端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure></li></ul></li><li>访问<ul><li>访问<a href="http://localhost:8080页面，就可以看到sentinel的控制台了">http://localhost:8080页面，就可以看到sentinel的控制台了</a><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mS8XH"/></div></div></li><li>需要输入账号和密码，默认都是：sentinel，登录后，发现一片空白，什么都没有，这是因为我们还没有与微服务整合。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSBx7"/></div></div></li></ul></li></ol><h2 id="微服务整合Sentinel"><a href="#微服务整合Sentinel" class="headerlink" title="微服务整合Sentinel"></a>微服务整合Sentinel</h2><ul><li>我们在order-service中整合sentinel，并连接sentinel的控制台，步骤如下：<ol><li>引入sentinel依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置控制台<ul><li>修改application.yaml文件，添加下面内容：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">      <span class="attr">sentinel:</span></span><br><span class="line">        <span class="attr">transport:</span></span><br><span class="line">          <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure></li></ul></li><li>访问order-service的任意端点<ul><li>打开浏览器，访问<a href="http://localhost:8088/order/101">http://localhost:8088/order/101</a> ，这样才能触发sentinel的监控。然后再访问sentinel的控制台，查看效果：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSqtI"/></div></div></li></ul></li></ol></li></ul><h1 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h1><ul><li>雪崩问题虽然有四种方案，但是限流是避免服务因突发的流量而发生故障，是对微服务雪崩问题的预防。我们先学习这种模式。</li></ul><h2 id="簇点链路"><a href="#簇点链路" class="headerlink" title="簇点链路"></a>簇点链路</h2><ul><li>当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，这样的一个调用链就叫做<strong>簇点链路</strong>。簇点链路中被监控的每一个接口就是一个<strong>资源</strong>。</li><li>默认情况下sentinel会监控SpringMVC的每一个端点（Endpoint，也就是controller中的方法），因此SpringMVC的每一个端点（Endpoint）就是调用链路中的一个资源。</li><li><p>例如，我们刚才访问的order-service中的OrderController中的端点：/order/{orderId}</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSRai"/></div></div></li><li><p>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：</p><ul><li>流控：流量控制</li><li>降级：降级熔断</li><li>热点：热点参数限流，是限流的一种</li><li>授权：请求的权限控制</li></ul></li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>点击资源/order/{orderId}后面的流控按钮，就可以弹出表单。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSIUz"/></div></div></li><li>表单中可以填写限流规则，如下：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mShyR"/></div></div></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul><li>需求：给 /order/{orderId}这个资源设置流控规则，QPS不能超过 5，然后测试。<ol><li>首先在sentinel控制台添加限流规则<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSNMe"/></div></div></li><li>利用jmeter测试<ul><li>如果没有用过jmeter，可以参考课前资料提供的文档《Jmeter快速入门.md》</li><li>课前资料提供了编写好的Jmeter测试样例：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSPZk"/></div></div></li><li>打开jmeter，导入课前资料提供的测试样例，运行</li></ul></li></ol></li></ul><h2 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h2><ul><li>在添加限流规则时，点击高级选项，可以选择三种<strong>流控模式</strong>：<ul><li>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</li><li>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</li></ul></li></ul><h3 id="关联模式"><a href="#关联模式" class="headerlink" title="关联模式"></a>关联模式</h3><ul><li><strong>关联模式</strong>：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li><strong>使用场景</strong>：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSJ7Q"/></div></div></li></ul><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><ul><li>需求：在OrderController新建两个端点：/order/query和/order/update，无需实现业务<br>配置流控规则，当/order/ update资源被访问的QPS超过5时，对/order/query请求限流</li></ul><ol><li>定义/order/query端点，模拟订单查询<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;查询订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义/order/update端点，模拟订单更新<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;更新订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启服务，查看sentinel控制台的簇点链路：</li></ul></li><li>配置流控规则<ul><li>对哪个端点限流，就点击哪个端点后面的按钮。我们是对订单查询/order/query限流，因此点击它后面的按钮，在表单中填写流控规则。</li></ul></li><li>在Jmeter测试<ul><li>请求的目标是/order/update，这样这个断点就会触发阈值。但限流的目标是/order/query，我们在浏览器访问，可以发现query确实被限流了。</li></ul></li></ol><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mSAzB"/></div></div><h3 id="链路模式"><a href="#链路模式" class="headerlink" title="链路模式"></a>链路模式</h3><ul><li>只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。</li><li>例如有两条请求链路：<ul><li>/test1 —&gt; /common</li><li>/test2 —&gt; /common</li></ul></li><li>如果只希望统计从/test2进入到/common的请求，则可以这样配置：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVlqB"/></div></div></li></ul><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><ul><li>需求：有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。</li><li>步骤：<ol><li>在OrderService中添加一个queryGoods方法，不用实现业务</li><li>在OrderController中，改造/order/query端点，调用OrderService中的queryGoods方法</li><li>在OrderController中添加一个/order/save的端点，调用OrderService的queryGoods方法</li><li>给queryGoods设置限流规则，从/order/query进入queryGoods的方法限制QPS必须小于2</li></ol></li><li>实现：<ol><li>添加查询商品方法<ul><li>在order-service服务中，给OrderService类添加一个queryGoods方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryGoods</span><span class="params">()</span>&#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>查询订单时，查询商品<ul><li>在order-service的OrderController中，修改/order/query端点的业务逻辑：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询商品</span></span><br><span class="line">    orderService.queryGoods();</span><br><span class="line">    <span class="comment">// 查询订单</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询订单&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;查询订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>新增订单，查询商品<ul><li>在order-service的OrderController中，修改/order/save端点，模拟新增订单：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询商品</span></span><br><span class="line">    orderService.queryGoods();</span><br><span class="line">    <span class="comment">// 查询订单</span></span><br><span class="line">    System.err.println(<span class="string">&quot;新增订单&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;新增订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>给查询商品添加资源标记<ul><li>默认情况下，OrderService中的方法是不被Sentinel监控的，需要我们自己通过注解来标记要监控的方法。给OrderService的queryGoods方法添加@SentinelResource注解：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryGoods</span><span class="params">()</span>&#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会导致链路模式失效。我们需要关闭这种对SpringMVC的资源聚合，修改order-service服务的application.yml文件：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭context整合</span></span><br></pre></td></tr></table></figure></li><li>重启服务，访问/order/query和/order/save，可以查看到sentinel的簇点链路规则中，出现了新的资源</li></ul></li></ol></li></ul><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVDTn"/></div></div><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><ul><li>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：<ul><li>快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。</li><li>warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。</li><li>排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能大于指定时长</li></ul></li></ul><h3 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h3><ul><li>warm up也叫预热模式，是应对服务冷启动的一种方案。请求阈值初始值是 threshold / coldFactor，持续指定时长后，逐渐提高到threshold值。而coldFactor的默认值是3.</li><li>例如，我设置QPS的threshold为10，预热时间为5秒，那么初始阈值就是 10 / 3 ，也就是3，然后在5秒后逐渐增长到10.<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVoEg"/></div></div></li></ul><h4 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h4><ul><li>需求：给/order/{orderId}这个资源设置限流，最大QPS为10，利用warm up效果，预热时长为5秒</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVENm"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVHOX"/></div></div><h3 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h3><ul><li>当请求超过QPS阈值时，快速失败和warm up 会拒绝新的请求并抛出异常。而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。</li><li>例如：QPS = 5，意味着每200ms处理一个队列中的请求；timeout = 2000，意味着预期等待超过2000ms的请求会被拒绝并抛出异常</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVGLA"/></div></div><h4 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h4><ul><li>需求：给/order/{orderId}这个资源设置限流，最大QPS为10，利用排队的流控效果，超时时长设置为5s</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVyHh"/></div></div><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVQN6"/></div></div><h2 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h2><ul><li>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是分别统计参数值相同的请求，判断是否超过QPS阈值。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mV495"/></div></div><ul><li>配置示例</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVbeB"/></div></div><ul><li><p>代表的含义是：对hot这个资源的0号参数（第一个参数）做统计，每1秒相同参数值的请求数不能超过5</p></li><li><p>在热点参数限流的高级选项中，可以对部分参数设置例外配置：</p></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mVwgG"/></div></div><ul><li>结合上一个配置，这里的含义是对0号的long类型参数限流，每1秒相同参数的QPS不能超过5，有两个例外：<ul><li>如果参数值是100，则每1秒允许的QPS为10</li><li>如果参数值是101，则每1秒允许的QPS为15</li></ul></li></ul><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><ul><li>给/order/{orderId}这个资源添加热点参数限流，规则如下：<ul><li>默认的热点参数规则是每1秒请求量不超过2</li><li>给102这个参数设置例外：每1秒请求量不超过4</li><li>给103这个参数设置例外：每1秒请求量不超过10</li></ul></li><li>热点参数限流对默认的SpringMVC资源无效</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/modHH"/></div></div><h1 id="隔离和降级"><a href="#隔离和降级" class="headerlink" title="隔离和降级"></a>隔离和降级</h1><ul><li>虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。而要将这些故障控制在一定范围，避免雪崩，就要靠线程隔离（舱壁模式）和熔断降级手段了。</li><li>不管是线程隔离还是熔断降级，都是对客户端（调用方）的保护。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/moxrj"/></div></div><h2 id="feign整合sentinel"><a href="#feign整合sentinel" class="headerlink" title="feign整合sentinel"></a>feign整合sentinel</h2><ul><li>SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端保护必须整合Feign和Sentinel。<ol><li>修改OrderService的application.yml文件，开启Feign的Sentinel功能<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对sentinel的支持</span></span><br></pre></td></tr></table></figure></li><li>给FeignClient编写失败后的降级逻辑<ul><li>方式一：FallbackClass，无法对远程调用的异常做处理</li><li>方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种</li></ul></li><li>在feing-api项目中定义类，实现FallbackFactory：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;查询用户异常&quot;</span>, throwable);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在feing-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserClientFallbackFactory <span class="title function_">userClientFallbackFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClientFallbackFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在feing-api项目中的UserClient接口中使用UserClientFallbackFactory。</li><li>重启后，访问一次订单查询业务，然后查看sentinel控制台，可以看到新的簇点链路<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, fallbackFactory = UserClientFallbackFactory.class)</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msvUA"/></div></div><h2 id="线程隔离"><a href="#线程隔离" class="headerlink" title="线程隔离"></a>线程隔离</h2><ul><li><p>线程隔离有两种方式实现：</p><ul><li>线程池隔离</li><li><p>信号量隔离（Sentinel默认采用）</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msmMP"/></div></div></li></ul></li><li><p><strong>线程池隔离</strong>：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</p></li><li><strong>信号量隔离</strong>：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/ms8X4"/></div></div></li></ul><h3 id="线程隔离（仓壁模式）"><a href="#线程隔离（仓壁模式）" class="headerlink" title="线程隔离（仓壁模式）"></a>线程隔离（仓壁模式）</h3><ul><li>在添加限流规则时，可以选择两种阈值类型：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msBxS"/></div></div><ul><li>QPS：就是每秒的请求数，在快速入门中已经演示过</li><li>线程数：是该资源能使用用的tomcat线程数的最大值。也就是通过限制线程数量，实现舱壁模式。</li></ul><h4 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h4><ul><li>需求：给 UserClient的查询用户接口设置流控规则，线程数不能超过 2。然后利用jemeter测试。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msk7h"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/ms0oQ"/></div></div><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msqt6"/></div></div><h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><ul><li>熔断降级是解决雪崩问题的重要手段。其思路是由断路器统计服务调用的异常比例、慢请求比例，如果超出阈值则会熔断该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msRhq"/></div></div><h3 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a>熔断策略</h3><ul><li>断路器熔断策略有三种：慢调用、异常比例、异常数</li></ul><h4 id="慢调用"><a href="#慢调用" class="headerlink" title="慢调用"></a>慢调用</h4><ul><li>慢调用：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。例如：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msa6r"/></div></div><ul><li>解读：RT超过500ms的调用是慢调用，统计最近10000ms内的请求，如果请求量超过10次，并且慢调用比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</li></ul><h5 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h5><ul><li>需求：给 UserClient的查询用户接口设置降级规则，慢调用的RT阈值为50ms，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5<blockquote><p>提示：为了触发慢调用规则，我们需要修改UserService中的业务，增加业务耗时</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mshy5"/></div></div></blockquote></li></ul><h4 id="异常比例、异常数"><a href="#异常比例、异常数" class="headerlink" title="异常比例、异常数"></a>异常比例、异常数</h4><ul><li><p>异常比例或异常数：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。例如：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msIkB"/></div></div></li><li><p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</p></li></ul><h5 id="案例-8"><a href="#案例-8" class="headerlink" title="案例"></a>案例</h5><ul><li>需求：给 UserClient的查询用户接口设置降级规则，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5s<blockquote><p>提示：为了触发异常统计，我们需要修改UserService中的业务，抛出异常</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msNMG"/></div></div></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/msPZn"/></div></div><h1 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h1><h2 id="授权规则-1"><a href="#授权规则-1" class="headerlink" title="授权规则"></a>授权规则</h2><ul><li><p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p><ul><li>白名单：来源（origin）在白名单内的调用者允许访问</li><li>黑名单：来源（origin）在黑名单内的调用者不允许访问<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mA49X"/></div></div></li><li>例如，我们限定只允许从网关来的请求访问order-service，那么流控应用中就填写网关的名称<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mAbeK"/></div></div></li></ul></li><li><p>Sentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从请求request对象中获取origin，获取方式自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例如，我们尝试从request中获取一个名为origin的请求头，作为origin的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderOriginParser</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;origin&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(origin)) &#123;</span><br><span class="line">            origin = <span class="string">&quot;blank&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们还需要在gateway服务中，利用网关的过滤器添加名为gateway的origin头：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=origin,gateway</span> <span class="comment"># 添加名为origin的请求头，值为gateway</span></span><br></pre></td></tr></table></figure></li><li><p>给/order/{orderId} 配置授权规则：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mAwgj"/></div></div></li><li><p>现在，我们直接跳过网关，访问order-service服务：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mAj8A"/></div></div></li><li><p>通过网关访问：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mEdH4"/></div></div></li></ul><h2 id="自定义异常结果"><a href="#自定义异常结果" class="headerlink" title="自定义异常结果"></a>自定义异常结果</h2><ul><li><p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。如果要自定义异常时的返回结果，需要实现BlockExceptionHandler接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求被限流、降级、授权拦截时抛出的异常：BlockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个方法有三个参数：</p><ul><li>HttpServletRequest request：request对象</li><li>HttpServletResponse response：response对象</li><li>BlockException e：被sentinel拦截时抛出的异常</li></ul></li><li><p>这里的BlockException包含多个不同的子类：</p></li></ul><div class="table-container"><table><thead><tr><th><strong>异常</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>FlowException</td><td>限流异常</td></tr><tr><td>ParamFlowException</td><td>热点参数限流的异常</td></tr><tr><td>DegradeException</td><td>降级异常</td></tr><tr><td>AuthorityException</td><td>授权规则异常</td></tr><tr><td>SystemBlockException</td><td>系统规则异常</td></tr></tbody></table></div><h2 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h2><ul><li><p>下面，我们就在order-service定义一个自定义异常处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;未知异常&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">429</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被限流了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被热点参数限流&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被降级了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorityException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;没有权限访问&quot;</span>;</span><br><span class="line">            status = <span class="number">401</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.setStatus(status);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&#123;\&quot;msg\&quot;: &quot;</span> + msg + <span class="string">&quot;, \&quot;status\&quot;: &quot;</span> + status + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启测试，在不同场景下，会返回不同的异常消息。</p><ul><li>限流：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mEUc6"/></div></div></li><li>授权拦截时：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mE0Rq"/></div></div></li></ul></li></ul><h1 id="持久化规则"><a href="#持久化规则" class="headerlink" title="持久化规则"></a>持久化规则</h1><ul><li>现在，sentinel的所有规则都是内存存储，重启后所有规则都会丢失。在生产环境下，我们必须确保这些规则的持久化，避免丢失。</li></ul><h2 id="规则管理模式"><a href="#规则管理模式" class="headerlink" title="规则管理模式"></a>规则管理模式</h2><ul><li>规则是否能持久化，取决于规则管理模式，sentinel支持三种规则管理模式：<ul><li>原始模式：Sentinel的默认模式，将规则保存在内存，重启服务会丢失。</li><li>pull模式</li><li>push模式</li></ul></li></ul><h3 id="pull模式"><a href="#pull模式" class="headerlink" title="pull模式"></a>pull模式</h3><ul><li>pull模式：控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mWpEz"/></div></div><h3 id="push模式"><a href="#push模式" class="headerlink" title="push模式"></a>push模式</h3><ul><li>push模式：控制台将配置规则推送到远程配置中心，例如Nacos。Sentinel客户端监听Nacos，获取配置变更的推送消息，完成本地配置更新。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mWMwe"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识Sentinel&quot;&gt;&lt;a href=&quot;#初识Sentinel&quot; class=&quot;headerlink&quot; title=&quot;初识Sentinel&quot;&gt;&lt;/a&gt;初识Sentinel&lt;/h1&gt;&lt;h2 id=&quot;雪崩问题及解决方案&quot;&gt;&lt;a href=&quot;#雪崩问题及解决方案&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch</title>
    <link href="https://andyh0824.github.io/posts/d48132d3.html"/>
    <id>https://andyh0824.github.io/posts/d48132d3.html</id>
    <published>2024-05-08T11:50:10.000Z</published>
    <updated>2024-07-08T12:25:00.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识ElasticSearch"><a href="#初识ElasticSearch" class="headerlink" title="初识ElasticSearch"></a>初识ElasticSearch</h1><h2 id="了解ES"><a href="#了解ES" class="headerlink" title="了解ES"></a>了解ES</h2><h3 id="lasticSearch的作用"><a href="#lasticSearch的作用" class="headerlink" title="lasticSearch的作用"></a>lasticSearch的作用</h3><ul><li><p><code>ElasticSearch</code>是一款非常强大的开源搜素引擎，具备非常强大的功能，可以帮助我们从海量数据中快速找到需要的内容</p></li><li><p>例如在电商平台搜索商品，搜索<code>4090显卡</code>会以红色标识</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/13/gsvXnO61.png"/></div></div></li><li><p>在搜索引擎搜索答案，搜索到的内容同样会以红色标识，也可以实现搜索时的自动补全功能</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/08/JiYl4lOm.png"/></div></div></li></ul><h3 id="ELK技术栈"><a href="#ELK技术栈" class="headerlink" title="ELK技术栈"></a>ELK技术栈</h3><ul><li><p><code>ElasticSearch</code>结合<code>kibana</code>、<code>Logstash</code>、<code>Beats</code>，也就是<code>elastic stack(ELK)</code>。被广泛应用在日志数据分析、实时监控等领域</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/13/NNwtgxRP.png"/></div></div></li><li><p>而<code>ElasticSearch</code>是<code>elastic stack</code>的核心，负责存储、搜索、分析数据</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/08/9GiuKOxc.png"/></div></div></li></ul><h3 id="ElasticSearch和Lucene"><a href="#ElasticSearch和Lucene" class="headerlink" title="ElasticSearch和Lucene"></a>ElasticSearch和Lucene</h3><ul><li><p>ElasticSearch底层是基于Lucene来实现的</p></li><li><p>Lucene是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发，官网地址：<a href="https://lucene.apache.org/"><code>https://lucene.apache.org/</code></a></p></li><li><p>Lucene的优势</p><ul><li>易扩展</li><li>高性能（基于倒排索引）</li></ul></li><li><p>Lucene的缺点</p><ul><li>只限于Java语言开发</li><li>学习曲线陡峭</li><li>不支持水平扩展</li></ul></li><li><p>ElasticSearch的发展史</p><ul><li>2004年，Shay Banon基于Lucene开发了Compass</li><li>2010年，Shay Banon重写了Compass，取名为ElasticSearch，官网地址：<a href="https://www.elastic.co/cnl/"><code>https://www.elastic.co/cnl/</code></a></li></ul></li><li><p>相比于Lucene，ElasticSearch具备以下优势</p><ul><li>支持分布式，可水平扩展</li><li>提供Restful接口，可以被任意语言调用</li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>什么是ElasticSearch？</p><ul><li>一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能</li></ul></li><li><p>什么是Elastic Stack(ELK)？</p><ul><li>它是以ElasticSearch为核心的技术栈，包括beats、Logstash、kibana、elasticsearch</li></ul></li><li><p>什么是Lucene？</p><ul><li>是Apache的开源搜索引擎类库，提供了搜索引擎的核心API</li></ul></li></ul><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><ul><li>倒排索引的概念是基于MySQL这样的正向索引而言的</li></ul><h3 id="正向索引"><a href="#正向索引" class="headerlink" title="正向索引"></a>正向索引</h3><ul><li>为了搞明白什么是倒排索引，我们先来看看什么是正向索引，例如给下表中的id创建索引</li></ul><div class="table-container"><table><thead><tr><th>id</th><th>title</th><th>price</th></tr></thead><tbody><tr><td>1</td><td>小米手机</td><td>3499</td></tr><tr><td>2</td><td>华为手机</td><td>4999</td></tr><tr><td>3</td><td>华为小米充电器</td><td>49</td></tr><tr><td>4</td><td>小米手环</td><td>49</td></tr></tbody></table></div><ul><li><p>如果是基于id查询，那么直接走索引，查询速度非常快。</p></li><li><p>但是实际应用里，用户并不知道每一个商品的id，他们只知道title(商品名称)，所以对于用户的查询方式，是基于title(商品名称)做模糊查询，只能是逐行扫描数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, title, price <span class="keyword">from</span> tb_goods <span class="keyword">where</span> title <span class="keyword">like</span> <span class="operator">%</span>手机<span class="operator">%</span></span><br></pre></td></tr></table></figure></li><li><p>具体流程如下</p><ol><li>用户搜索数据，搜索框输入手机，那么条件就是title符合<code>%手机%</code></li><li>逐行获取数据</li><li>判断数据中的title是否符合用户搜索条件</li><li>如果符合，则放入结果集，不符合则丢弃</li></ol></li><li><p>逐行扫描，也就是全表扫描，随着数据量的增加，其查询效率也会越来越低。当数据量达到百万时，这将是一场灾难</p></li></ul><h3 id="倒排索引-1"><a href="#倒排索引-1" class="headerlink" title="倒排索引"></a>倒排索引</h3><ul><li><p>倒排索引中有两个非常重要的概念</p><ol><li>文档(Document)：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li><li>词条(Term)：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我最喜欢的FPS游戏是Apex，就可以分为我、我最喜欢、FPS游戏、最喜欢的FPS、Apex这样的几个词条</li></ol></li><li><p>创建倒排索引是对正向索引的一种特殊处理，流程如下</p><ul><li>将每一个文档的数据利用算法分词，得到一个个词条</li><li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li><li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li></ul></li></ul><div class="table-container"><table><thead><tr><th>词条(term)</th><th>文档id</th></tr></thead><tbody><tr><td>小米</td><td>1,3,4</td></tr><tr><td>手机</td><td>1,2</td></tr><tr><td>华为</td><td>2,3</td></tr><tr><td>充电器</td><td>3</td></tr><tr><td>手环</td><td>4</td></tr></tbody></table></div><ul><li><p>以搜索<code>华为手机</code>为例</p><ol><li>用户输入条件<code>华为手机</code>，进行搜索。</li><li>对用户输入的内容分词，得到词条：华为、手机。</li><li>拿着词条在倒排索引中查找，可以得到包含词条的文档id为：1、2、3。</li><li>拿着文档id到正向索引中查找具体文档</li></ol></li><li><p>虽然要先查询倒排索引，再查询正向索引，但是无论是词条还是文档id，都建立了索引，所以查询速度非常快，无需全表扫描</p></li></ul><h3 id="正向和倒排"><a href="#正向和倒排" class="headerlink" title="正向和倒排"></a>正向和倒排</h3><ul><li><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p><ul><li><code>正向索引</code>是最传统的，根据id索引的方式。但是根据词条查询是，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<code>根据文档查找词条的过程</code></li><li>而<code>倒排索引</code>则相反，是先找到用户要搜索的词条，然后根据词条得到包含词条的文档id，然后根据文档id获取文档，是根据<code>词条查找文档的过程</code></li></ul></li><li><p>那么二者的优缺点各是什么呢？</p><ul><li><p><code>正向索引</code></p><ul><li>优点：可以给多个字段创建索引，根据索引字段搜索、排序速度非常快</li><li>缺点：根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描</li></ul></li><li><p><code>倒排索引</code></p><ul><li>优点：根据词条搜索、模糊搜索时，速度非常快</li><li>缺点：只能给词条创建索引，而不是字段，无法根据字段做排序</li></ul></li></ul></li></ul><h2 id="ES的一些概念"><a href="#ES的一些概念" class="headerlink" title="ES的一些概念"></a>ES的一些概念</h2><ul><li>ElasticSearch中有很多独有的概念，与MySQL中略有差别，但也有相似之处</li></ul><h3 id="文档和字段"><a href="#文档和字段" class="headerlink" title="文档和字段"></a>文档和字段</h3><ul><li><p>ElasticSearch是面向文档(Document)存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在ElasticSearch中</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">3499</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">4999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为小米充电器&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">49</span></span><br><span class="line"><span class="punctuation">&#125;</span> </span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米手环&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price &quot;</span><span class="punctuation">:</span> <span class="number">299</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>而Json文档中往往包含很多的字段(Field)，类似于数据库中的列</p></li></ul><h3 id="索引和映射"><a href="#索引和映射" class="headerlink" title="索引和映射"></a>索引和映射</h3><ul><li><p>索引(Index)，就是相同类型的文档的集合</p></li><li><p>例如</p><ul><li><p>所有用户文档，可以组织在一起，成为用户的索引</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">39</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">49</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王五&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">69</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>所有商品的文档，可以组织在一起，称为商品的索引</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">3499</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">4999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;苹果手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">6999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>所有订单的文档，可以组织在一起，称为订单的索引</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;goodsId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalFee&quot;</span><span class="punctuation">:</span> <span class="number">3999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;goodsId&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalFee&quot;</span><span class="punctuation">:</span> <span class="number">4999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;goodsId&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totalFee&quot;</span><span class="punctuation">:</span> <span class="number">6999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>因此，我们可以把索引当做是数据库中的表</p></li><li><p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库就有<code>映射(mapping)</code>，是索引中文档的字段约束信息，类似于表的结构约束</p></li></ul><h3 id="MySQL与ElasticSearch"><a href="#MySQL与ElasticSearch" class="headerlink" title="MySQL与ElasticSearch"></a>MySQL与ElasticSearch</h3><ul><li>我们统一的把MySQL和ElasticSearch的概念做一下对比</li></ul><div class="table-container"><table><thead><tr><th>MySQL</th><th>Elasticsearch</th><th>说明</th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(Table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table></div><ul><li><p>二者各有自己擅长之处</p><ul><li><code>MySQL</code>：擅长事务类型操作，可以保证数据的安全和一致性</li><li><code>ElasticSearch</code>：擅长海量数据的搜索、分析、计算</li></ul></li><li><p>因此在企业中，往往是这二者结合使用</p><ul><li>对安全性要求较高的写操作，使用MySQL实现</li><li>对查询性能个较高的搜索需求，使用ElasticSearch实现</li><li>二者再基于某种方式，实现数据的同步，保证一致性  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/08/4Za1CVUB.png"/></div></div></li></ul></li></ul><h2 id="安装ES、Kibana"><a href="#安装ES、Kibana" class="headerlink" title="安装ES、Kibana"></a>安装ES、Kibana</h2><h3 id="部署单点ES"><a href="#部署单点ES" class="headerlink" title="部署单点ES"></a>部署单点ES</h3><ul><li><p>因为我们还需要部署Kibana容器，因此需要让es和kibana容器互联，这里先创建一个网络（使用compose部署可以一键互联，不需要这个步骤，但是将来有可能不需要kbiana，只需要es，所以先这里手动部署单点es）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像，这里采用的是ElasticSearch的7.12.1版本镜像</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.12.1</span><br></pre></td></tr></table></figure></li><li><p>运行docker命令，部署单点ES</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name es \</span><br><span class="line">    -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">    -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">    --privileged \</span><br><span class="line">    --network es-net \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    elasticsearch:7.12.1</span><br></pre></td></tr></table></figure></li><li><p>命令解释：</p><ul><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：配置JVM的堆内存大小，默认是1G，但是最好不要低于512M</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：单点部署</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：数据卷挂载，绑定es的数据目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：数据卷挂载，绑定es的插件目录</li><li><code>-privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code>：让ES加入到这个网络当中</li><li><code>-p 9200</code>：暴露的HTTP协议端口，供我们用户访问的</li></ul></li><li><p>成功启动之后，打开浏览器访问：<a href="http://192.168.84.128:9200/"><code>http://192.168.84.128:9200/</code></a>， 即可看到elasticsearch的响应结果</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/08/xmsnuAR4.png"/></div></div></li></ul><h3 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h3><ul><li><p>同样是先拉取镜像，注意版本需要与ES保持一致</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:7.12.1</span><br></pre></td></tr></table></figure></li><li><p>运行docker命令，部署kibana</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name kibana \</span><br><span class="line">    -e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">    --network=es-net \</span><br><span class="line">    -p 5601:5601 \</span><br><span class="line">    kibana:7.12.1</span><br></pre></td></tr></table></figure></li><li><p>命令解释</p><ul><li><code>--network=es-net</code>：让kibana加入<code>es-net</code>这个网络，与ES在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200</code>：设置ES的地址，因为kibana和ES在同一个网络，因此可以直接用容器名访问ES</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul></li><li><p>成功启动后，打开浏览器访问：<a href="http://192.168.84.128:5601/"><code>http://192.168.84.128:5601/</code></a> ，即可以看到结果</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/13/Z1nMBLDH.png"/></div></div></li></ul><h3 id="DevTools"><a href="#DevTools" class="headerlink" title="DevTools"></a>DevTools</h3><ul><li>kibana中提供了一个DevTools界面，在这个界面中我们可以编写DSL来操作ElasticSearch，并且有对DSL语句的自动补全功能  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/08/hZFXVLyD.png"/></div></div></li></ul><h3 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h3><ul><li>默认的分词对中文的支持不是很好，所以这里我们需要安装IK插件</li><li><p>在线安装IK插件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it elasticsearch /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在线下载并安装</span></span><br><span class="line">./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment">#重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>IK分词器包含两种模式</p><ul><li><code>ik_smart</code>：最少切分</li><li><code>ik_max_word</code>：最细切分</li></ul></li><li><p>下面我们分别测试这两种模式</p>  <div class="tabs" id="安装ik分词器"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="安装ik分词器-1">ik_smart</button><button type="button" class="tab " data-href="安装ik分词器-2">ik_max_word</button></ul><div class="tab-contents"><div class="tab-item-content active" id="安装ik分词器-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;青春猪头G7人马文不会梦到JK黑丝兔女郎铁驭艾许&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;青春&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;猪头&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;G7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;LETTER&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;人&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;COUNT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;不会&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;梦到&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jk&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;黑&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;丝&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;兔女郎&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;铁&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;驭&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;艾&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">12</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;许&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p></div><div class="tab-item-content" id="安装ik分词器-2"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;青春猪头G7人马文不会梦到JK黑丝兔女郎铁驭艾许&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;青春&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;猪头&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;G7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;LETTER&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;G&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ARABIC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;人马&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;人&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;COUNT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;马文&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;不会&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;梦到&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jk&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;黑&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;丝&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">12</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;兔女郎&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;女郎&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">14</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;铁&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;驭&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">16</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;艾&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">17</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;许&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li><li><p>可以看到G7人马文在最少切分时，没有被分为<code>人马</code>，而在最细切分时，被分为了<code>人马</code>，而且目前现在识别不了<code>黑丝</code>、<code>铁驭</code>、<code>艾许</code>等词汇，所以我们需要自己扩展词典</p></li></ul><blockquote><p>随着互联网的发展，<code>造词运动</code>也愈发频繁。出现了许多新词汇，但是在原有的词汇表中并不存在，例如<code>白给</code>、<code>白嫖</code>等<br>所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能</p></blockquote><ol><li><p>打开IK分词器的config目录</p></li><li><p>找到IKAnalyzer.cfg.xml文件，并添加如下内容</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在IKAnalyzer.cfg.xml同级目录下新建ext.dic和stopword.dic，并编辑内容</p> <div class="tabs" id="安装ik分词器3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="安装ik分词器3-1">ext.dic</button><button type="button" class="tab " data-href="安装ik分词器3-2">stopword.dic</button></ul><div class="tab-contents"><div class="tab-item-content active" id="安装ik分词器3-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">艾许</span><br><span class="line">铁驭</span><br><span class="line">黑丝</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="安装ik分词器3-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">兔女郎</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li><li><p>重启es</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart es</span><br></pre></td></tr></table></figure></li><li><p>测试</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;青春&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;猪头&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;g7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;LETTER&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;人&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;COUNT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;不会&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;梦到&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jk&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;铁驭&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;艾许&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><ul><li>分词器的作用是什么？<ul><li>创建倒排索引时对文档分词</li><li>用户搜索时，对输入的内容分词</li></ul></li><li>IK分词有几种模式？<ul><li>ik_smart：智能切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul></li><li>IK分词器如何拓展词条？如何停用词条？<ul><li>利用config目录的IKAnalyzer.cfg.xml文件添加拓展词典和停用词典</li><li>在词典中添加拓展词条或者停用词条</li></ul></li></ul></blockquote><h1 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h1><ul><li><p>索引库就类似于数据库表，mapping映射就类似表的结构</p></li><li><p>我们要向es中存储数据，必须先创建<code>库</code>和<code>表</code></p></li></ul><h2 id="mapping映射属性"><a href="#mapping映射属性" class="headerlink" title="mapping映射属性"></a>mapping映射属性</h2><ul><li><p>mapping是对索引库中文档的约束，常见的mapping属性包括</p><ul><li><p><code>type</code>：字段数据类型，常见的简单类型有</p><ol><li>字符串：text(可分词文本)、keyword(精确值，例如：品牌、国家、ip地址；因为这些词，分词之后毫无意义)</li><li>数值：long、integer、short、byte、double、float</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ol></li><li><p>index：是否创建索引，默认为true，默认情况下会对所有字段创建倒排索引，即每个字段都可以被搜索。但是某些字段是不存在搜索的意义的，例如邮箱，图片(存储的只是图片url)，搜索邮箱或图片url的片段，没有任何意义。因此我们在创建字段映射时，一定要判断一下这个字段是否参与搜索，如果不参与搜索，则将其设置为false</p></li><li><code>analyzer</code>：使用哪种分词器</li><li><code>properties</code>：该字段的子字段</li></ul></li><li><p>例如下面的json文档</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">48</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isMarried&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;次元游击兵--恶灵&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wraith@Apex.net&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">99.1</span><span class="punctuation">,</span> <span class="number">99.5</span><span class="punctuation">,</span> <span class="number">98.9</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;雷尼&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;布莱希&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>对应的每个字段映射(mapping)：</p></li></ul><div class="table-container"><table><thead><tr><th>字段</th><th>类型</th><th>index</th><th>analyzer</th></tr></thead><tbody><tr><td>age</td><td>integer</td><td>true</td><td>null</td></tr><tr><td>weight</td><td>float</td><td>true</td><td>null</td></tr><tr><td>isMarried</td><td>boolean</td><td>true</td><td>null</td></tr><tr><td>info</td><td>text</td><td>true</td><td>ik_smart</td></tr><tr><td>email</td><td>keyword</td><td>false</td><td>null</td></tr><tr><td>score</td><td>float</td><td>true</td><td>null</td></tr><tr><td>name</td><td>object</td><td></td><td></td></tr><tr><td>name.firstName</td><td>keyword</td><td>true</td><td>null</td></tr><tr><td>name.lastName</td><td>keyword</td><td>true</td><td>null</td></tr></tbody></table></div><ul><li>其中<code>score</code>：虽然是数组，但是我们只看其中元素的类型，类型为float；<code>email</code>不参与搜索，所以<code>index</code>为<code>false</code>；<code>info</code>参与搜索，且需要分词，所以需要设置一下分词器</li></ul><blockquote><p>小结</p><pre><code>- mapping常见属性有哪些？    1. type：数据类型    2. index：是否创建索引    3. analyzer：选择分词器    4. properties：子字段- type常见的有哪些    1. 字符串：text、keyword    2. 数值：long、integer、short、byte、double、float    3. 布尔：boolean    4. 日期：date    5. 对象：object</code></pre></blockquote><h2 id="索引库的CRUD"><a href="#索引库的CRUD" class="headerlink" title="索引库的CRUD"></a>索引库的CRUD</h2><ul><li>这里是使用的Kibana提供的DevTools编写DSL语句</li></ul><h3 id="创建索引库和映射"><a href="#创建索引库和映射" class="headerlink" title="创建索引库和映射"></a>创建索引库和映射</h3><ul><li><p>基本语法</p><ul><li>请求方式：<code>PUT</code></li><li>请求路径：<code>/&#123;索引库名&#125;</code>，可以自定义</li><li>请求参数：<code>mapping映射</code></li></ul></li><li><p>格式</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段名1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text &quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段名2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段名3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;子字段1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;子字段2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /test001</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="查询索引库"><a href="#查询索引库" class="headerlink" title="查询索引库"></a>查询索引库</h3><ul><li><p>基本语法</p><ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/&#123;索引库名&#125;</code><br>请求参数：<code>无</code></li></ul></li><li><p>格式：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>举例</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test001</span><br></pre></td></tr></table></figure></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/JfTjeWys.png"/></div></div><h3 id="修改索引库"><a href="#修改索引库" class="headerlink" title="修改索引库"></a>修改索引库</h3><ul><li><p>基本语法</p><ul><li>请求方式：<code>PUT</code></li><li>请求路径：<code>/&#123;索引库名&#125;/_mapping</code></li><li>请求参数：<code>mapping映射</code></li></ul></li><li><p>格式：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;新字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>倒排索引结构虽然不复杂，但是一旦数据结构改变(比如改变了分词器)，就需要重新创建倒排索引，这简直是灾难。因此索引库<code>一旦创建，就无法修改mapping</code></p></li><li><p>虽然无法修改mapping中已有的字段，但是却允许添加新字段到mapping中，因为不会对倒排索引产生影响</p></li><li><p>示例：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /test001/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/CZAPu6iN.png"/></div></div><ul><li>如果强行改，则会报错</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/1a4NsYwg.png"/></div></div><h3 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h3><ul><li><p>基本语法：</p><ul><li>请求方式：<code>DELETE</code></li><li>请求路径：<code>&#123;索引库名&#125;</code></li><li>请求参数：无</li></ul></li><li><p>格式</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>索引库操作有哪些？<ol><li>创建索引名：PUT /{索引库名}</li><li>查询索引库：GET /{索引库名}</li><li>删除索引库：DELETE /{索引库名}</li><li>添加字段：PUT /{索引库名}/_mapping</li></ol></li></ul><h1 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h1><h2 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h2><ul><li><p>语法</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>文档id<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;子属性1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;子属性2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /test001/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;次元游记兵--恶灵&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wraith@Apex.net&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;雷尼&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;布莱希&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>响应</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/sACngHcg.png"/></div></div></li></ul><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><ul><li><p>根据rest风格，新增是post，查询应该是get，而且一般查询都需要条件，这里我们把文档id带上</p></li><li><p>语法</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test001/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>查看结果，若未查询到结果，found为false</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/sD6IqV9p.png"/></div></div></li></ul><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><ul><li>删除使用DELETE请求，同样，需要根据id进行删除</li><li><p>语法</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例：根据id删除数据, 若删除的文档不存在, 则result为not found</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /test001/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/43P5BAUB.png"/></div></div></li></ul><h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><ul><li>修改有两种方式<ol><li>全量修改：直接覆盖原来的文档</li><li>增量修改：修改文档中的部分字段</li></ol></li></ul><h3 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h3><ul><li>全量修改是覆盖原来的文档，其本质是<ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul></li></ul><blockquote><p>注意：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了</p></blockquote><ul><li><p>语法</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>文档id<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /test001/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;爆破专家--暴雷&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@Apex.net&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;沃尔特&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菲茨罗伊&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/hfy70wKi.png"/></div></div></li></ul><h3 id="增量修改"><a href="#增量修改" class="headerlink" title="增量修改"></a>增量修改</h3><ul><li><p>增量修改只修改指定id匹配文档中的部分字段</p></li><li><p>语法</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_update/<span class="punctuation">&#123;</span>文档id<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新的值&quot;</span><span class="punctuation">,</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /test001/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;BestApex@Apex.net&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;恐怖G7人--马文&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/CqRWwMLt.png"/></div></div></li><li><p>查看修改指定字段后的文档</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/dHb1OEtr.png"/></div></div></li></ul><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul><li>文档的操作有哪些？<ol><li>创建文档：POST /{索引库名}/_doc/{id}</li><li>查询文档：GET /{索引库名}/_doc/{id}</li><li>删除文档：DELETE /{索引库名}/_doc/{id}</li><li>修改文档<ul><li>全量修改：PUT /{索引库名}/_doc/{id}</li><li>增量修改：POST /{索引库名}/_update/{id}</li></ul></li></ol></li></ul><h1 id="RestAPI"><a href="#RestAPI" class="headerlink" title="RestAPI"></a>RestAPI</h1><ul><li><p>ES官方提供了各种不同语言的客户端用来操作ES。这些客户端的本质就是组装DSL语句，通过HTTP请求发送给ES。<br>官方文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html"><code>https://www.elastic.co/guide/en/elasticsearch/client/index.html</code></a></p></li><li><p>其中JavaRestClient又包括两种</p><ul><li>Java Low Level Rest Client</li><li>Java High Level Rest Client</li></ul></li><li><p>这里学习的是Java High Level Rest Client</p></li></ul><h2 id="导入Demo工程"><a href="#导入Demo工程" class="headerlink" title="导入Demo工程"></a>导入Demo工程</h2><ul><li>导入黑马提供的数据库数据和hotel-demo，其中表结构如下</li></ul><div class="table-container"><table><thead><tr><th>字段</th><th>类型</th><th>长度</th><th>注释</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>20</td><td>酒店id</td></tr><tr><td>name</td><td>varchar</td><td>255</td><td>酒店名称</td></tr><tr><td>address</td><td>varchar</td><td>255</td><td>酒店地址</td></tr><tr><td>price</td><td>int</td><td>10</td><td>酒店价格</td></tr><tr><td>score</td><td>int</td><td>2</td><td>酒店评分</td></tr><tr><td>brand</td><td>varchar</td><td>32</td><td>酒店品牌</td></tr><tr><td>city</td><td>varchar</td><td>32</td><td>所在城市</td></tr><tr><td>star_name</td><td>varchar</td><td>16</td><td>酒店星级，1星到5星，1钻到5钻</td></tr><tr><td>business</td><td>varchar</td><td>255</td><td>商圈</td></tr><tr><td>latitude</td><td>varchar</td><td>32</td><td>纬度</td></tr><tr><td>longitude</td><td>varchar</td><td>32</td><td>经度</td></tr><tr><td>pic</td><td>varchar</td><td>255</td><td>酒店图片</td></tr></tbody></table></div><h3 id="mapping映射分析"><a href="#mapping映射分析" class="headerlink" title="mapping映射分析"></a>mapping映射分析</h3><ul><li><p>创建索引库，最关键的是mapping映射，而mapping映射要考虑的信息包括</p><ol><li>字段名？</li><li>字段数据类型？</li><li>是否参与搜索？</li><li>是否需要分词？<ul><li>如果分词，分词器是什么？</li></ul></li></ol></li><li><p>其中</p><ul><li>字段名、字段数据类型，可以参考数据表结构的名称和类型</li><li>是否参与搜索要分析业务来判断，例如图片地址，就无需参与搜索</li><li>是否分词要看内容，如果内容是一个整体就无需分词，反之则需要分词</li><li>分词器，为了提高被搜索到的概率，统一使用最细切分ik_max_word</li></ul></li><li><p>下面我们来分析一下酒店数据的索引库结构</p><ul><li><code>id</code>：id的类型比较特殊，不是<code>long</code>，而是<code>keyword</code>，而且id后期肯定需要涉及到我们的增删改查，所以需要参与搜索</li><li><code>name</code>：需要参与搜索，而且是<code>text</code>，需要参与分词，分词器选择ik_max_word</li><li><code>address</code>：是字符串，但是个人感觉不需要分词（所以这里把它设为keyword），当然你也可以选择分词，个人感觉不需要参与搜索，所以index为false</li><li><code>price</code>：类型：integer，需要参与搜索（做范围排序）</li><li><code>score</code>：类型：integer，需要参与搜索（做范围排序）</li><li><code>brand</code>：类型：keyword，但是不需要分词（品牌名称分词后毫无意义），所以为keyword，需要参与搜索</li><li><code>city</code>：类型：keyword，分词无意义，需要参与搜索</li><li><code>star_name</code>：类型：keyword，需要参与搜索</li><li><code>business</code>：类型：keyword，需要参与搜索</li><li><code>latitude</code>和<code>longitude</code>：地理坐标在ES中比较特殊，ES中支持两种地理坐标数据类型:<ol><li><code>geo_point</code>:由纬度（latitude）和经度（longitude）确定的一个点。例如:“32.8752345,120.2981576”</li><li><code>geo_shape</code>:有多个geo_point组成的复杂几何图形。例如一条直线,“LINESTRING (-77.03653 38.897676,-77.009051 38.889939)”<ul><li>所以这里应该是geo_point类型</li></ul></li></ol></li><li>pic：类型：keyword，不需要参与搜索，index为false<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>但是现在还有一个小小的问题，现在我们的name、brand、city字段都需要参与搜索，也就意味着用户在搜索的时候，会根据多个字段搜，例如：<code>上海虹桥希尔顿五星酒店</code></p></li><li><p>那么ES是根据多个字段搜效率高，还是根据一个字段搜效率高</p><ul><li>显然是搜索一个字段效率高</li></ul></li><li><p>那现在既想根据多个字段搜又想要效率高，怎么解决这个问题呢？</p><ul><li>ES给我们提供了一种简单的解决方案</li></ul></li></ul><blockquote><p>字段拷贝可以使用<code>copy_to</code>属性，将当前字段拷贝到指定字段，示例<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><ul><li>那现在修改我们的DSL语句  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">,</span> <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="初始化RestClient"><a href="#初始化RestClient" class="headerlink" title="初始化RestClient"></a>初始化RestClient</h3><ul><li>在<code>ElasticSearch</code>提供的API中，与<code>ElasticSearch</code>一切交互都封装在一个名为<code>RestHighLevelClient</code>的类中，必须先完成这个对象的初始化，建立与ES的连接</li></ul><ol><li>引入ES的RestHighLevelClient的依赖 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>因为SpringBoot管理的ES默认版本为7.6.2，所以我们需要覆盖默认的ES版本 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>初始化RestHighLevelClient <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">        HttpHost.create(<span class="string">&quot;http://192.168.150.101:9200&quot;</span>)</span><br><span class="line">));</span><br></pre></td></tr></table></figure></li></ol><ul><li>但是为了单元测试方便，我们创建一个测试类HotelIndexTest，在成员变量声明一个RestHighLevelClient，然后将初始化的代码编写在<code>@BeforEach</code>中  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HotelDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;http://192.168.128.130:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h2><h3 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h3><ul><li>创建索引库的代码如下  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCreateHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class="line">    client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>代码分为三部分<ol><li>创建Request对象，因为是创建索引库的操作，因此Request是CreateIndexRequest，这一步对标DSL语句中的<code>PUT/hotel</code></li><li>添加请求参数，其实就是DSL的JSON参数部分，因为JSON字符很长，所以这里定义了静态常量<code>MAPPING_TEMPLATE</code>，让代码看起来更优雅 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAPPING_TEMPLATE</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;name\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;address\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;price\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;score\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;brand\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;city\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;starName\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;business\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        , \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;location\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;pic\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      \&quot;all\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;      &#125;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>发送请求，client.indics()方法的返回值是IndicesClient类型，封装了所有与索引库有关的方法</li></ol></li></ul><h2 id="删除索引库-1"><a href="#删除索引库-1" class="headerlink" title="删除索引库"></a>删除索引库</h2><ul><li>删除索引库的DSL语句非常简单  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /hotel</span><br></pre></td></tr></table></figure></li><li>与创建索引库相比<ul><li>请求方式由PUT变为了DELETE</li><li>请求路径不变</li><li>无请求参数</li></ul></li><li>所以代码的差异，主要体现在Request对象上，整体步骤没有太大变化<ol><li>创建Request对象，这次是DeleteIndexRequest对象</li><li>准备请求参数，这次是无参</li><li>发送请求，改用delete方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="判断索引库是否存在"><a href="#判断索引库是否存在" class="headerlink" title="判断索引库是否存在"></a>判断索引库是否存在</h2><ul><li>判断索引库是否存在，本质就是查询，对应的DSL是  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel</span><br></pre></td></tr></table></figure></li><li>因此与删除的java代码流程是类似的<ol><li>创建Request对象，这次是GetIndexRequest对象</li><li>准备请求参数，这里是无参</li><li>发送请求，改用exists方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists ? <span class="string">&quot;索引库已存在&quot;</span> : <span class="string">&quot;索引库不存在&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><ul><li><p>JavaRestClient对索引库操作的流程基本类似，核心就是client.indices()方法来获取索引库的操作对象</p></li><li><p>索引库操作基本步骤</p><ol><li>初始化RestHighLevelClient</li><li>创建XxxIndexRequest。Xxx是Create、Get、Delete</li><li>准备DSL(Create时需要，其他事无参)</li><li>发送请求，调用RestHighLevelClient().().xxx()方法，xxx是create、exists、delete</li></ol></li></ul><h1 id="RestClient"><a href="#RestClient" class="headerlink" title="RestClient"></a>RestClient</h1><ul><li>为了与索引库操作分离，我们再添加一个测试类，做两件事<ol><li>初始化RestHighLevelClient</li><li>我们的酒店数据在数据库，需要利用IHotelService去查询，所以要注入这个接口 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.blog.hotel.service.IHotelService;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;http://192.168.128.130:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="新增文档-1"><a href="#新增文档-1" class="headerlink" title="新增文档"></a>新增文档</h2><ul><li>我们要把数据库中的酒店数据查询出来，写入ES中</li></ul><h3 id="索引库实体类"><a href="#索引库实体类" class="headerlink" title="索引库实体类"></a>索引库实体类</h3><ul><li><p>数据库查询后的结果是一个Hotel类型的对象，结构如下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hotel</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String longitude;</span><br><span class="line">    <span class="keyword">private</span> String latitude;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>但是与我们的索引库结构存在差异</p><ul><li>longitude和latitude需要合并为location</li></ul></li><li>因此我们需要一个新类型，与索引库结构吻合  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h3><ul><li>新增文档的DSL语法如下  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">21</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>对应的Java代码对应如下  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testIndexDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;indexName&quot;</span>).id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    request.source(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Jack\&quot;,\&quot;age\&quot;:21&#125;&quot;</span>);</span><br><span class="line">    client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可以看到与创建索引库类似，同样是三步走：<ol><li>创建Request对象</li><li>准备请求参数，也就是DSL中的JSON文档</li><li>发送请求</li></ol></li><li>变化的地方在于，<code>这里直接使用client.xxx()</code>的API，不再需要client.indices()了</li></ul><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><ul><li>我们导入酒店数据，基本流程一致，但是需要考虑几点变化<ol><li>酒店数据来自于数据库，我们需要先从数据库中查询，得到<code>Hotel</code>对象</li><li><code>Hotel</code>对象需要转换为<code>HotelDoc</code>对象</li><li><code>HotelDoc</code>需要序列化为<code>json</code>格式</li></ol></li><li>因此，代码整体步骤如下<ol><li>根据id查询酒店数据Hotel</li><li>将Hotel封装HotelDoc</li><li>将HotelDoc序列化为Json</li><li>创建IndexRequest，指定索引库名和id</li><li>准备请求参数，也就是Json文档</li><li>发送请求</li></ol></li><li>在hotel-demo的HotelDocumentTest测试类中，编写单元测试  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 根据id查询酒店数据</span></span><br><span class="line">    <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">61083L</span>);</span><br><span class="line">    <span class="comment">// 2. 转换为文档类型</span></span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">    <span class="comment">// 3. 转换为Json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(hotelDoc);</span><br><span class="line">    <span class="comment">// 4. 准备request对象</span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>();</span><br><span class="line">    <span class="comment">// 5. 准备json文档</span></span><br><span class="line">    request.source(jsonString, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 6. 发送请求</span></span><br><span class="line">    client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在kibana中查询我们新增的文档，发现我们的文档主要是在<code>_source</code>属性里，记住这点，后面要用</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/14/EZjSmLr4.png"/></div></div>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;61083&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;自由贸易试验区临港新片区南岛1号&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brand&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;皇冠假日&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;business&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;滴水湖临港地区&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">61083</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;30.890867, 121.937241&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;上海滴水湖皇冠假日酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pic&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb3/s1/2n9c/312e971Rnj9qFyR3pPv4bTtpj1hX_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">971</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;starName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;五钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="查询文档-1"><a href="#查询文档-1" class="headerlink" title="查询文档"></a>查询文档</h2></li><li><p>查询的DSL语句如下</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>由于没有请求参数，所以非常简单，代码分为以下两步<ol><li>准备Request对象</li><li>发送请求</li><li>解析结果</li></ol></li><li>不过查询的目的是为了得到HotelDoc，因此难点是结果的解析，在刚刚查询的结果中，我们发现HotelDoc对象的主要内容在<code>_source</code>属性中，所以我们要获取这部分内容，然后将其转化为HotelDoc  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备request对象</span></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(<span class="string">&quot;61083&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 发送请求，得到结果</span></span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 3. 解析结果</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(jsonStr, HotelDoc.class);</span><br><span class="line">    System.out.println(hotelDoc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改文档-1"><a href="#修改文档-1" class="headerlink" title="修改文档"></a>修改文档</h2><ul><li>修改依旧是两种方式<ol><li>全量修改：本质是先根据id删除，再新增</li><li>增量修改：修改文档中的指定字段值</li></ol></li><li>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID<ul><li>若新增时，ID已经存在，则修改（删除再新增）</li><li>若新增时，ID不存在，则新增</li></ul></li><li>这里就主要讲增量修改，对应的DSL语句如下  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /test001/_update/<span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;BestApex@Apex.net&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;恐怖G7人--马文&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>与之前类似，也是分为三步<ol><li>准备Request对象，这次是修改，对应的就是UpdateRequest</li><li>准备参数，也就是对应的JSON文档，里面包含要修改的字段</li><li>发送请求，更新文档 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备request对象</span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>,<span class="string">&quot;61083&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 准备参数</span></span><br><span class="line">    request.doc(</span><br><span class="line">            <span class="string">&quot;city&quot;</span>,<span class="string">&quot;北京&quot;</span>,</span><br><span class="line">            <span class="string">&quot;price&quot;</span>,<span class="number">1888</span>);</span><br><span class="line">    <span class="comment">// 3. 发送请求</span></span><br><span class="line">    client.update(request,RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h2 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title="删除文档"></a>删除文档</h2><ul><li>删除的DSL语句如下  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /hotel/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>-与查询相比，仅仅是请求方式由DELETE变为GET，不难猜想对应的Java依旧是三步走</p><pre><code>1. 准备Request对象，因为是删除，所以是DeleteRequest对象，要指明索引库名和id2. 准备参数，无参3. 发送请求，因为是删除，所以是client.delete()方法</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备request对象</span></span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>,<span class="string">&quot;61083&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 发送请求</span></span><br><span class="line">    client.delete(request,RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>成功删除之后，再调用查询的测试方法，返回值为null，删除成功</li></ul><h2 id="批量导入文档"><a href="#批量导入文档" class="headerlink" title="批量导入文档"></a>批量导入文档</h2><ul><li>之前我们都是一条一条的新增文档，但实际应用中，还是需要批量的将数据库数据导入索引库中</li></ul><blockquote><p>需求：批量查询酒店数据，然后批量导入索引库中<br>思路：</p><pre><code>1. 利用mybatis-plus查询酒店数据2. 将查询到的酒店数据(Hotel)转化为文档类型数据(HotelDoc)3. 利用JavaRestClient中的Bulk批处理，实现批量新增文档，示例代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulkAddDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(<span class="string">&quot;101&quot;</span>).source(<span class="string">&quot;json source1&quot;</span>, XContentType.JSON));</span><br><span class="line">    request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(<span class="string">&quot;102&quot;</span>).source(<span class="string">&quot;json source2&quot;</span>, XContentType.JSON));</span><br><span class="line">    client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></blockquote><ul><li><p>实现代码如下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulkAddDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    List&lt;Hotel&gt; hotels = hotelService.list();</span><br><span class="line">    <span class="keyword">for</span> (Hotel hotel : hotels) &#123;</span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).</span><br><span class="line">                id(hotelDoc.getId().toString()).</span><br><span class="line">                source(JSON.toJSONString(hotelDoc), XContentType.JSON));</span><br><span class="line">    &#125;</span><br><span class="line">    client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用stream流操作可以简化代码</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBulkAddDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">    hotelService.list().stream().forEach(hotel -&gt; </span><br><span class="line">            request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>)</span><br><span class="line">                    .id(hotel.getId().toString())</span><br><span class="line">                    .source(JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel)), XContentType.JSON)));</span><br><span class="line">    client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>文档初始化的基本步骤<ol><li>初始化RestHighLevelClient</li><li>创建XxxRequest对象，Xxx是Index、Get、Update、Delete</li><li>准备参数（Index和Update时需要）</li><li>发送请求，调用RestHighLevelClient.xxx方法，Xxx是Index、Get、Update、Delete</li><li>解析结果（Get时需要）</li></ol></li></ul><h1 id="DSL查询文档"><a href="#DSL查询文档" class="headerlink" title="DSL查询文档"></a>DSL查询文档</h1><ul><li>ElasticSearch的查询依然是基于JSON风格的DSL来实现</li></ul><h2 id="DSL查询分类"><a href="#DSL查询分类" class="headerlink" title="DSL查询分类"></a>DSL查询分类</h2><ul><li><p>ElasticSearch提供了基于DSL来定义查询。常见的查询类型包括</p><ul><li><p><code>查询所有</code>：查询出所有数据，一般测试用。例如</p><ul><li>match_all</li></ul></li><li><p><code>全文检索（full text）</code>：利用分词器对用户输入的内容分词，然后去倒排索引库中匹配。例如</p><ul><li>match_query</li><li>multi_match_query</li></ul></li><li><p><code>精确查询</code>：根据精确词条值查找数据，一般是查找keyword、数值、日期、Boolean等类型字段。例如</p><ul><li>ids</li><li>range</li><li>term</li></ul></li><li><p><code>地理查询（geo）</code>：根据经纬度查询。例如</p><ul><li>geo_distance</li><li>geo_bounding_box</li></ul></li><li><p><code>复合查询（compound）</code>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如</p><ul><li>bool</li><li>function_score</li></ul></li></ul></li><li><p>查询的语法基本一致</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexname/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;查询类型&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;查询条件&quot;</span><span class="punctuation">:</span> <span class="string">&quot;条件值&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>这里以查询所有为例</p><ul><li>查询类型为<code>match_all</code></li><li><p>没有查询条件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>其他的无非就是<code>查询类型</code>和<code>查询条件</code>的变化</p></li></ul><h2 id="全文检索的查询"><a href="#全文检索的查询" class="headerlink" title="全文检索的查询"></a>全文检索的查询</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>全文检索的查询流程基本如下</p><ol><li>根据用户搜索的内容做分词，得到词条</li><li>根据词条去倒排索引库中匹配，得到文档id</li><li>根据文档id找到的文档，返回给用户</li></ol></li><li><p>比较常用的场景包括</p><ul><li>商城的输入框搜索</li><li>百度输入框搜索</li></ul></li><li><p>因为是拿着词条去匹配，因此参与搜索的字段也必须是可分词的text类型的字段</p></li></ul><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p>常见的全文检索包括</p><ul><li>match查询：单字段查询</li><li>multi_match查询：多字段查询，任意一个字段符合条件就算符合查询条件</li></ul></li><li><p>match查询语法如下</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>multi_match语法如下</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;FIELD1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;FIELD2&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>查询上海外滩的酒店数据</p><ul><li>以match查询示例，这里的<code>all</code>字段是之前由<code>name</code>、<code>city</code>、<code>business</code>这三个字段拷贝得来的<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海外滩&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/34QOEgYc.png"/></div></div></li></ul></li><li><p>以multi_match查询示例</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海外滩&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;brand&quot;</span><span class="punctuation">,</span> <span class="string">&quot;city&quot;</span><span class="punctuation">,</span> <span class="string">&quot;business&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/4owLHZ6B.png"/></div></div></li><li><p>可以看到，这两种查询的结果是一样的，为什么？</p><ul><li>因为我们将<code>name</code>、<code>city</code>、<code>business</code>的值都利用<code>copy_to</code>复制到了all字段中，因此根据这三个字段搜索和根据all字段搜索的结果当然一样了</li><li>但是搜索的字段越多，对查询性能影响就越大，因此建议采用<code>copy_to</code>，然后使用单字段查询的方式</li></ul></li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li>match和multi_match的区别是什么？<ul><li>match：根据一个字段查询</li><li>multi_match：根据多个字段查询，参与查询的字段越多，查询性能就越差</li></ul></li></ul><h2 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h2><ul><li>精确查询一般是查找keyword、数值、日期、boolean等类型字段。所以不会对搜索条件分词。常见的有<ul><li><code>term</code>：根据词条精确值查询</li><li><code>range</code>：根据值的范围查询</li></ul></li></ul><h3 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h3><ul><li><p>因为紧缺查询的字段是不分词的字段，因此查询的条件也必须是部分词的词条。查询时，用户输入的内容跟字段值完全匹配时才认为符合条件。如果用户输入的内容过多或过少，都会搜索不到数据</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/Nil1M1iX.png"/></div></div></li><li><p>语法说明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VALUE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例：查询北京的酒店数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/amNunBNJ.png"/></div></div></li><li><p>但是当搜索的内容不是词条时，而是多个词语组成的短语时，反而搜索不到</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/hpRl79oc.png"/></div></div></li></ul><h3 id="range查询"><a href="#range查询" class="headerlink" title="range查询"></a>range查询</h3><ul><li><p>范围查询，一般应用在对数值类型做范围过滤的时候。例如做价格范围的过滤</p></li><li><p>基本语法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="comment">//这里的gte表示大于等于，gt表示大于</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">20</span>  <span class="comment">//这里的let表示小于等于，lt表示小于</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例：查询酒店价格在1000~3000的酒店</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">3000</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/1IWknMDm.png"/></div></div></li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul><li>精确查询常见的有哪些？<ol><li>term查询：根据词条精确匹配，一般搜索keyword类型、数值类型、布尔类型、日期类型字段</li><li>range查询：根据数值范围查询，可以使数值、日期的范围</li></ol></li></ul><h2 id="地理坐标查询"><a href="#地理坐标查询" class="headerlink" title="地理坐标查询"></a>地理坐标查询</h2><ul><li><p>所谓地理坐标查询，其实就是根据经纬度查询，官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html"><code>https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html</code></a></p></li><li><p>常见的使用场景包括</p><ol><li>携程：搜索附近的酒店</li><li>滴滴：搜索附近的出租车</li><li>微信：搜索附近的人</li></ol></li></ul><h3 id="矩形范围查询"><a href="#矩形范围查询" class="headerlink" title="矩形范围查询"></a>矩形范围查询</h3><ul><li><p>矩形范围查询，也就是geo_bounding_box查询，查询坐标落在某个矩形范围内的所有文档</p></li><li><p>查询时。需指定矩形的左上、游戏啊两个点的坐标，然后画出一个矩形，落在该矩形范围内的坐标，都是符合条件的文档</p></li><li><p>基本语法</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;geo_bounding_box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;top_left&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>       <span class="comment">// 左上点</span></span><br><span class="line">        <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">31.1</span><span class="punctuation">,</span>      <span class="comment">// lat: latitude 纬度 </span></span><br><span class="line">        <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.5</span>      <span class="comment">// lon: longitude 经度</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bottom_right&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>   <span class="comment">// 右下点</span></span><br><span class="line">        <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">30.9</span><span class="punctuation">,</span>      <span class="comment">// lat: latitude 纬度 </span></span><br><span class="line">        <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.7</span>      <span class="comment">// lon: longitude 经度</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;geo_bounding_box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;top_left&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">31.1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.5</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bottom_right&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">30.9</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.7</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/1UMPfcv1.png"/></div></div></li></ul><h3 id="附近查询"><a href="#附近查询" class="headerlink" title="附近查询"></a>附近查询</h3><ul><li><p>附近查询，也叫做举例查询(geo_distance)：查询到指定中心点的距离小于等于某个值的所有文档</p></li><li><p>换句话说，也就是以指定中心点为圆心，指定距离为半径，画一个圆，落在圆内的坐标都算符合条件</p></li><li><p>语法说明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3km&quot;</span><span class="punctuation">,</span>            <span class="comment">// 半径</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;39.9, 116.4&quot;</span>     <span class="comment">// 圆心</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例：查询我附近3km内的酒店文档</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3km&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;39.9, 116.4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/ERxuBtEj.png"/></div></div></li></ul><h2 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h2><ul><li>复合(compound)查询：复合查询可以将其他简单查询组合起来，实现更复杂的搜索逻辑，常见的有两种<ol><li>function score：算分函数查询，可以控制文档相关性算分，控制文档排名(例如搜索引擎的排名，第一大部分都是广告)</li><li>bool query：布尔查询，利用逻辑关系组合多个其他的查询，实现复杂搜索</li></ol></li></ul><h3 id="相关性算分"><a href="#相关性算分" class="headerlink" title="相关性算分"></a>相关性算分</h3><ul><li><p>当我们利用match查询时，文档结果会根据搜索词条的关联度打分(_score)，返回结果时按照分值降序排列</p></li><li><p>例如我们搜索虹桥如家，结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">17.850193</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;虹桥如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">12.259849</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;外滩如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">11.91091</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;迪士尼如家酒店真不错&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>在ES中，早期使用的打分算法是TF-IDF算法，公式如下</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/uBizQw2W.png"/></div></div></li><li><p>再后来的5.1版本升级中，ES将算法改进为BM25算法，公式如下</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/W822LGy5.png"/></div></div></li><li><p>TF-IDF算法有一种缺陷，就是词条频率越高，文档得分也会越高，单个词条对文档影响较大。而BM25则会让单个词条的算分有一个上限，曲线更平滑</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/4tbOvx2M.png"/></div></div></li><li><p>小结：ES会根据词条和文档的相关度做打分，算法有两种</p><ol><li>TF-IDF算法</li><li>BM25算法， ES 5.1版本后采用的算法</li></ol></li></ul><h3 id="算分函数查询"><a href="#算分函数查询" class="headerlink" title="算分函数查询"></a>算分函数查询</h3><ul><li><p>根据相关度打分是比较合理的需求，但是合理的并不一定是产品经理需要的</p></li><li><p>以某搜索引擎为例，你在搜索的结果中，并不是相关度越高就越靠前，而是谁掏的钱多就让谁的排名越靠前</p></li><li><p>要想控制相关性算分，就需要利用ES中的<code>function score</code>查询了</p></li><li><p>语法说明</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;function_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外滩&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;boost_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;multiply&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/LZtkcuhS.png"/></div></div></li><li><p>function score查询中包含四部分内容</p><ol><li>原始查询条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，原始算分(query score)</li><li>过滤条件：filter部分，符合该条件的文档才会被重新算分</li><li>算分函数：符合filter条件的文档要根据这个函数做运算，得到函数算分(function score)，有四种函数<ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数算法</li></ul></li><li>运算模式：算分函数的结果、原始查询的相关性算分，二者之间的运算方式，包括<ul><li>multiply：相乘</li><li>replace：用function score替换query score</li><li>其他，例如：sum、avg、max、min</li></ul></li></ol></li><li><p>function score的运行流程如下</p><ol><li>根据<code>原始条件</code>查询搜索文档，并且计算相关性算分，称为原始算法(query score)</li><li>根据<code>过滤条件</code>，过滤文档</li><li>符合<code>过滤条件</code>的文档，基于<code>算分函数</code>运算，得到<code>函数算分</code>(function score)</li><li>将<code>原始算分</code>(query score)和<code>函数算分</code>(function score)基于<code>运算模式</code>做运算，得到最终给结果，作为相关性算分</li></ol></li><li><p>因此，其中的关键点是：</p><ul><li>过滤条件：决定哪些文档的算分被修改</li><li>算分函数：决定函数算分的算法</li><li>运算模式：决定最终算分结果</li></ul></li></ul><blockquote><p>需求：给<code>如家</code>这个品牌的酒店排名靠前一点<br>思路：过滤条件为<code>&quot;brand&quot;: &quot;如家&quot;</code>，算分函数和运算模式我们可以暴力一点，固定算分结果相乘</p></blockquote><ul><li><p>对应的DSL语句如下，我们搜索外滩的酒店，对如家品牌过滤，最终的运算结果是10倍的原始算分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;function_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外滩&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;boost_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;multiply&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>可以看到，如家的算分达到了38，而第二名仅有6，成功将如家品牌的酒店提升到第一名</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/20/PHQNVTZo.png"/></div></div></li></ul><h3 id="布尔查询"><a href="#布尔查询" class="headerlink" title="布尔查询"></a>布尔查询</h3><ul><li><p>布尔查询是一个或多个子查询的组合，每一个子句就是一个子查询。子查询的组合方式有</p><ol><li><code>must</code>：必须匹配每个子查询，类似<code>与</code></li><li><code>should</code>：选择性匹配子查询，类似<code>或</code></li><li><code>must_not</code>：必须不匹配，<code>不参与算分</code>，类似<code>非</code></li><li><code>filter</code>：必须匹配，<code>不参与算分</code></li></ol></li><li><p>例如在搜索酒店时，除了关键字搜索外，我们还可能根据酒店品牌、价格、城市等字段做过滤</p></li><li><p>每一个不同的字段，其查询条件、方式都不一样，必须是多个不同的查询，而要组合这些查询，就需要用到布尔查询了</p></li></ul><blockquote><p>需要注意的是，搜索时，参与打分的字段越多，查询的性能就越差，所以在多条件查询时</p><ul><li>搜索框的关键字搜索，是全文检索查询，使用must查询，参与算分</li><li>其他过滤条件，采用filter和must_not查询，不参与算分</li></ul><p>需求：搜索名字中包含<code>如家</code>，价格不高于<code>400</code>，在坐标<code>39.9, 116.4</code>周围<code>10km</code>范围内的酒店<br>分析：</p><ul><li>名称搜索，属于全文检索查询，应该参与算分，放到<code>must</code>中</li><li>价格不高于400，用range查询，属于过滤条件，不参与算分，放到<code>must_not</code>中</li><li>周围10km范围内，用geo_distance查询，属于过滤条件，放到<code>filter</code>中<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;gt&quot;</span><span class="punctuation">:</span> <span class="number">400</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10km&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">39.9</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.4</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>需求：搜索城市在上海，品牌为<code>皇冠假日</code>或<code>华美达</code>，价格<code>不低于500</code>，且用户评分在<code>45分</code>以上的酒店<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;皇冠假日&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华美达&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">500</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">45</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><ul><li>如果细心一点，就会发现这里的should有问题，must和should一起用的时候，should会不生效，结果中会查询到除了<code>皇冠假日</code>和<code>华美达</code>之外的品牌。</li><li>对于DSL语句的解决方案比较麻烦，需要在must里再套一个bool，里面再套should，但是对于Java代码来说比较容易修改</li></ul></blockquote><ul><li>小结：布尔查询有几种逻辑关系？<ol><li>must：必须匹配的条件，可以理解为<code>与</code></li><li>should：选择性匹配的条件，可以理解为<code>或</code></li><li>must_not：必须不匹配的条件，不参与打分，可以理解为<code>非</code></li><li>filter：必须匹配的条件，不参与打分</li></ol></li></ul><h1 id="搜索结果处理"><a href="#搜索结果处理" class="headerlink" title="搜索结果处理"></a>搜索结果处理</h1><ul><li>搜索的结果可以按照用户指定的方式去处理或展示</li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li>es默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索结果排序。可以排序的字段有：keyword类型、数值类型、地理坐标类型、日期类型等。</li></ul><h3 id="普通字段排序"><a href="#普通字段排序" class="headerlink" title="普通字段排序"></a>普通字段排序</h3><ul><li>keyword、数值、日期类型排序的语法基本一致。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="string">&quot;asc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>排序条件是一个数组，也就是可以写多个排序条件。按声明排序，当第一个条件相等时，在按照第二个条件排序，以此类推。</li></ul><blockquote><p>需求：酒店数据按照用户评价（score）降序排序，评价相同再按照价格（price）升序排序</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="string">&quot;asc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="地理坐标排序"><a href="#地理坐标排序" class="headerlink" title="地理坐标排序"></a>地理坐标排序</h3><ul><li>语法说明<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">-70</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;km&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>这个查询的含义是<ul><li>指定一个坐标，作为目标点</li><li>计算一个文档中，指定字段（必须是geo_point类型）的坐标，到目标点的距离是多少</li><li>根据距离排序</li></ul></li></ul><blockquote><p>需求：实现酒店数据按照到你位置坐标的距离升序排序</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="string">&quot;_geo_distance&quot;</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span><span class="number">39.9</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span><span class="number">116.4</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span><span class="string">&quot;km&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><ul><li>ES默认情况下只返回<code>top10</code>的数据。而如果要查询更多数据，就需要修改分页参数了。</li><li>ES中通过修改from、size参数来控制要返回的分页结果。<ul><li><code>from</code>：从第几个文档开始</li><li><code>size</code>：总共查询几个文档</li></ul></li><li>类似于mysql中的<code>limit</code>？</li></ul><h3 id="基本的分页"><a href="#基本的分页" class="headerlink" title="基本的分页"></a>基本的分页</h3><ul><li>分页的基本语法如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="深度分页问题"><a href="#深度分页问题" class="headerlink" title="深度分页问题"></a>深度分页问题</h3><ul><li>现在，我要查询990-1000条数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">990</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>这里是查询990开始的数据，也就是第991~第1000条数据</li><li><p>不过，ES内部分页时，必须先查询<code>0~1000</code>条，然后截取其中<code>990~1000</code>的这10条</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/05/6687bfa4d4c63.png"/></div></div></li><li><p>查询<code>TOP1000</code>，如果ES是单点模式，那么并无太大影响</p></li><li>但是ES将来一定是集群部署模式，例如我集群里有5个节点，我要查询<code>TOP1000</code>的数据，并不是每个节点查询<code>TOP200</code>就可以了。</li><li><p>因为节点A的<code>TOP200</code>，可能在节点B排在10000名开外了<br>-因此想获取整个集群的<code>TOP1000</code>，就必须先查询出每个节点的<code>TOP1000</code>，汇总结果后，重新排名，重新截取<code>TOP1000</code></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/05/6687c02a1bcb5.png"/></div></div></li><li><p>那么如果要查询<code>9900~10000</code>的数据呢？是不是要先查询<code>TOP10000</code>，然后汇总每个节点的<code>TOP10000</code>，重新排名呢？</p></li><li><p>当查询分页深度较大时，汇总数据过多时，会对内存和CPU产生非常大的压力，因此ES会禁止<code>form + size &gt; 10000</code>的请求</p></li><li><p>针对深度分页，ES提供而两种解决方案，官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html</a></p><ol><li>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式</li><li>scrool：原理是将排序后的文档id形成快照，保存在内存。官方已经不推荐使用</li></ol></li></ul><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul><li>分页查询的常见实现方案以及优缺点<ul><li>from + size：<ul><li>优点：支持随机翻页</li><li>缺点：深度分页问题，默认查询上限是10000(from + size)</li><li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索(百度现在支持翻页到75页，然后显示<code>提示：限于网页篇幅，部分结果未予显示。</code>)</li></ul></li><li>after search：<ul><li>优点：没有查询上限(单词查询的size不超过10000)</li><li>缺点：只能向后逐页查询，不支持随机翻页</li><li>场景：没有随机翻页需求的搜索，例如手机的向下滚动翻页</li></ul></li><li>scroll：<ul><li>优点：没有查询上限(单词查询的size不超过10000)</li><li>缺点：会有额外内存消耗，并且搜索结果是非实时的(快照保存在内存中，不可能每搜索一次都更新一次快照)</li><li>场景：海量数据的获取和迁移。从ES7.1开始不推荐，建议使用after search方案</li></ul></li></ul></li></ul><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><h3 id="高亮原理"><a href="#高亮原理" class="headerlink" title="高亮原理"></a>高亮原理</h3><ul><li>什么是高亮呢？</li><li>我们在百度搜索时，关键字会变成红色，比较醒目，这就叫高亮显示</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/05/6687c2e8936c3.png"/></div></div><ul><li>高亮显示的实现分为两步<ol><li>给文档中的所有关键字都添加一个标签，例如<code>&lt;em&gt;</code>标签</li><li>页面给<code>&lt;em&gt;</code>标签编写CSS样式</li></ol></li></ul><h3 id="实现高亮"><a href="#实现高亮" class="headerlink" title="实现高亮"></a>实现高亮</h3><ul><li>高亮的语法</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;em&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/em&gt;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>高亮是对关键词高亮，因此搜索条件必须带有关键字，而不能是范围这样的查询</li><li>默认情况下，高亮的字段，必须与搜索指定的字段一致，否则无法高亮</li><li>如果要对非搜索字段高亮，则需要添加一个属性：<code>required_field_match=false</code></li></ul></blockquote><ul><li><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海如家&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;em&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/em&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;require_field_match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>但默认情况下就是加的<em>标签，所以我们也可以省略</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海如家&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;require_field_match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><ul><li>查询的DSL是一个大的JSON对象，包含以下属性<ul><li>query：查询条件</li><li>from和size：分页条件</li><li>sort：排序条件</li><li>highlight：高亮条件<br>示例<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海如家&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">39.9</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.4</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;unit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;km&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;require_field_match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/05/6687c53a41549.png"/></div></div><h1 id="RestClient查询文档"><a href="#RestClient查询文档" class="headerlink" title="RestClient查询文档"></a>RestClient查询文档</h1><ul><li>文档的查询同样适用于RestHighLevelClient对象，基本步骤包括<ol><li>准备Request对象</li><li>准备请求参数</li><li>发起请求</li><li>解析响应</li></ol></li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>我们以match_all为例</li></ul><h3 id="发送查询请求"><a href="#发送查询请求" class="headerlink" title="发送查询请求"></a>发送查询请求</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>对应的Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">vodi <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// ...解析响应结果</span></span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码解读<ol><li>创建SearchRequest对象，指定索引库名</li><li>利用request.source()构建DSL，DSL中可以包含查询、分页、排序、高亮等</li><li>利用client.search()发送请求，得到响应</li></ol></li><li>输出结果就是我们在kibana中看到的JSON字符串</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">201</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36934&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;静安交通路40号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7天酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四川北路商业区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">36934</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.251433, 121.47522&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7天连锁酒店(上海宝山路地铁站店)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb2/t1/G1/M00/3E/40/Cii9EVkyLrKIXo1vAAHgrxo_pUcAALcKQLD688AAeDH564_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">336</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;38609&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;广灵二路126号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;速8&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四川北路商业区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">38609</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.282444, 121.479385&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;速8酒店(上海赤峰路店)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb2/t1/G2/M00/DF/96/Cii-TFkx0ImIQZeiAAITil0LM7cAALCYwKXHQ4AAhOi377_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">249</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;38665&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;兰田路38号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;速8&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;长风公园地区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">38665</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.244288, 121.422419&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;速8酒店上海中山北路兰田路店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb2/t1/G2/M00/EF/86/Cii-Tlk2mV2IMZ-_AAEucgG3dx4AALaawEjiycAAS6K083_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">226</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;38812&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;徐汇龙华西路315弄58号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7天酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;八万人体育场地区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">38812</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.174377, 121.442875&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7天连锁酒店(上海漕溪路地铁站店)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb2/t1/G2/M00/E0/0E/Cii-TlkyIr2IEWNoAAHQYv7i5CkAALD-QP2iJwAAdB6245_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">298</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;39106&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;闵行莘庄镇七莘路299号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7天酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;莘庄工业区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">39106</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.113812, 121.375869&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7天连锁酒店（上海莘庄地铁站店）&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb2/t1/G2/M00/D8/11/Cii-T1ku2zGIGR7uAAF1NYY9clwAAKxZAHO8HgAAXVN368_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">348</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">41</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;39141&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;杨浦国权路315号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7天酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;江湾、五角场商业区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">39141</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.290057, 121.508804&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7天连锁酒店(上海五角场复旦同济大学店)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb2/t1/G2/M00/C7/E3/Cii-T1knFXCIJzNYAAFB8-uFNAEAAKYkQPcw1IAAUIL012_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">349</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;45845&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;虹桥路100号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;万怡&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;徐家汇地区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">45845</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.192714, 121.434717&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海西藏大厦万怡酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb3/s1/2n9c/48GNb9GZpJDCejVAcQHYWwYyU8T_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">589</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;45870&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新元南路555号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;豪生&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;滴水湖临港地区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">45870</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;30.871729, 121.81959&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海临港豪生大酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb3/s1/2n9c/2F5HoQvBgypoDUE46752ppnQaTqs_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">896</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四星级&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;46829&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;恒丰路338号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;万怡&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海火车站地区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">46829</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.242977, 121.455864&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海浦西万怡酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb3/s1/2n9c/x87VCoyaR8cTuYFZmKHe8VC6Wk1_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">726</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">46</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;47066&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;施新路958号&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华美达&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浦东机场核心区&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47066</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.147989, 121.759199&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海浦东东站华美达酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb3/s1/2n9c/2pNujAVaQbXACzkHp8bQMm6zqwhp_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">408</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">46</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;四钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>这里的关键API有两个<ul><li>一个是request.source()，其中包含了<code>query</code>、<code>order</code>、<code>from</code>、<code>size</code>、<code>highlight</code>等所有功能</li><li>另一个是QueryBuilders，其中包含了<code>match</code>、<code>term</code>、<code>function_score</code>、<code>bool</code>等各种查询<br>解析响应</li></ul></li></ul><h3 id="解析响应"><a href="#解析响应" class="headerlink" title="解析响应"></a>解析响应</h3><ul><li>响应结果的解析</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">vodi <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数 对应 &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;</span></span><br><span class="line">    request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="comment">// 4.1 查询的总条数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜索到&quot;</span>+ total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.2 查询的结果数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 4.3 得到source</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        <span class="comment">// 4.4 打印</span></span><br><span class="line">        System.out.println(hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/06/6688e9b65c9cb.png"/></div></div><ul><li>ES返回的结果是一个JSON字符串，结构包含：<ul><li><code>hits</code>：命中的结果<ul><li><code>total</code>：总条数，其中的value是具体的总条数值</li><li><code>max_score</code>：所有结果中得分最高的文档的相关性算分</li><li><code>hits</code>：搜索结果的文档数组，其中的每个文档都是一个json对象<ul><li><code>_source</code>：文档中的原始数据，也是json对象</li></ul></li></ul></li></ul></li><li>因此，我们解析响应结果，就是逐层解析JSON字符串，流程如下：<ul><li><code>SearchHits</code>：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果<ul><li><code>SearchHits.getTotalHits().value</code>：获取总条数信息</li><li><code>SearchHits.getHits()</code>：获取SearchHit数组，也就是文档数组<ul><li><code>SearchHit.getSourceAsString()</code>：获取文档结果中的_source，也就是原始的json文档数据</li></ul></li></ul></li></ul></li></ul><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><ul><li>查询的基本步骤是<ol><li>创建SearchRequest对象</li><li>准备Request.source()，也就是DSL<ul><li>QueryBuilders来构建查询条件</li><li>传入Request.source()的query()方法中作为参数</li></ul></li><li>发送请求，得到结果</li><li>解析结果(参考JSON结果，从外到内，逐层解析)</li></ol></li></ul><h2 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h2><ul><li>全文检索的match和multi_match查询与match_all的API基本一致。</li><li>差别是查询条件，也就是query的那部分</li></ul><div class="tabs" id="match查询1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="match查询1-1">match_all</button><button type="button" class="tab " data-href="match查询1-2">match</button><button type="button" class="tab " data-href="match查询1-3">multi_match</button></ul><div class="tab-contents"><div class="tab-item-content active" id="match查询1-1"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="match查询1-2"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="match查询1-3"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;brand&quot;</span><span class="punctuation">,</span> <span class="string">&quot;name&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><ul><li>因此，Java代码上的差异主要是request.source.query()中的参数了。同样是利用QueryBuilders提供的方法</li></ul><div class="tabs" id="match查询"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="match查询-1">match</button><button type="button" class="tab " data-href="match查询-2">multiMatch</button></ul><div class="tab-contents"><div class="tab-item-content active" id="match查询-1"><ul><li>单字段查询：<code>QueryBuilders.matchQuery(&quot;all&quot;,&quot;北京&quot;)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>,<span class="string">&quot;北京&quot;</span>));</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    handelResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></div><div class="tab-item-content" id="match查询-2"><ul><li>多字段查询：<code>QueryBuilders.multiMatchQuery(&quot;如家&quot;,&quot;brand&quot;,&quot;name&quot;)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testMultiMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    request.source().query(QueryBuilders.multiMatchQuery(<span class="string">&quot;如家&quot;</span>,<span class="string">&quot;brand&quot;</span>,<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    handelResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><ul><li>解析响应的代码都是相同的，所以这里抽取成了一个名为handleResponse的方法，使用IDEA的快捷键Ctrl + Alt + M可以快速抽取 (注意关闭网抑云的全局热键，不然会冲突)</li></ul><h2 id="精确查询-1"><a href="#精确查询-1" class="headerlink" title="精确查询"></a>精确查询</h2><ul><li>精确查询主要是这两个<ol><li>term：词条精确匹配</li><li>range：范围查询</li></ol></li><li>与之前的查询相比，差异同样在查询条件，其他的都一样<div class="tabs" id="精确查询"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="精确查询-1">term</button><button type="button" class="tab " data-href="精确查询-2">range</button></ul><div class="tab-contents"><div class="tab-item-content active" id="精确查询-1"><ul><li>精确匹配在北京的酒店：<code>QueryBuilders.termQuery(&quot;city&quot;,&quot;北京&quot;)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testTermMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    request.source().query(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>,<span class="string">&quot;北京&quot;</span>));</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    handelResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></div><div class="tab-item-content" id="精确查询-2"><ul><li>范围查询价格在1000~2000的酒店：<code>QueryBuilders.rangeQuery(&quot;price&quot;).gt(1000).lt(2000)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRangeMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    request.source().query(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gt(<span class="number">1000</span>).lt(<span class="number">2000</span>));</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    handelResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li></ul><h2 id="布尔查询-1"><a href="#布尔查询-1" class="headerlink" title="布尔查询"></a>布尔查询</h2><ul><li>布尔查询是用must、must_not、filter等方式组合其他查询</li><li>例如：查询在<code>上海</code>的<code>华美达</code>或者<code>皇冠假日酒店</code>，用户评分在<code>45</code>分以上，价格在<code>500~2000</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testBoolMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 2.1 添加must条件</span></span><br><span class="line">    boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;上海&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.2 添加should条件 (should有点问题，但是貌似可以用must配合termsQuery来达到should的效果)</span></span><br><span class="line">    boolQuery.must(QueryBuilders.termsQuery(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;华美达&quot;</span>, <span class="string">&quot;皇冠假日&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.3 添加mustNot条件</span></span><br><span class="line">    boolQuery.mustNot(QueryBuilders.rangeQuery(<span class="string">&quot;score&quot;</span>).lt(<span class="number">45</span>));</span><br><span class="line">    <span class="comment">// 2.4 添加filter条件</span></span><br><span class="line">    boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gt(<span class="number">500</span>).lt(<span class="number">2000</span>));</span><br><span class="line">    request.source().query(boolQuery);</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    handelResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>破案了，Java代码的解决方案就是我这样的</p></blockquote><h2 id="排序、分页"><a href="#排序、分页" class="headerlink" title="排序、分页"></a>排序、分页</h2><ul><li>搜索结果的排序和分页是与query同级的参数，因此同样是使用request.source()来设置</li><li>示例代码如下，ES的API都支持链式编程还挺舒服的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSortMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    request.source().query(QueryBuilders.matchAllQuery())</span><br><span class="line">            .sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC)</span><br><span class="line">            .from(<span class="number">0</span>)</span><br><span class="line">            .size(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    handelResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="高亮-1"><a href="#高亮-1" class="headerlink" title="高亮"></a>高亮</h2><ul><li>高亮的代码与之前的代码差异较大，有两点<ol><li>查询的DSL，其中除了查询条件，还需要添加高亮条件，同样是与query同级</li><li>结果解析，结果除了要解析_source文档，还需要解析高亮结果</li></ol></li></ul><h3 id="高亮请求构建"><a href="#高亮请求构建" class="headerlink" title="高亮请求构建"></a>高亮请求构建</h3><ul><li>高亮请求的API如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request.source().query(QueryBuilders.matchAllQuery())</span><br><span class="line">        .highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>()</span><br><span class="line">                .field(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                .requireFieldMatch(<span class="literal">false</span>));</span><br></pre></td></tr></table></figure><ul><li>对应的DSL语句</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;require_field_match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>上述代码中省略了查询条件部分，但是千万别忘了：高亮查询必须使用全文检索查询，并且要有搜索关键字，将来才可以对关键字高亮</li><li>示例代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHighLightMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>,<span class="string">&quot;如家&quot;</span>))</span><br><span class="line">            .highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>()</span><br><span class="line">                    .field(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                    .requireFieldMatch(<span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    handelResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高亮结果解析"><a href="#高亮结果解析" class="headerlink" title="高亮结果解析"></a>高亮结果解析</h3><ul><li>高亮的结果与查询的文档结果默认是分离的，并不是在一起</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">102</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1765008760&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;西直门北大街49号&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;brand&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;business&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;西直门/北京展览馆地区&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">1765008760</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;location&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;39.945106, 116.353827&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;如家酒店(北京西直门北京北站店)&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pic&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb3/s1/2n9c/4CLwbCE9346jYn7nFsJTQXuBExTJ_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">356</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;starName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;二钻&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;highlight&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;&lt;em&gt;如家&lt;/em&gt;酒店(北京西直门北京北站店)&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">6.376497864377032</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">356</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>因此解析高亮的代码需要额外处理</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/06/6688f1015518f.png"/></div></div><ul><li>代码解读：<ul><li>第一步：从结果中获取source。hit.getSourceAsString()，这部分是非高亮结果，json字符串。还需要反序列为HotelDoc对象</li><li>第二步：获取高亮结果。hit.getHighlightFields()，返回值是一个Map，key是高亮字段名称，值是HighlightField对象，代表高亮值</li><li>第三步：从map中根据高亮字段名称，获取高亮字段值对象HighlightField</li><li>第四步：从HighlightField中获取Fragments，并且转为字符串。这部分就是真正的高亮字符串了</li><li>第五步：用高亮的结果替换HotelDoc中的非高亮结果</li></ul></li><li>完整代码如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHighLightMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备Request对象，对应 GET /hotel/_search</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 组织DSL参数</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>))</span><br><span class="line">            .highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>()</span><br><span class="line">                    .field(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                    .requireFieldMatch(<span class="literal">false</span>));</span><br><span class="line">    <span class="comment">// 3. 发送请求，得到响应结果</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析响应</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="type">TotalHits</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits();</span><br><span class="line">    System.out.println(<span class="string">&quot;共查询到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 获取source</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        <span class="comment">// 获取高亮</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        <span class="comment">// 健壮性判断</span></span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(highlightFields)) &#123;</span><br><span class="line">            <span class="comment">// 获取高亮字段结果</span></span><br><span class="line">            <span class="type">HighlightField</span> <span class="variable">highlightField</span> <span class="operator">=</span> highlightFields.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">// 健壮性判断</span></span><br><span class="line">            <span class="keyword">if</span> (highlightField != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 取出高亮结果数组的第一个元素，就是酒店名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> highlightField.getFragments()[<span class="number">0</span>].string();</span><br><span class="line">                hotelDoc.setName(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="黑马旅游案例"><a href="#黑马旅游案例" class="headerlink" title="黑马旅游案例"></a>黑马旅游案例</h1><ul><li><p>这里只要实现四部分功能</p><ol><li>酒店搜索和分页</li><li>酒店结果过滤</li><li>我周边的酒店</li><li>酒店竞价排名</li></ol></li><li><p>启动黑马提供好的hotel-demo项目，默认端口是8089，访问<a href="http://localhost:8089/，">http://localhost:8089/，</a> 就能看到项目页面了</p></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/06/6688fbaccde8d.png"/></div></div><h2 id="酒店搜索和分页"><a href="#酒店搜索和分页" class="headerlink" title="酒店搜索和分页"></a>酒店搜索和分页</h2><ul><li>需求：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页</li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>在项目首页，有一个搜索框，还有分页按钮</li><li>搜索框输入<code>上海</code>，页面翻到第2页，点击搜索，查看控制台发出的请求</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请求网址: http:<span class="regexp">//</span>localhost:<span class="number">8089</span><span class="regexp">/hotel/</span>list</span><br><span class="line">请求方法: POST</span><br></pre></td></tr></table></figure><ul><li>请求参数</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>key<span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span> page<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> size<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> sortBy<span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>由此可得<ul><li>请求方式：POST</li><li>请求路径：/hotel/list</li><li>请求参数：JSON对象，包含4个端<ol><li><code>key</code>：搜索关键字</li><li><code>page</code>：页码</li><li><code>size</code>：每页大小</li><li><code>sortBy</code>：排序，目前暂不实现</li></ol></li><li>返回值：分页查询，需要发挥分页结果PageResult，包含两个属性<ol><li><code>total</code>：总条数</li><li><code>List&lt;HotelDoc&gt;</code>：当页的数据</li></ol></li></ul></li><li>因此，我们实现业务的流程如下<ol><li>定义实体类，用于接收请求参数的对象和返回响应结果的对象</li><li>编写controller，接收页面的请求</li><li>编写业务实现，利用RestHighLevelClient实现搜索、分页</li></ol></li></ul><h3 id="定义实现类"><a href="#定义实现类" class="headerlink" title="定义实现类"></a>定义实现类</h3><ul><li>实体类有两个，一个是前端的请求参数实体，另一个是服务端应该返回的响应结果实体</li></ul><div class="tabs" id="黑马旅游案例酒店搜索和分页定义实现类"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="黑马旅游案例酒店搜索和分页定义实现类-1">RequestParams</button><button type="button" class="tab " data-href="黑马旅游案例酒店搜索和分页定义实现类-2">PageResult</button></ul><div class="tab-contents"><div class="tab-item-content active" id="黑马旅游案例酒店搜索和分页定义实现类-1"><ul><li>请求参数<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>key<span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span> page<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> size<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> sortBy<span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>在pojo包下定义一个实体类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></div><div class="tab-item-content" id="黑马旅游案例酒店搜索和分页定义实现类-2"><ul><li>分页查询，需要返回分页结果PageResult<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;HotelDoc&gt; hotels;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="定义controller"><a href="#定义controller" class="headerlink" title="定义controller"></a>定义controller</h3><ul><li>定义一个HotelController，声明查询接口，满足以下要求<ol><li>请求方式：POST</li><li>请求路径：/hotel/list</li><li>请求参数：RequestParams对象</li><li>返回值：PageResult</li></ol></li><li>在web.controller包下新建HotelController<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HotelService hotelService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.search(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现搜索业务"><a href="#实现搜索业务" class="headerlink" title="实现搜索业务"></a>实现搜索业务</h3><ul><li>我们在controller中调用了IHotelService，那我们现在在IHotelService中定义方法，并实现业务逻辑</li><li>定义方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span>;</span><br></pre></td></tr></table></figure></li><li>实现搜索逻辑，我们需要实现将RestHighLevelClient注册到Spring中作为一个Bean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.blog.hotel.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HotelDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">client</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.128.130:9200&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现逻辑搜索<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HotelMapper, Hotel&gt; <span class="keyword">implements</span> <span class="title class_">IHotelService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 准备request对象</span></span><br><span class="line">            <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 准备DSL</span></span><br><span class="line">            <span class="comment">// 2.1 获取搜索关键字</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">            <span class="comment">// 2.2 健壮性判断</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(key)) &#123;</span><br><span class="line">                <span class="comment">// 未输入搜索条件，则查询全部</span></span><br><span class="line">                request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.3 分页</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">            request.source()</span><br><span class="line">                    .from((page - <span class="number">1</span>) * size)</span><br><span class="line">                    .size(size);</span><br><span class="line">            <span class="comment">// 3. 发送请求</span></span><br><span class="line">            <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="comment">// 4. 结果解析</span></span><br><span class="line">            <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果解析依旧是封装为了一个函数</span></span><br><span class="line">    <span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取总条数</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        <span class="comment">// 获取文档数组</span></span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        ArrayList&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">// 获取每条文档</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            <span class="comment">// 反序列化为对象</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            <span class="comment">// 放入集合</span></span><br><span class="line">            hotels.add(hotelDoc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="酒店结果过滤"><a href="#酒店结果过滤" class="headerlink" title="酒店结果过滤"></a>酒店结果过滤</h2><ul><li>需求：添加品牌、城市、星级、价格等过滤功能</li></ul><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>在页面的搜索框下，会有一些过滤项</li><li>我们选中过滤项，查看传递的参数</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">brand<span class="punctuation">:</span> <span class="string">&quot;7天酒店&quot;</span></span><br><span class="line">city<span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span></span><br><span class="line">key<span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span></span><br><span class="line">maxPrice<span class="punctuation">:</span> <span class="number">999999</span></span><br><span class="line">minPrice<span class="punctuation">:</span> <span class="number">1500</span></span><br><span class="line">page<span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">size<span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">sortBy<span class="punctuation">:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">starName<span class="punctuation">:</span> <span class="string">&quot;五钻&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>包含的过滤条件有<ul><li>brand：品牌</li><li>city：城市</li><li>maxPrice~minPrice：价格范围</li><li>starName：星级</li></ul></li><li>那我们现在就需要修改我们的RequestParams，接收上述参数，并且还需要修改我们的业务逻辑，添加一些过滤条件</li></ul><h3 id="修改实体类"><a href="#修改实体类" class="headerlink" title="修改实体类"></a>修改实体类</h3><ul><li>在RequestParams中添加额外的参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="comment">// 额外参数</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer minPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改搜索逻辑"><a href="#修改搜索逻辑" class="headerlink" title="修改搜索逻辑"></a>修改搜索逻辑</h3><ul><li>这里就涉及到了符合查询，所以就需要用到布尔查询<ul><li>关键字放到must中，参与算分</li><li>其余过滤条件放到filter中，不参与算分</li></ul></li><li>由于过滤条件比较复杂，所以这里先将其封装为一个名为<code>buildBasicQuery</code>函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line">        <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">        request.source()</span><br><span class="line">                .from((page - <span class="number">1</span>) * size)</span><br><span class="line">                .size(size);</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>buildBasicQuery函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(key)) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 品牌条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 城市条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 星级条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 价格条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getMaxPrice() != <span class="literal">null</span> &amp;&amp; params.getMinPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders</span><br><span class="line">                .rangeQuery(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">                .gt(params.getMinPrice())</span><br><span class="line">                .lt(params.getMaxPrice()));</span><br><span class="line">    &#125;</span><br><span class="line">    request.source().query(boolQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="我周边的酒店"><a href="#我周边的酒店" class="headerlink" title="我周边的酒店"></a>我周边的酒店</h2><ul><li>需求：我附近的酒店</li></ul><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li><p>在酒店列表页的右侧，有一个小地图，点击地图定位按钮，会找到你所在位置，并且前端会发起查询请求，将你的坐标发送到服务器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">key<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">page<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">size<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">sortBy<span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">location<span class="punctuation">:</span> <span class="string">&quot;39.882165, 116.531421&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>那我们还需要在RequestParams类中添加一个新字段，用户获取location坐标</p></li><li>然后修改搜索逻辑，如果location有值，则添加根据geo_distance排序的功能</li></ul><h3 id="修改实体类-1"><a href="#修改实体类-1" class="headerlink" title="修改实体类"></a>修改实体类</h3><ul><li>添加location字段<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer minPrice;</span><br><span class="line">    <span class="comment">// 新增location字段</span></span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="排序API"><a href="#排序API" class="headerlink" title="排序API"></a>排序API</h3><ul><li>基本语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request.source().sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC)</span><br><span class="line">        .sort(SortBuilders.geoDistanceSort(<span class="string">&quot;location&quot;</span>,<span class="keyword">new</span> <span class="title class_">GeoPoint</span>(<span class="string">&quot;39.9, 131.6&quot;</span>))</span><br><span class="line">                .order(SortOrder.ASC)</span><br><span class="line">                .unit(DistanceUnit.KILOMETERS));</span><br></pre></td></tr></table></figure><h3 id="添加距离排序"><a href="#添加距离排序" class="headerlink" title="添加距离排序"></a>添加距离排序</h3><ul><li>修改search方法，添加距离排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> params.getLocation();</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.isEmpty(location)) &#123;</span><br><span class="line">    request.source()</span><br><span class="line">            .sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC)</span><br><span class="line">            .sort(SortBuilders</span><br><span class="line">                    .geoDistanceSort(<span class="string">&quot;location&quot;</span>, <span class="keyword">new</span> <span class="title class_">GeoPoint</span>(location))</span><br><span class="line">                    .order(SortOrder.ASC)</span><br><span class="line">                    .unit(DistanceUnit.KILOMETERS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line">        <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">        request.source()</span><br><span class="line">                .from((page - <span class="number">1</span>) * size)</span><br><span class="line">                .size(size);</span><br><span class="line">        <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> params.getLocation();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(location)) &#123;</span><br><span class="line">            request.source()</span><br><span class="line">                    .sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC)</span><br><span class="line">                    .sort(SortBuilders</span><br><span class="line">                            .geoDistanceSort(<span class="string">&quot;location&quot;</span>, <span class="keyword">new</span> <span class="title class_">GeoPoint</span>(location))</span><br><span class="line">                            .order(SortOrder.ASC)</span><br><span class="line">                            .unit(DistanceUnit.KILOMETERS));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="距离排序显示"><a href="#距离排序显示" class="headerlink" title="距离排序显示"></a>距离排序显示</h3><ul><li>重启服务，测试酒店功能，但是现在没有显示酒店距离我有多远</li><li>排序完成后，页面还需要获取我到附近酒店的具体距离值</li><li>因此，在解析结果的时候，我们还需要获取sort部分，然后放到响应结果中</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/06/66890646c7377.png"/></div></div><ul><li>修改HotelDoc类，添加排序距离字段，用于页面显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="comment">// 排序时的距离值</span></span><br><span class="line">    <span class="keyword">private</span> Object distance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改handleResponse方法，为HotelDoc对象赋sort值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    ArrayList&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        <span class="comment">// 获取排序值</span></span><br><span class="line">        Object[] sortValues = hit.getSortValues();</span><br><span class="line">        <span class="keyword">if</span> (sortValues.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            hotelDoc.setDistance(sortValues[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        hotels.add(hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启服务，这下就能成功显示距离了</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/06/6689069bd4d8f.png"/></div></div><h2 id="酒店竞价排名"><a href="#酒店竞价排名" class="headerlink" title="酒店竞价排名"></a>酒店竞价排名</h2><ul><li>需求：让指定的酒店在搜索结果中排名置顶(给一个超级大的算分)</li></ul><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>如何才能让指定的酒店排名置顶呢？</li><li>上面学的function_score查询可以影响算分，算分高了，自然排名也就高了。而function_score包含3个要素<ol><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算<code>function score</code></li><li>加权方式：<code>function score</code>和<code>query score</code>如何运算</li></ol></li><li>这里的需求是：让指定酒店排名靠前。因此我们需要给这些酒店加一个标记，这样在过滤条件中就可以根据这个标记来判断，是否要提高算分</li><li>例如我们给酒店添加一个<code>boolean</code>类型的<code>isAD</code>字段<ul><li>true：是广告</li><li>false：不是广告</li></ul></li><li>这样function_score的3个要素就很好确定了<ul><li>过滤条件：判断idAD是否为true</li><li>算分函数：这里用最简单暴力的weight，固定权值</li><li>加权方式：可以使用默认的相乘，大大提高算分</li></ul></li><li>因此，提高排名的实现步骤包括<ol><li>修改HotelDoc类，添加isAD字段</li><li>修改文档，随便挑几个酒店添加isAD字段为true</li><li>修改search方法，添加function score功能，给isAD为true的酒店加权重</li></ol></li></ul><h3 id="修改HotelDoc类"><a href="#修改HotelDoc类" class="headerlink" title="修改HotelDoc类"></a>修改HotelDoc类</h3><ul><li>添加isAD字段<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="keyword">private</span> Object distance;</span><br><span class="line">    <span class="comment">// 是否为广告</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isAD;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加广告标记"><a href="#添加广告标记" class="headerlink" title="添加广告标记"></a>添加广告标记</h3><ul><li>我们随便挑几个酒店，增加isAD字段</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /hotel/_update/<span class="number">2056126831</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">1989806195</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">2056105938</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="增加算分函数查询"><a href="#增加算分函数查询" class="headerlink" title="增加算分函数查询"></a>增加算分函数查询</h3><ul><li>function_score查询结构如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;all&quot;: &quot;外滩&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;city&quot;: &quot;上海&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;weight&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;multiply&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算分函数对应的JavaAPI如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQuery</span> <span class="operator">=</span></span><br><span class="line">        QueryBuilders.functionScoreQuery(</span><br><span class="line">                QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;外滩&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                                QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, <span class="string">&quot;如家&quot;</span>),</span><br><span class="line">                                ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>))&#125;);</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/06/6689379cd0ada.png"/></div></div><ul><li>我们可以将之前写布尔查询的boolQuery作为原始查询条件，放到function_score查询中，接下来就是添加过滤条件、算分函数、加权模式了。所以可以继续沿用我们的buildBasicQuery方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 构建BoolQuery</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(key)) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 品牌条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 城市条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 星级条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 价格条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getMaxPrice() != <span class="literal">null</span> &amp;&amp; params.getMinPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders</span><br><span class="line">                .rangeQuery(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">                .gt(params.getMinPrice())</span><br><span class="line">                .lt(params.getMaxPrice()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.算分控制</span></span><br><span class="line">    <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQuery</span> <span class="operator">=</span></span><br><span class="line">            QueryBuilders.functionScoreQuery(</span><br><span class="line">                    boolQuery, <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                                    QueryBuilders.termsQuery(<span class="string">&quot;isAD&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">                                    ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>))&#125;);</span><br><span class="line">    request.source().query(functionScoreQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启服务，可以看到竞价排名已经生效，排名第一的酒店左上角有广告图标</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/06/668937d099ac8.png"/></div></div><h1 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h1><ul><li>聚合(aggregations)可以让我们极其方便的实现对数据的统计、分析、运算。例如<ol><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ol></li><li>实现这些统计功能的比数据库的SQL要方便很多，而且查询速度非常快，可以实现近实时搜索的效果</li></ul><h2 id="聚合的种类"><a href="#聚合的种类" class="headerlink" title="聚合的种类"></a>聚合的种类</h2><ul><li>常见的聚合有三类<ol><li><code>桶(Bucket)聚合</code>：用来对文档分组<ul><li>TermAggregation：按照文档字段值分组，例如：按照<code>品牌名称</code>、<code>国家</code>分组</li><li>DateHistogram：按照日期阶梯分组，例如：<code>一周</code>为一组，或者<code>一月</code>为一组</li></ul></li><li><code>度量(Metric)聚合</code>：用于计算一些值，例如：<code>最大值</code>、<code>最小值</code>、<code>平均值</code>等<ul><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求max、min、avg、sum等</li></ul></li><li><code>管道(pipeline)聚合</code>：以其他聚合的结果为基础做聚合</li></ol></li></ul><blockquote><p>注意：参加聚合的字段必须是keyword、日期、数值、布尔类型</p></blockquote><h2 id="DSL实现聚合"><a href="#DSL实现聚合" class="headerlink" title="DSL实现聚合"></a>DSL实现聚合</h2><ul><li>现在，我们要统计所有数据中的酒店品牌有几种，其实就是按照品牌对数据分组。此时可以根据酒店品牌的名称做聚合，也就是Bucket聚合</li></ul><h3 id="Bucket聚合语法"><a href="#Bucket聚合语法" class="headerlink" title="Bucket聚合语法"></a>Bucket聚合语法</h3><ul><li><p>基本语法如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                 <span class="comment">// 定义聚合</span></span><br><span class="line">    <span class="attr">&quot;NAME&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>               <span class="comment">// 给聚合起个名字</span></span><br><span class="line">      <span class="attr">&quot;AGG_TYPE&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>        <span class="comment">// 聚合的类型</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>                <span class="comment">// 设置size为0，结果中不包含文档，只包含聚合结果</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                 <span class="comment">// 定义聚合</span></span><br><span class="line">    <span class="attr">&quot;bucketAggName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>      <span class="comment">// 给聚合起个名字</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>            <span class="comment">// 聚合的类型，这里按照品牌值聚合，所以选择terms</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span>   <span class="comment">// 参与聚合的字段</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span>           <span class="comment">// 希望获取的聚合结果数量，由于品牌值可能很多，这里只获取5条看看效果</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a6f4891f87.png"/></div></div><h3 id="聚合结果排序"><a href="#聚合结果排序" class="headerlink" title="聚合结果排序"></a>聚合结果排序</h3><ul><li>默认情况下，Bucket聚合会统计Bucket内的文档数量，记为count，并且按照count降序排序</li><li>我们可以指定order属性，自定义聚合的排序方式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bucketAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a7109830b5.png"/></div></div><h3 id="限定聚合范围"><a href="#限定聚合范围" class="headerlink" title="限定聚合范围"></a>限定聚合范围</h3><ul><li>默认情况下，Bucket聚合是对索引库的所有文档做聚合。</li><li>但真实场景下，用户会输入搜索条件</li><li>因此聚合必须是对搜索结果的聚合，那么聚合就必须添加限定条件</li><li>我们可以限定要聚合的文档范围，只需要添加query条件即可</li><li>这里假设用户选择了1000元以上的酒店</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">1000</span> <span class="comment">// 只对1000元以上的文档做聚合</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bucketAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a719550c4c.png"/></div></div><ul><li>从结果中看到，这次得到的酒店数量明显就减少了</li></ul><h3 id="Metric聚合语法"><a href="#Metric聚合语法" class="headerlink" title="Metric聚合语法"></a>Metric聚合语法</h3><ul><li>现在我们需要对桶内酒店做运算，获取每个品牌的用户频分的min、max、avg等值</li><li>那么就需要用到Metric聚合了，例如stat聚合，就尅获取min、max、avg等值</li><li>语法如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bucketAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>         <span class="comment">// 是bucketAgg聚合的子聚合，也就是分组后对每组分别进行计算</span></span><br><span class="line">        <span class="attr">&quot;scoreAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>   <span class="comment">// 子聚合名称</span></span><br><span class="line">          <span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    <span class="comment">// 聚合类型，stats可以计算min、max、avg等</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;score&quot;</span>    <span class="comment">// 聚合字段，这里计算用户评分的min、max、avg</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a7250778e6.png"/></div></div><ul><li>此外，我们还可以给聚合结果做排序，例如按照每个桶的酒店平均分做排序</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bucketAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;scoreAgg.avg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span>    <span class="comment">// 对scoreAgg.avg做降序排序</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;scoreAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;score&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a729878be3.png"/></div></div><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><ul><li>aggs代表聚合，与query统计，此时query的作用是？<ul><li>限定聚合的文档范围</li></ul></li><li>聚合必须的三要素<ol><li>聚合名称</li><li>聚合类型</li><li>聚合字段</li></ol></li><li>聚合可配置的属性有<ol><li>size：指定聚合结果数量</li><li>order：指定聚合结果排序方式</li><li>field：指定聚合字段</li></ol></li></ul><h2 id="RestAPI实现聚合"><a href="#RestAPI实现聚合" class="headerlink" title="RestAPI实现聚合"></a>RestAPI实现聚合</h2><h3 id="API语法"><a href="#API语法" class="headerlink" title="API语法"></a>API语法</h3><ul><li>聚合条件与query统计，因此需要使用request.source()来指定聚合条件</li><li>聚合条件的语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request.source().size(<span class="number">0</span>);</span><br><span class="line">request.source().aggregation(</span><br><span class="line">        AggregationBuilders</span><br><span class="line">                .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                .size(<span class="number">20</span>));</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a746143f3c.png"/></div></div><ul><li>聚合的结果解析也与之前的查询结果解析不同，API比较特殊，但同样也是JSON逐层解析</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line"><span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line"><span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">    System.out.println(brandName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a74889bca1.png"/></div></div><ul><li>完整代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">brandAggregationTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 准备request对象</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 准备DSL</span></span><br><span class="line">    <span class="comment">// 2.1 设置size</span></span><br><span class="line">    request.source().size(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 2.2 聚合</span></span><br><span class="line">    request.source().aggregation(</span><br><span class="line">            AggregationBuilders</span><br><span class="line">                    .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                    .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                    .size(<span class="number">20</span>));</span><br><span class="line">    <span class="comment">// 3. 发出请求</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4. 解析结果</span></span><br><span class="line">    <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">    <span class="comment">// 4.1 根据聚合名称获取聚合结果</span></span><br><span class="line">    <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.2 获取桶</span></span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();</span><br><span class="line">    <span class="comment">// 4.3 遍历桶内元素</span></span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">        <span class="comment">// 4.4 获取key，也就是品牌信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">        System.out.println(brandName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><blockquote><p>需求：搜索页面的品牌、城市等信息，并不是在页面上直接写死的，而是通过聚合索引库中的酒店数据来动态获得的</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a775a371fc.png"/></div></div><ul><li>目前，页面的城市列表、星级列表、品牌列表都是写死的，并不会随着搜索结果的变化而变化。但是用户搜索条件改变时，搜索结果也会跟着变化</li><li>例如：用户在搜索框输入<code>王府井</code>，那搜索的酒店肯定就只能在<code>北京王府井</code>附近，因此，城市只能是北京，此时城市列表中就不应该显示上海、深圳、杭州了</li><li>也就是说，搜索结果中包含哪些城市，页面中就应该列出哪些城市；搜索结果中包含哪些品牌，页面就应该列出哪些品牌</li><li>那么如何得知搜索结果中包含了哪些品牌？如何得知搜索结果中包含了哪些城市？</li><li>使用聚合功能，利用Bucket聚合，对搜索结果中的文档，基于品牌分组、城市分组、星级分组等，就能得知包含哪些品牌、哪些城市了。</li><li>因为是对搜索结果聚合，因此聚合是<code>限定范围的聚合</code>，且限定条件与搜索文档一致</li><li>那么之前写的查询代码就可以直接用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 构建BoolQuery</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(key)) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 品牌条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 城市条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 星级条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 价格条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getMaxPrice() != <span class="literal">null</span> &amp;&amp; params.getMinPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders</span><br><span class="line">                .rangeQuery(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">                .gt(params.getMinPrice())</span><br><span class="line">                .lt(params.getMaxPrice()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.算分控制</span></span><br><span class="line">    <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQuery</span> <span class="operator">=</span></span><br><span class="line">            QueryBuilders.functionScoreQuery(</span><br><span class="line">                    boolQuery, <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                                    QueryBuilders.termsQuery(<span class="string">&quot;isAD&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">                                    ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>))&#125;);</span><br><span class="line">    request.source().query(functionScoreQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h3><ul><li>查看浏览器，前端其实已经发出了请求</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请求网址: http:<span class="comment">//localhost:8089/hotel/filters</span></span><br><span class="line">请求方法: POST</span><br><span class="line">请求载荷：&#123;<span class="built_in">key</span>: <span class="string">&quot;王府井&quot;</span>, page: <span class="number">1</span>, <span class="built_in">size</span>: <span class="number">5</span>, sortBy: <span class="string">&quot;default&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>请求参数与搜索文档的参数完全一致，其返回值类型就是页面要展示的最终结果</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a77f8e37ce.png"/></div></div><ul><li>在web包下的HotelController中添加一个方法，遵循下面的要求<ol><li>请求方式：<code>POST</code></li><li>请求路径：<code>/hotel/filters</code></li><li>请求参数：<code>RequestParams</code>，与搜索文档一致</li><li>返回值类型：<code>Map(String, List&lt;String&gt;)</code></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/filters&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">getFilters</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hotelService.getFilters(params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在IHotelService中定义方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">getFilters</span><span class="params">(RequestParams params)</span>;</span><br></pre></td></tr></table></figure><ul><li>在HotelService中实现该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">getFilters</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request对象</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line">        <span class="comment">// 2.1 查询</span></span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line">        <span class="comment">// 2.2 设置size为0，不查询文档数据</span></span><br><span class="line">        request.source().size(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 2.3 聚合</span></span><br><span class="line">        request.source().aggregation(</span><br><span class="line">                AggregationBuilders</span><br><span class="line">                        .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                        .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                        .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">        request.source().aggregation(</span><br><span class="line">                AggregationBuilders</span><br><span class="line">                        .terms(<span class="string">&quot;cityAgg&quot;</span>)</span><br><span class="line">                        .field(<span class="string">&quot;city&quot;</span>)</span><br><span class="line">                        .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">        request.source().aggregation(</span><br><span class="line">                AggregationBuilders</span><br><span class="line">                        .terms(<span class="string">&quot;starAgg&quot;</span>)</span><br><span class="line">                        .field(<span class="string">&quot;starName&quot;</span>)</span><br><span class="line">                        .size(<span class="number">100</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 3. 发出请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">        <span class="comment">// 4. 解析结果</span></span><br><span class="line">        <span class="comment">// 4.1 解析品牌结果</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;brandAgg&quot;</span>);</span><br><span class="line">        ArrayList&lt;String&gt; brandList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; brandBuckets = brandTerms.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : brandBuckets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            brandList.add(brandName);</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">&quot;brand&quot;</span>, brandList);</span><br><span class="line">        <span class="comment">// 4.2 解析城市结果</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">cityTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;cityAgg&quot;</span>);</span><br><span class="line">        ArrayList&lt;String&gt; cityList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; cityBuckets = cityTerms.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket cityBucket : cityBuckets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cityName</span> <span class="operator">=</span> cityBucket.getKeyAsString();</span><br><span class="line">            cityList.add(cityName);</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">&quot;city&quot;</span>, cityList);</span><br><span class="line">        <span class="comment">// 4.3 解析星级结果</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">starTerms</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;starAgg&quot;</span>);</span><br><span class="line">        ArrayList&lt;String&gt; starList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; starBuckets = starTerms.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket starBucket : starBuckets) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">starName</span> <span class="operator">=</span> starBucket.getKeyAsString();</span><br><span class="line">            starList.add(starName);</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">&quot;starName&quot;</span>, starList);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这下就是动态获取的品牌、城市、星级数据了</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a7866389e2.png"/></div></div><ul><li>当我们在搜索框输入内容时，也会根据搜索的结果来动态展示品牌、城市、星级数据</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a7888050e8.png"/></div></div><p>但是现在的代码并不是很优雅，所以我们可以把2.3的聚合操作，抽取为一个方法，IDEA中使用快捷键<code>Ctrl</code> + <code>Alt</code> + <code>M</code>可以快速抽取 (记得关闭网抑云的全局热键，不然会冲突)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildAggregation</span><span class="params">(SearchRequest request)</span> &#123;</span><br><span class="line">    request.source().aggregation(</span><br><span class="line">            AggregationBuilders</span><br><span class="line">                    .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                    .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                    .size(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line">    request.source().aggregation(</span><br><span class="line">            AggregationBuilders</span><br><span class="line">                    .terms(<span class="string">&quot;cityAgg&quot;</span>)</span><br><span class="line">                    .field(<span class="string">&quot;city&quot;</span>)</span><br><span class="line">                    .size(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line">    request.source().aggregation(</span><br><span class="line">            AggregationBuilders</span><br><span class="line">                    .terms(<span class="string">&quot;starAgg&quot;</span>)</span><br><span class="line">                    .field(<span class="string">&quot;starName&quot;</span>)</span><br><span class="line">                    .size(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4.1、4.2、4.3的解析结果，也可以抽取为一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过聚合名称获取对应的key的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aggregations 聚合结果集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aggName 聚合名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; <span class="title function_">getAggByName</span><span class="params">(Aggregations aggregations, String aggName)</span> &#123;</span><br><span class="line">    <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(aggName);</span><br><span class="line">    ArrayList&lt;String&gt; brandList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; brandBuckets = brandTerms.getBuckets();</span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : brandBuckets) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">        brandList.add(brandName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> brandList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改完的代码就优雅多了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">getFilters</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request对象</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line">        <span class="comment">// 2.1 查询</span></span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line">        <span class="comment">// 2.2 设置size为0，不查询文档数据</span></span><br><span class="line">        request.source().size(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 2.3 聚合</span></span><br><span class="line">        buildAggregation(request);</span><br><span class="line">        <span class="comment">// 3. 发出请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> response.getAggregations();</span><br><span class="line">        <span class="comment">// 4. 解析结果</span></span><br><span class="line">        <span class="comment">// 4.1 解析品牌结果，获取品牌名称集合</span></span><br><span class="line">        ArrayList&lt;String&gt; brandList = getAggByName(aggregations, <span class="string">&quot;brandName&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;brand&quot;</span>, brandList);</span><br><span class="line">        <span class="comment">// 4.2 解析城市结果，获取城市名称集合</span></span><br><span class="line">        ArrayList&lt;String&gt; cityList = getAggByName(aggregations, <span class="string">&quot;cityAgg&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;city&quot;</span>, cityList);</span><br><span class="line">        <span class="comment">// 4.3 解析星级结果，获取星级名称集合</span></span><br><span class="line">        ArrayList&lt;String&gt; starList = getAggByName(aggregations, <span class="string">&quot;starAgg&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;starName&quot;</span>, starList);</span><br><span class="line">        <span class="comment">// 5. 返回Map集合</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过聚合名称获取对应的key的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aggregations 聚合结果集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aggName 聚合名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; <span class="title function_">getAggByName</span><span class="params">(Aggregations aggregations, String aggName)</span> &#123;</span><br><span class="line">    <span class="type">Terms</span> <span class="variable">brandTerms</span> <span class="operator">=</span> aggregations.get(aggName);</span><br><span class="line">    ArrayList&lt;String&gt; brandList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;? <span class="keyword">extends</span> <span class="title class_">Terms</span>.Bucket&gt; brandBuckets = brandTerms.getBuckets();</span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : brandBuckets) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">        brandList.add(brandName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> brandList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聚合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildAggregation</span><span class="params">(SearchRequest request)</span> &#123;</span><br><span class="line">    request.source().aggregation(</span><br><span class="line">            AggregationBuilders</span><br><span class="line">                    .terms(<span class="string">&quot;brandAgg&quot;</span>)</span><br><span class="line">                    .field(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">                    .size(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line">    request.source().aggregation(</span><br><span class="line">            AggregationBuilders</span><br><span class="line">                    .terms(<span class="string">&quot;cityAgg&quot;</span>)</span><br><span class="line">                    .field(<span class="string">&quot;city&quot;</span>)</span><br><span class="line">                    .size(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line">    request.source().aggregation(</span><br><span class="line">            AggregationBuilders</span><br><span class="line">                    .terms(<span class="string">&quot;starAgg&quot;</span>)</span><br><span class="line">                    .field(<span class="string">&quot;starName&quot;</span>)</span><br><span class="line">                    .size(<span class="number">100</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 接收前端的查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 构建BoolQuery</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(key)) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 品牌条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 城市条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 星级条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 价格条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getMaxPrice() != <span class="literal">null</span> &amp;&amp; params.getMinPrice() != <span class="literal">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders</span><br><span class="line">                .rangeQuery(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">                .gt(params.getMinPrice())</span><br><span class="line">                .lt(params.getMaxPrice()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.算分控制</span></span><br><span class="line">    <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQuery</span> <span class="operator">=</span></span><br><span class="line">            QueryBuilders.functionScoreQuery(</span><br><span class="line">                    boolQuery, <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                                    QueryBuilders.termsQuery(<span class="string">&quot;isAD&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">                                    ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>))&#125;);</span><br><span class="line">    request.source().query(functionScoreQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h1><ul><li>当用户在搜索框输入字符时，我们应该显示出与该字符相关的搜索项</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a7de48df6b.png"/></div></div><ul><li>这种根据用户输入的字母，提示完整词条的功能，就是自动补全</li><li>因为需要根据拼音字母来推断，因此要用到拼音分词功能</li></ul><h2 id="拼音分词器"><a href="#拼音分词器" class="headerlink" title="拼音分词器"></a>拼音分词器</h2><ul><li>要实现根据字母做补全，就必须对文档按照拼音分词。</li><li>在GitHub上刚好有ES的拼音分词插件。</li><li>地址：(<a href="https://github.com/medcl/elasticsearch-analysis-pinyin)[https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin)[https://github.com/medcl/elasticsearch-analysis-pinyin</a>]</li><li>这里依旧是下载7.12.1版本：(<a href="https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v7.12.1)[https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v7.12.1">https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v7.12.1)[https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v7.12.1</a>]</li><li>安装方式分三步<ol><li>解压</li><li>上传到虚拟机的ES的plugin目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/docker/volumes/es-plugins/_data</span><br></pre></td></tr></table></figure></li><li>重启ES<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart es</span><br></pre></td></tr></table></figure></li></ol></li><li>重启完毕之后，测试我们的分词器是否安装成功，在kibana中编写DSL代码</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;深岩银河是真滴好玩&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>得到的分词结果如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;shen&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;syyhszdhw&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;yan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;yin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;he&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;shi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zhen&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;di&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;hao&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;wan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>暂时只是将每个字拆解成了拼音，还有一个首字母的全拼，但目前还不能满足我们的需求</li><li><code>深岩银河是真滴好玩</code>这句话，还没有被分词</li><li>每一个字拆解成一个拼音没什么用，单独的<code>shen</code>、<code>yan</code>显然没有<code>syyh</code>有用</li><li>结果中也没有出现汉字，也就意味着只有当用户输入拼音的时候，才会补全</li><li>为了满足我们的需求，我们需要来自定义分词器</li></ul><h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h2><ul><li>默认的拼音分词器会将每个汉字单独分为拼音，而我们希望的是将每个词条形成一组拼音，需要对拼音分词器做个性化定制，形成自定义分词器</li><li>ES中分词器(analyzer)的组成包含三个部分<ol><li>character filters：在tokenizer之前对文本进行处理，例如删除字符、替换字符等(前导空格，末尾空格，字符表情转对应文字，<code>:) -&gt; 开心</code>)</li><li>tokenizer：将文本按照一定规则切割成词条(term)。例如keyword，就是不分词；ik_smart，就是最少切分</li><li>tokenizer filter：将tokenizer输出的词条进一步处理。例如大小写切换、同一次处理、拼音处理等</li></ol></li></ul><blockquote><p>例如：</p><ul><li><code>滋蹦瓦鸡打了个双锤:)</code></li><li><code>character filters将:)</code>替换为开心，那么转换后的文本就是<code>滋蹦瓦鸡打了个双锤开心</code></li><li><code>tokenizer</code>使用<code>ik_smart</code>分词器将文本分词：<code>滋蹦</code>、<code>瓦鸡</code>、<code>打了个</code>、<code>双锤</code>、<code>开心</code></li><li><code>tokenizer filter</code>处理切割好的词条：<code>zibneg</code>、<code>waji</code>、<code>dalege</code>、<code>shuangchui</code>、<code>kaixin</code> </li></ul></blockquote><ul><li>基本语法如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                     <span class="comment">// 自定义分词器</span></span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>                <span class="comment">// 分词器名称</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span>   <span class="comment">// tokenizer部分</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span>            <span class="comment">// tokenizer filter部分</span></span><br><span class="line">      <span class="punctuation">&#125;</span>                                 <span class="comment">// 由于这里并不需要处理特殊字符，所以没有character filters</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>但是默认的拼音分词器还是只能将<code>滋蹦</code>分解为<code>zi</code>、<code>beng</code>、<code>zb</code>这三个，而没有<code>zibeng</code></li><li>所以我们还需要自定义tokenizer filter拼音分词器</li><li>解决方案在其官方文档中给出了<blockquote><p>The plugin includes analyzer: pinyin , tokenizer: pinyin and token-filter: pinyin.<br><code>Optional Parameters</code><br><code>keep_first_letter</code> when this option enabled, eg: 刘德华&gt;ldh, default: true<br><code>keep_separate_first_letter</code> when this option enabled, will keep first letters separately, eg: 刘德华&gt;l,d,h, default: false, NOTE: query result maybe too fuzziness due to term too frequency<br><code>limit_first_letter_length</code> set max length of the first_letter result, default: 16<br><code>keep_full_pinyin</code> when this option enabled, eg: 刘德华&gt; [liu,de,hua], default: true<br><code>keep_joined_full_pinyin</code> when this option enabled, eg: 刘德华&gt; [liudehua], default: false<br><code>keep_none_chinese</code> keep non chinese letter or number in result, default: true<br><code>keep_none_chinese_together</code> keep non chinese letter together, default: true, eg: DJ音乐家 -&gt; DJ,yin,yue,jia, when set to false, eg: DJ音乐家 -&gt; D,J,yin,yue,jia, NOTE: keep_none_chinese should be enabled first<br><code>keep_none_chinese_in_first_letter</code> keep non Chinese letters in first letter, eg: 刘德华AT2016-&gt;ldhat2016, default: true<br><code>keep_none_chinese_in_joined_full_pinyin</code> keep non Chinese letters in joined full pinyin, eg: 刘德华2016-&gt;liudehua2016, default: false<br><code>none_chinese_pinyin_tokenize</code> break non chinese letters into separate pinyin term if they are pinyin, default: true, eg: liudehuaalibaba13zhuanghan -&gt; liu,de,hua,a,li,ba,ba,13,zhuang,han, NOTE: keep_none_chinese and keep_none_chinese_together should be enabled first<br><code>keep_original</code> when this option enabled, will keep original input as well, default: false<br><code>lowercase</code> lowercase non Chinese letters, default: true<br><code>trim_whitespace</code> default: true<br><code>remove_duplicated_term</code> when this option enabled, duplicated term will be removed to save index, eg: de的&gt;de, default: false, NOTE: position related query maybe influenced<br><code>ignore_pinyin_offset</code> after 6.0, offset is strictly constrained, overlapped tokens are not allowed, with this parameter, overlapped token will allowed by ignore offset, please note, all position related query or highlight will become incorrect, you should use multi fields and specify different settings for different query purpose. if you need offset, please set it to false. default: true.</p></blockquote></li></ul><p>-可以看到，默认情况下是<code>keep_full_pinyin</code>，会将<code>滋蹦</code>拆成<code>zi</code>和<code>beng</code>，我们要将这个选项设置为false</p><ul><li>同时将<code>keep_joined_full_pinyin</code>设置为true，就会正常解析为<code>zibeng</code>了</li><li>我们还需要保留原始结果，故也需要将<code>keep_original</code>设置为<code>true</code></li><li>我们在实际应用中，根据自己的需求来配置就好了，那么这里声明的自定义分词器如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>我们自定义的分词器肯定是在mapping映射中用的，也就是在我们定义索引库的字段的时候用的</li><li>这样对字段创建倒排索引的时候，除了会创建中文的倒排索引，也会创建拼音的倒排索引</li><li>那我们建立一个索引库，定义一个<code>name</code>字段，其分词器不再使用之前的<code>ik_max_word</code>，而是使用我们的自定义分词器</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_analyzer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>那我们现在来测试一下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /test/_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;实现自定义分词器&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_analyzer&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>得到的结果如下，符合我们的需求了</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;实现&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;shixian&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;sx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;自定义&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zidingyi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zdy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;自定&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ziding&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;zd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;定义&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dingyi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;分词器&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;fenciqi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;fcq&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;分词&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;fenci&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;fc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;器&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;qi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;q&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>但是现在还存在一点小问题，这里举个例子说明<ul><li>我们在创建的索引库中添加两个同音字，<code>狮子</code>和<code>柿子</code></li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /test/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柿子&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST /test/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;狮子&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>那我们现在查询<code>掉进狮子笼怎么办</code>，结果中出现了<code>狮子</code>和<code>柿子</code>，这显然不是我们想要的</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;掉进狮子笼怎么办？在线等，挺急的&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a820a699b5.png"/></div></div><ul><li>那么为什么会出现这种问题呢？<ul><li>拼音分词器适合在创建倒排索引的时候使用，但是不能在搜索的时候使用。<ul><li>例如我们的狮子分词之后变成<code>狮子</code>、<code>shizi</code>、<code>sz</code>，柿子分词后变成<code>柿子</code>、<code>shizi</code>、<code>sz</code></li></ul></li></ul></li></ul><div class="table-container"><table><thead><tr><th>词条</th><th>文档编号</th></tr></thead><tbody><tr><td>狮子</td><td>1</td></tr><tr><td>shizi</td><td>1, 2</td></tr><tr><td>sz</td><td>1, 2</td></tr><tr><td>柿子</td><td>2</td></tr></tbody></table></div><ul><li>因为这两个次的拼音是一样的，所以创建倒排索引的时候，<code>shizi</code>对应1、2这两条文档，如果对<code>shizi</code>查询，则会把<code>狮子</code>和<code>柿子</code>都查询出来</li><li>用户搜索<code>掉进狮子笼</code>，如果用我们自定义的分词器，最终也会分出<code>shizi</code>这个词条，进行搜索的时候，当然会查询出两条数据</li><li>那么怎么解决这个问题呢？<ul><li>我们在搜索的时候，使用<code>ik_smart</code>分词器，在mapping映射时，指定两个分词器，<code>analyzer</code>和<code>search_analyzer</code><ul><li>其中<code>analyzer</code>是创建索引时使用的</li><li><code>search_analyzer</code>是搜索时使用的</li></ul></li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_analyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a8302c0bdc.png"/></div></div><blockquote><p>小结</p><ul><li>如何使用拼音分词器？<ol><li>下载pinyin分词器</li><li>解压到ES的plugin目录</li><li>重启ES</li></ol></li><li>如何自定义分词器？<ul><li>创建索引库时，在settings中配置<code>analysis</code>，可以包含三部分<ol><li>character filter</li><li>tokenizer</li><li>filter</li></ol></li></ul></li><li>拼音分词器的注意事项？<ul><li>为了避免搜索到同音字，搜索时不要使用拼音分词器，添加<code>search_analyzer</code>属性</li></ul></li></ul></blockquote><h2 id="自动补全查询"><a href="#自动补全查询" class="headerlink" title="自动补全查询"></a>自动补全查询</h2><ul><li>ES提供额<code>Completion Suggester</code>查询来实现自动补全功能。这个查询会匹配以用户输入内容开头的词条并返回。为了提高补全查询的效率，对于文档中字段的类型有一些约束<ul><li>参与补全查询的字段必须是<code>completion</code>类型</li><li>字段的内容一般是用来补全的多个词条形成的数组</li></ul></li><li>例如这个索引库</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /test2</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>然后插入一些测试数据</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /test2/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Sony&quot;</span><span class="punctuation">,</span> <span class="string">&quot;PS5&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /test2/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;SK-II&quot;</span><span class="punctuation">,</span> <span class="string">&quot;PITERA&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /test2/_doc/<span class="number">3</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Nitendo&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Switch&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /test2/_doc/<span class="number">4</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Sony&quot;</span><span class="punctuation">,</span> <span class="string">&quot;WF-1000XM4&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>补全查询的DSL语句如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /test2/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title_suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>              <span class="comment">// 给suggest取名</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;P&quot;</span><span class="punctuation">,</span>                  <span class="comment">// 补全查询关键字</span></span><br><span class="line">      <span class="attr">&quot;completion&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>       </span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span>           <span class="comment">// 补全查询的字段</span></span><br><span class="line">        <span class="attr">&quot;skip_duplicates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="comment">// 跳过重复的</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span>                  <span class="comment">// 获取前10条结果</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>结果中成功查询到<code>PS5</code>和<code>PITERA</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;suggest&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title_suggest&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;P&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;length&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;PITERA&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;SK-II&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;PITERA&quot;</span></span><br><span class="line">              <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;PS5&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;test2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;Sony&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;PS5&quot;</span></span><br><span class="line">              <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="实现酒店搜索框自动补全"><a href="#实现酒店搜索框自动补全" class="headerlink" title="实现酒店搜索框自动补全"></a>实现酒店搜索框自动补全</h2><ul><li>现在我们的hotel索引库还没有设置拼音分词器，需要修改索引库中的配置。但是索引库是无法修改的，只能先删掉再重新创建</li><li>另外，我们需要添加一个字段，用来做自动补全，将<code>brand</code>、<code>suggestion</code>、<code>city</code>等都放进去，作为自动补全的提示</li><li>那我们现在总结一下需要做的事<ol><li>修改hotel的索引结构，设置自定义拼音分词器</li><li>修改索引库的name、all字段，使用自定义分词器(其他字段已经是keyword类型的词条了，这两个text类型的还需要自定义分词)</li><li>索引库添加一个新字段suggestion，类型为completion类型，使用自定义的分词器</li><li>给HotelDoc类添加suggestion字段，内容包含brand、business</li><li>重新导入数据到hotel库</li></ol></li></ul><h2 id="实现酒店搜索框自动补全-1"><a href="#实现酒店搜索框自动补全-1" class="headerlink" title="实现酒店搜索框自动补全"></a>实现酒店搜索框自动补全</h2><ul><li>现在我们的hotel索引库还没有设置拼音分词器，需要修改索引库中的配置。但是索引库是无法修改的，只能先删掉再重新创建</li><li>另外，我们需要添加一个字段，用来做自动补全，将brand、suggestion、city等都放进去，作为自动补全的提示</li><li>那我们现在总结一下需要做的事<ol><li>修改hotel的索引结构，设置自定义拼音分词器</li><li>修改索引库的name、all字段，使用自定义分词器(其他字段已经是keyword类型的词条了，这两个text类型的还需要自定义分词)</li><li>索引库添加一个新字段suggestion，类型为completion类型，使用自定义的分词器</li><li>给HotelDoc类添加suggestion字段，内容包含brand、business</li><li>重新导入数据到hotel库</li></ol></li></ul><h3 id="修改hotel映射结构"><a href="#修改hotel映射结构" class="headerlink" title="修改hotel映射结构"></a>修改hotel映射结构</h3><ul><li>代码如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;text_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;completion_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_deplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text_analyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;business&quot;</span><span class="punctuation">:</span> -<span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">,</span> <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text_analyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;suggestion&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion_analyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改HotelDoc实体"><a href="#修改HotelDoc实体" class="headerlink" title="修改HotelDoc实体"></a>修改HotelDoc实体</h3><ul><li>HotelDoc中要添加一个字段，用来做数组补全，内容可以是酒店品牌、城市、商圈、名称等信息。按照自动补全的要求，最好是这些字段的数组</li><li>因此我们可以在HotelDoc中添加一个suggestion字段，类型为<code>List&lt;String&gt;</code>，然后将brand、city、business等信息放到里面</li><li>由于某些business的信息是包含多个关键字，所以我们需要对其切分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;business&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;天安门/王府井地区&quot;</span></span><br><span class="line"><span class="attr">&quot;business&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;永定门、南站、大红门、南苑地区&quot;</span></span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDoc</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="keyword">private</span> Object distance;</span><br><span class="line">    <span class="keyword">private</span> Boolean isAD;</span><br><span class="line">    <span class="comment">// 新增suggestion属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; suggestion;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HotelDoc</span><span class="params">(Hotel hotel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="built_in">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="built_in">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="built_in">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="built_in">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="built_in">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="built_in">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="built_in">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="built_in">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="built_in">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="built_in">this</span>.pic = hotel.getPic();</span><br><span class="line">        <span class="comment">// 组装suggestion</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.business.contains(<span class="string">&quot;/&quot;</span>) || <span class="built_in">this</span>.business.contains(<span class="string">&quot;、&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// business有多个值、需要切分，根据数据库中的数据，这里按照/和、来切分</span></span><br><span class="line">            String[] splits = <span class="built_in">this</span>.business.split(<span class="string">&quot;/|、&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.suggestion = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 添加元素</span></span><br><span class="line">            <span class="built_in">this</span>.suggestion.add(<span class="built_in">this</span>.brand);</span><br><span class="line">            <span class="built_in">this</span>.suggestion.add(<span class="built_in">this</span>.city);</span><br><span class="line">            <span class="comment">// 添加切分business后的结果</span></span><br><span class="line">            Collections.addAll(<span class="built_in">this</span>.suggestion, splits);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.suggestion = Arrays.asList(brand, city, business);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新导入"><a href="#重新导入" class="headerlink" title="重新导入"></a>重新导入</h3><ul><li>运行之前编写的批量导入数据功能，可以看到新的酒店数据中包含了suggestion，且切分了business，后面我们就根据suggestion这个字段来自动补全</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;hotel&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;413460&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.8905408</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;东城天坛东里甲48号&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brand&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7天酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;business&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;前门、崇文门商贸区&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> <span class="number">413460</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;39.875786, 116.421987&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7天连锁酒店(北京天坛店)&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pic&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;https://m.tuniucdn.com/fb2/t1/G2/M00/C7/D8/Cii-T1knCK6IWTtxAAI0plLButMAAKYTAJu-woAAjS-422_w200_h200_c1_t0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">753</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;starName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;二钻&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;suggestion&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;7天酒店&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;北京&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;前门&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;崇文门商贸区&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自动补全查询的API"><a href="#自动补全查询的API" class="headerlink" title="自动补全查询的API"></a>自动补全查询的API</h3><ul><li>前面我们只是学了自动补全查询的DSL，那现在我们来学习对应的JavaAPI</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">request.source()</span><br><span class="line">        .suggest(<span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>().addSuggestion(</span><br><span class="line">                <span class="string">&quot;title_suggest&quot;</span>,</span><br><span class="line">                SuggestBuilders.completionSuggestion(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">                        .prefix(<span class="string">&quot;p&quot;</span>)</span><br><span class="line">                        .skipDuplicates(<span class="literal">true</span>)</span><br><span class="line">                        .size(<span class="number">10</span>)</span><br><span class="line">        ));</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a95003705e.png"/></div></div><ul><li>自动补全的结果也比较特殊，解析的代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="type">Suggest</span> <span class="variable">suggest</span> <span class="operator">=</span> response.getSuggest();</span><br><span class="line"><span class="type">CompletionSuggestion</span> <span class="variable">suggestion</span> <span class="operator">=</span> suggest.getSuggestion(<span class="string">&quot;title_suggest&quot;</span>);</span><br><span class="line">List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestion.getOptions();</span><br><span class="line"><span class="keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> option.getText().toString();</span><br><span class="line">    System.out.println(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a9528800c4.png"/></div></div><h3 id="实现搜索框自动补全"><a href="#实现搜索框自动补全" class="headerlink" title="实现搜索框自动补全"></a>实现搜索框自动补全</h3><ul><li>当我们在搜索框输入<code>s</code>时，会看到请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请求网址: http://localhost:8089/hotel/suggestion?key=s</span><br><span class="line">请求方法: GET</span><br><span class="line">请求载荷：key: s</span><br></pre></td></tr></table></figure><ul><li>需求：当我们在搜索框输入<code>s</code>时，会显示以<code>s</code>为首字母的词条</li><li>那我们在HotelController中定义方法，遵循以下要求<ol><li>请求方式：<code>GET</code></li><li>请求路径：<code>/hotel/suggestion</code></li><li>请求参数：<code>key</code></li><li>返回值类型： <code>List&lt;String&gt;</code></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getSuggestion</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request对象</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 准备DSL</span></span><br><span class="line">        request.source()</span><br><span class="line">                .suggest(<span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>().addSuggestion(</span><br><span class="line">                        <span class="string">&quot;suggestions&quot;</span>,</span><br><span class="line">                        SuggestBuilders</span><br><span class="line">                                .completionSuggestion(<span class="string">&quot;suggestion&quot;</span>)</span><br><span class="line">                                .prefix(prefix)</span><br><span class="line">                                .skipDuplicates(<span class="literal">true</span>)</span><br><span class="line">                                .size(<span class="number">10</span>)</span><br><span class="line">                ));</span><br><span class="line">        <span class="comment">// 3. 发起请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4. 解析结果</span></span><br><span class="line">        <span class="type">Suggest</span> <span class="variable">suggest</span> <span class="operator">=</span> response.getSuggest();</span><br><span class="line">        <span class="comment">// 4.1 根据补全查询名称，获取补全结果</span></span><br><span class="line">        <span class="type">CompletionSuggestion</span> <span class="variable">suggestions</span> <span class="operator">=</span> suggest.getSuggestion(<span class="string">&quot;suggestions&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.2 获取options</span></span><br><span class="line">        List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestions.getOptions();</span><br><span class="line">        <span class="comment">// 4.3 遍历 这里可以提前声明集合的大小，只能是options.size()</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(options.size());</span><br><span class="line">        <span class="keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;</span><br><span class="line">            <span class="comment">// 将每条补全结果都加入到集合中</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> option.getText().toString();</span><br><span class="line">            list.add(text);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 返回补全结果集合</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启服务，自动补全功能已经实现了</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a959ebd17c.png"/></div></div><ul><li>无论用户输入中文还是拼音都能正确显示补全结果</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/07/668a95b252b11.png"/></div></div><blockquote><p>如果搜中文不显示补全，那肯定是创建索引库的时候，没指定suggestion的search_analyzer为ik_smart</p></blockquote><h1 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h1><ul><li>ES中的酒店数据来自于MySQL的数据库，因此MySQL数据发生改变时，ES也必须跟着改变，这就是ES与MySQL之间的数据同步问题</li><li>但是在微服务中，负责酒店管理(操作MySQL)的业务，与负责酒店搜索(操作ES)的业务可能在两个不同的微服务上，那么数据同步又该如何实现呢？</li></ul><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ul><li>常见的数据沟通过不方案有三种<ol><li>同步调用</li><li>异步通知</li><li>监听binlog</li></ol></li></ul><h3 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b53877b090.png"/></div></div><ul><li><p>流程如下</p><ol><li>hotel-demo对外提供接口，用来更新ES中的数据</li><li>酒店管理服务在完成数据库操作后，直接调用hotel-demo提供的接口</li></ol></li><li><p>但是这样存在一些问题</p><ol><li>耦合度太高，hotel-admin原本只需要将数据写入数据库，但现在写入数据库之后，还要调用hotel-demo提供的更新ES的接口，形成了业务耦合</li><li>性能差，例如原本的写入数据库只需要50ms，调用hotel-demo提供的更新ES的接口耗时150ms，那么总耗时就达到了0.2s，性能自然就下降了。且如果<code>1.2</code>和<code>1.3</code>发生了异常，那么整个业务也都出问题了</li></ol></li></ul><h3 id="异步通知"><a href="#异步通知" class="headerlink" title="异步通知"></a>异步通知</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b53cee5e70.png"/></div></div><ul><li>流程如下<ol><li>hotel-admin对MySQL数库数据完成增删改后，发送MQ消息</li><li>hotel-demo监听MQ，接收到消息后完成ES数据修改</li></ol></li><li>这样就解除了业务间的耦合，也提高了性能，但是比较依赖于MQ的可靠性，并且引入了新的中间件，实现起来的复杂度有所上升</li></ul><h3 id="监听binlog"><a href="#监听binlog" class="headerlink" title="监听binlog"></a>监听binlog</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b54059b118.png"/></div></div><ul><li>流程如下<ol><li>给mysql开启binlog功能</li><li>mysql完成增删改操作，都会记录在binlog中</li><li>hotel-demo基于canal监听binlog变化，实时更新ES中的内容</li></ol></li><li>相比较于异步通知来说，此种方式完全接触了耦合，既不用给MQ发消息，也不用调用hotel-demo提供的接口。但是由于要开启mysql的binlog功能，所以对mysql的压力很大，并且要引入新的中间件<code>canal</code>，实现起来比较复杂</li></ul><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><ul><li>同步调用<ul><li>优点：实现简单</li><li>缺点：业务耦合度高</li></ul></li><li>异步通知<ul><li>优点：低耦合，实现难度一般</li><li>缺点：依赖MQ的可靠性</li></ul></li><li>监听binlog<ul><li>优点：完全解除服务间的耦合</li><li>缺点：开启binlog增加数据库负担、实现复杂度高</li></ul></li></ul><h2 id="实现数据同步"><a href="#实现数据同步" class="headerlink" title="实现数据同步"></a>实现数据同步</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>使用黑马提供的hotel-admin项目作为酒店管理的微服务。</li><li>当酒店数据发生增删改时，要求对ES中的数据也完成相同的操作</li><li>需要注意的一点是，ES中新增数据和修改数据是同一个操作，因为在RestClient的API中，全量修改与新增的API完全一致，判断的依据是ID<ul><li>若新增时，ID已经存在，则修改(删除再新增)</li><li>若新增时，ID不存在，则新增</li></ul></li><li>实现思路如下<ol><li>导入黑马提供的hotel-admin，启动并测试酒店数据的CRUD</li><li>声明exchange、queue、RountingKey</li><li>在hotel-admin中的增删改业务中，完成消息发送</li><li>在hotel-demo中完成消息监听，并更新ES中数据</li><li>启动并测试数据同步功能</li></ol></li></ul><h3 id="导入demo"><a href="#导入demo" class="headerlink" title="导入demo"></a>导入demo</h3><ul><li>导入黑马提供的hotel-admin，修改application.yml配置文件，将数据库连接信息改成自己的，访问<a href="http://localhost:8099/">http://localhost:8099/</a> 就能看到管理页面了</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b56e490119.png"/></div></div><ul><li>其中已经包含了酒店的CRUD功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveHotel</span><span class="params">(<span class="meta">@RequestBody</span> Hotel hotel)</span>&#123;</span><br><span class="line">    hotelService.save(hotel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@RequestBody</span> Hotel hotel)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hotel.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidParameterException</span>(<span class="string">&quot;id不能为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    hotelService.updateById(hotel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    hotelService.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明交换机、队列"><a href="#声明交换机、队列" class="headerlink" title="声明交换机、队列"></a>声明交换机、队列</h3><ul><li>MQ结构如图</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b571b65f4c.png"/></div></div><ol><li><p>引入依赖</p><ul><li>使用RabbitMQ，我们首先要在hotel-demo和hotel-admin引入SpringAMQP的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--amqp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置RabbitMQ的连接信息</p><ul><li>在hotel-demo和hotel-admin的application.yml文件中添加配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.96</span><span class="number">.128</span> <span class="comment">## 主机名</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span> <span class="comment">#端口</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span> <span class="comment">## 用户名</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span> <span class="comment">## 密码</span></span><br><span class="line">  <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment">## 虚拟主机</span></span><br></pre></td></tr></table></figure></li><li><p>声明交换机和队列名称</p><ul><li>在hotel-demo和hotel-admin的constants包下新建一个MqConstants类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConstants</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 交换机</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOTEL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;hotel.topic&quot;</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 监听新增和修改的队列</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOTEL_INSERT_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;hotel.insert.queue&quot;</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 监听删除的队列</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOTEL_DELETE_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;hotel.delete.queue&quot;</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 新增和修改的RoutingKey</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOTEL_INSERT_KEY</span> <span class="operator">=</span> <span class="string">&quot;hotel.insert&quot;</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除的RoutingKey</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOTEL_DELETE_KEY</span> <span class="operator">=</span> <span class="string">&quot;hotel.delete&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明交换机和队列</p><ul><li>在hotel-demo中，定义配置类，声明队列、交换机</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(MqConstants.HOTEL_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">insertQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConstants.HOTEL_INSERT_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">deleteQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConstants.HOTEL_DELETE_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">insertQueueBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(insertQueue()).to(topicExchange()).with(MqConstants.HOTEL_INSERT_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">deleteQueueBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deleteQueue()).to(topicExchange()).with(MqConstants.HOTEL_DELETE_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="发送MQ消息"><a href="#发送MQ消息" class="headerlink" title="发送MQ消息"></a>发送MQ消息</h3><ul><li>在hotel-admin中的增删改业务中，分别发送MQ消息</li><li><p>但是发送的消息MQ是会保存的，而MQ又是基于内存的，所以我们要发送的内容要尽可能的小</p><ul><li>因此不建议直接把整个hotel对象发送，太消耗内存了</li><li>只发送一个酒店id就足以满足需求了</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    @PostMapping</span><br><span class="line">    public void saveHotel(@RequestBody Hotel hotel) &#123;</span><br><span class="line">        hotelService.save(hotel);</span><br><span class="line"><span class="addition">+       rabbitTemplate.convertAndSend(MqConstants.HOTEL_EXCHANGE, MqConstants.HOTEL_INSERT_KEY, hotel.getId());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PutMapping()</span><br><span class="line">    public void updateById(@RequestBody Hotel hotel) &#123;</span><br><span class="line">        if (hotel.getId() == null) &#123;</span><br><span class="line">            throw new InvalidParameterException(&quot;id不能为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        hotelService.updateById(hotel);</span><br><span class="line"><span class="addition">+       rabbitTemplate.convertAndSend(MqConstants.HOTEL_EXCHANGE, MqConstants.HOTEL_INSERT_KEY, hotel.getId());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">    public void deleteById(@PathVariable(&quot;id&quot;) Long id) &#123;</span><br><span class="line">        hotelService.removeById(id);</span><br><span class="line"><span class="addition">+       rabbitTemplate.convertAndSend(MqConstants.HOTEL_EXCHANGE, MqConstants.HOTEL_DELETE_KEY, id);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="接收MQ消息"><a href="#接收MQ消息" class="headerlink" title="接收MQ消息"></a>接收MQ消息</h3><ul><li>hotel-demo接收到MQ消息要做的事情包括<ol><li>新增消息：根据传递的hotel的id查询hotel信息，然后新增一条数据到索引库(修改同理)</li><li>删除消息：根据传递的hotel的id删除索引库中的一条数据</li></ol></li><li>我们在mq包下新增一个类HotelListener</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelListener</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听酒店新增/修改业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 酒店的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = MqConstants.HOTEL_INSERT_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenHotelInsertQueue</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        hotelService.insertById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听酒店删除业务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 酒店的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = MqConstants.HOTEL_DELETE_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenHotelDeleteQueue</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        hotelService.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后在IHotelService中创建这两个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHotelService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Hotel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>并在HotelService中实现业务逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 根据id查询酒店数据</span></span><br><span class="line">        <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">// 2. 转换为文档类型</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">        <span class="comment">// 3. 准备Request对象</span></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotel.getId().toString());</span><br><span class="line">        <span class="comment">// 4. 准备文档</span></span><br><span class="line">        request.source(JSON.toJSON(hotelDoc), XContentType.JSON);</span><br><span class="line">        <span class="comment">// 5. 发送请求</span></span><br><span class="line">        client.index(request,RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 准备Request对象</span></span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>,id.toString());</span><br><span class="line">        <span class="comment">// 2. 发送请求</span></span><br><span class="line">        client.delete(request,RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启这两个服务，并测试</li></ul><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><ul><li>单机的ES做数据存储，必然会面临两个问题<ol><li>海量数据存储问题：将索引库从逻辑上拆分为N个分片(shard)，存储到多个节点</li><li>单点故障问题：将分片数据在不同节点备份(replica)</li></ol></li><li>ES集群相关概念<ul><li>集群(cluster)：一组拥有共同cluster name的节点</li><li>节点(node)：集群中的一个ES示例</li><li>分片(shard)：索引可以被拆分为不同的部分进行存储，称为分片。<ul><li>在集群环境下，一个索引的不同分片可以拆分到不同的节点中。</li><li>解决问题：数据量太大，单点存储有限的问题</li></ul></li><li>主分片(Primary shard)：相对于副本分片的定义</li><li>副本分片(Replica shard)：每个主分片都可以有一个或多个副本，数据与主分片一样</li></ul></li><li>数据备份可以保证高可用，但是每个分片备份一份，所需要的节点数量就会翻一倍，成本太高了</li><li>为了在高可用和成本间寻求平衡，我们可以这样做<ol><li>首先对数据分片，存储到不同节点</li><li>然后对每个分片进行备份，放到对方节点，完成互相备份</li></ol></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b62c48c783.png"/></div></div><ul><li>现在，每个分片都有1个备份，存储在3个节点：<ul><li>node0：保存了分片0和1</li><li>node1：保存了分片0和2</li><li>node2：保存了分片1和2</li></ul></li></ul><h2 id="搭建ES集群"><a href="#搭建ES集群" class="headerlink" title="搭建ES集群"></a>搭建ES集群</h2><ul><li>部署es集群可以直接使用docker-compose来完成，不过虚拟机至少要有4G的内存空间</li><li>首先编写一个docker-compose文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data01:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data02:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data03:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  data01:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  data02:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  data03:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure><ul><li>运行docker-compose文件集群部署</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><h2 id="集群脑裂问题"><a href="#集群脑裂问题" class="headerlink" title="集群脑裂问题"></a>集群脑裂问题</h2><h3 id="集群职责划分"><a href="#集群职责划分" class="headerlink" title="集群职责划分"></a>集群职责划分</h3><ul><li>ES中集群节点有不同的职责划分</li></ul><div class="table-container"><table><thead><tr><th>节点类型</th><th>配置参数</th><th>默认值</th><th>节点职责</th></tr></thead><tbody><tr><td>master eligible</td><td>node.master</td><td>true</td><td>备选主节点:主节点可以管理和记录集群状态、决定分片在哪个节点、处理创建和删除索引库的请求</td></tr><tr><td>data</td><td>node.data</td><td>true</td><td>数据节点:存储数据、搜索、聚合、CRUD</td></tr><tr><td>ingest</td><td>node.ingest</td><td>true</td><td>数据存储之前的预处理</td></tr><tr><td>coordinating</td><td>上面3个参数都为false则为coordinating节点</td><td>无</td><td>路由请求到其它节点合并其它节点处理的结果，返回给用户</td></tr></tbody></table></div><ul><li>默认情况下，急群众的任何一个节点都同时具备上述四种角色</li><li>但真实的集群一定要将集群职责分离<ul><li>master节点：对CPU要求高，但是对内存要求低</li><li>data节点：对CPU和内存要求都高</li><li>coordinating节点：对网络带宽、CPU要求高</li></ul></li><li>职责分离可以让我们根据不同节点的需求分配不同的硬件去部署。而且可以避免业务之间的互相干扰</li><li>一个典型的ES集群职责划分如下图</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b63cf1b965.png"/></div></div><h3 id="脑裂问题"><a href="#脑裂问题" class="headerlink" title="脑裂问题"></a>脑裂问题</h3><ul><li>脑裂是因为集群中的节点失联导致的。</li><li>例如一个集群中，主节点与其他节点失联</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b63f642fa5.png"/></div></div><ul><li>此时node2和node3会认为node1宕机，就会重新选主</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b6413be773.png"/></div></div><ul><li>当node3当选后，集群继续对外提供服务，node2和node3自成一个集群，node1自成一个集群。这两个集群数据不同步，出现数据差异</li><li>当网络恢复后，因为急群众有两个master节点，集群状态的不一致，会出现脑裂的情况</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b6434d0484.png"/></div></div><ul><li>解决脑裂的方案是，要求选品超过<code>( eligible节点数量 + 1 ）/ 2</code>才能当选为主，因此eligible节点数量最好是奇数。对应配置项是discovery.zen.minimum_master_nodes，在es7.0以后，已经成为默认配置，因此一般不会发生脑裂问题</li></ul><p>例如：3个节点形成的集群，选票必须超过 （3 + 1） / 2 ，也就是2票。node3得到node2和node3的选票，当选为主。node1只有自己1票，没有当选。集群中依然只有1个主节点，没有出现脑裂。</p><h3 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h3><ul><li>master eligible节点的作用是什么？<ul><li>参与集群选主</li><li>主节点可以管理集群状态、管理分片信息、处理创建和删除索引库的请求</li></ul></li><li>data节点的作用是什么？<ul><li>数据的CRUD</li></ul></li><li>coordinating节点的作用是什么？<ul><li>路由请求到其他节点</li><li>合并查询到的结果，返回给用户</li></ul></li></ul><h2 id="集群分布式存储"><a href="#集群分布式存储" class="headerlink" title="集群分布式存储"></a>集群分布式存储</h2><ul><li>当新增文档时，应该保存到不同分片，保证数据均衡，那么coordinating node如何确定数据该存储到哪个分片呢？</li><li>ES会通过hash算法来计算文档应该存储到哪个分片</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">shard</span> <span class="operator">=</span> hash(_routing) % number_of_shards</span><br></pre></td></tr></table></figure><ul><li>说明：_routing默认是文档的id，算法与分片数量有关，因此索引库一旦创建，分片数量不能修改</li><li>新增文档的流程如下</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b6cd852512.png"/></div></div><ul><li>解读<ol><li>新增一个id=1的文档</li><li>对id做hash运算，假如得到的是2，则应该存储到shard-2</li><li>shard-2的主分片在node3节点，将数据路由到node3</li><li>保存文档</li><li>同步给shard-2的副本replica-2，在node2节点</li><li>返回结果给coordinating-node节点</li></ol></li></ul><h2 id="集群分布式查询"><a href="#集群分布式查询" class="headerlink" title="集群分布式查询"></a>集群分布式查询</h2><ul><li>ES的查询分成两个阶段<ol><li>scatter phase：分散阶段，coordinating node会把请求分发到每一个分片</li><li>gather phase：聚集阶段，coordinating node汇总data node的搜索结果，并处理为最终结果集返回给用户</li></ol></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img.picui.cn/free/2024/07/08/668b6d2f63287.png"/></div></div><h2 id="集群故障转移"><a href="#集群故障转移" class="headerlink" title="集群故障转移"></a>集群故障转移</h2><ul><li>集群的master节点会监控集群中的节点状态，如果发现有节点宕机，会立即将宕机节点的分片数据迁移到其它节点，确保数据安全，这个叫做故障转移。</li></ul><ol><li>例如一个集群结构如图：</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mJRAo"/></div></div><ul><li>现在，node1是主节点，其它两个节点是从节点。</li></ul><ol><li>突然，node1发生了故障：</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mJabI"/></div></div><ul><li>宕机后的第一件事，需要重新选主，例如选中了node2：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mJCCi"/></div></div><ul><li>node2成为主节点后，会检测集群监控状态，发现：shard-1、shard-0没有副本节点。因此需要将node1上的数据迁移到node2、node3：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://t.tutu.to/img/mJIJJ"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识ElasticSearch&quot;&gt;&lt;a href=&quot;#初识ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;初识ElasticSearch&quot;&gt;&lt;/a&gt;初识ElasticSearch&lt;/h1&gt;&lt;h2 id=&quot;了解ES&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://andyh0824.github.io/posts/b543ced0.html"/>
    <id>https://andyh0824.github.io/posts/b543ced0.html</id>
    <published>2024-05-07T11:50:10.000Z</published>
    <updated>2024-05-07T12:51:24.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始MQ"><a href="#初始MQ" class="headerlink" title="初始MQ"></a>初始MQ</h1><h2 id="同步和异步通讯"><a href="#同步和异步通讯" class="headerlink" title="同步和异步通讯"></a>同步和异步通讯</h2><ul><li><p>微服务间通讯有同步和异步两种方式</p><ul><li>同步通讯：就像打电话，需要实时响应，而且通话期间，不能响应其他电话，当有其他人给你打电话时，就容易错失<code>良机</code>。时效性强</li><li>异步通讯：就像发邮件，QQ/微信聊天，不需要马上回复，可以同时和几个人聊天，支持多线操作，<code>时间</code>管理的必备技能。时效性弱</li></ul></li><li><p>两种方式各有优劣，打电话可以立即得到响应，但是却不能与多个人同时通话，发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟</p></li></ul><h3 id="同步通讯"><a href="#同步通讯" class="headerlink" title="同步通讯"></a>同步通讯</h3><ul><li><p>我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但是存在一些问题。订单服务，存储服务，短信服务是和我们的支付服务耦合在一起的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PaymentService</span><span class="params">()</span> &#123;</span><br><span class="line">    orderService.doSth();</span><br><span class="line">    storageService.doSth();</span><br><span class="line">    messageService.doSth();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例如产品经理，让加一个业务，然后你就需要去支付服务中改动代码，让你删除某个服务，也需要去支付服务中改动代码，耦合度太高了</p></li><li><p>同时，性能也是一个问题，例如支付服务需要50ms，另外三个服务各需要150ms，那么一个完整的支付服务就需要恐怖的0.5s，也就是一秒只能完成两个请求，这么低的并发，不行的。</p></li><li><p>支付服务在等待订单服务完成的时候，也在占用着CPU和内存，却啥也不干，浪费系统资源。</p></li><li><p>假如这时仓储服务还挂掉了，那么请求就会卡在这里，如果积压了很多请求，支付服务就会将系统资源耗尽，从而整个支付服务都挂掉了</p></li><li><p>综上所述，同步调用存在以下问题</p><ol><li>耦合度高：每次加入新的请求，都需要修改原来的代码</li><li>性能下降：调用者需要等待服务提供者响应，如果调用链过长，则响应时间等于每次调用服务的时间之和</li><li>浪费资源：调用链中的每个服务在等待响应过程中，不能释放请求占用资源，高并发场景下会极度浪费系统资源</li><li>级联失败：如果服务提供者出现问题，那么调用方都会跟着出现问题，就像多米诺骨牌一样，迅速导致整个微服务故障</li></ol></li></ul><h3 id="异步通讯"><a href="#异步通讯" class="headerlink" title="异步通讯"></a>异步通讯</h3><ul><li><p>异步调用可以避免上述问题</p><ul><li>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货</li><li>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</li><li>订单服务和物流服务是事订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己的业务即可</li></ul></li><li><p>为了接触事件发布者与订阅者之间的耦合，两者并不是直接通信，而是由一个中间人（Broker）来代理。发布者发布事件到Broker，不关心谁来订阅的事件，而订阅者从Broker订阅事件，不关心是谁发布的事件</p></li><li><p>那么此时产品经理让你添加一个新服务时，你只需要让新服务来订阅事件就好了，而取消一个服务，也只需要让其取消订阅事件，并不需要修改订单服务，这样就解决了服务之间的耦合</p></li><li><p>同时也能带来性能的提升，之前我们完成一个支付服务，需要耗时150ms，而现在支付服务只需要向Broker发布一个支付成功的事件，剩下的就不用它管了，这样只需要60ms就能完成支付服务。</p></li><li><p>服务没有强依赖，不用担心级联失败的问题。在之前，如果仓库服务挂掉了，那么支付服务无法完成，占用资源。此时更多的请求过来，支付服务就会耗尽系统资源，从而整个支付服务都瘫痪了。但是现在，仓储服务就算挂掉了，也丝毫不会影响我们的支付服务，同时支付服务也不需要等待存储服务完成，期间也不会占用无意义的系统资源。</p></li><li><p>流量削峰：不管发布事件的流量波动多大，都有Broker接收，订阅者可以按照自己的速度去处理事件。</p></li><li><p>我们发现整个异步通讯过程中，所有东西都是依赖于Broker来实现的，那么如果Broker挂掉了，整个微服务也完蛋了。</p></li><li><p>异步通讯的优点</p><ul><li>耦合度低</li><li>吞吐量提升</li><li>故障隔离</li><li>流量削峰</li></ul></li><li><p>异步通讯的缺点</p><ul><li>依赖于Broker的可靠性、安全性、吞吐能力</li><li>架构复杂时，业务没有明确的流程线，不好追踪管理（出了bug也不好找）</li></ul></li><li><p>好在现在开源平台上的Broker的软件时非常成熟的，比较常见的一种就是我们这里要学习的MQ技术。</p></li></ul><h2 id="技术对比"><a href="#技术对比" class="headerlink" title="技术对比"></a>技术对比</h2><ul><li><p>MQ（MessageQueue）中文是消息队列，字面意思就是存放消息的队列，也就是事件驱动中的Broker</p></li><li><p>比较常见的MQ实现</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RockerMQ</li><li>Kafka</li></ul></li><li><p>几种常见的MQ对比</p></li></ul><div class="table-container"><table><thead><tr><th></th><th>RabbitMQ</th><th>ActiveMQ</th><th>RockerMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table></div><ul><li>追求可用性：Kafka、RockerMQ、RabbitMQ</li><li>追求可靠性：RabbitMQ、RockerMQ</li><li>追求吞吐能力：RockerMQ、Kafka</li><li>追求消息低延迟：RabbitMQ、Kafka</li></ul><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><ul><li>这里是在CentOS7虚拟机中使用Docker安装的</li><li>拉取镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure><ul><li>使用docker images查看是否已经成功拉取，之后启动一个RabbitMQ容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -e RABBITMQ_DEFAULT_USER=root \</span><br><span class="line">  -e RABBITMQ_DEFAULT_PASS=root \</span><br><span class="line">  --name mq \</span><br><span class="line">  --hostname mq1 \</span><br><span class="line">  -p 15672:15672 \</span><br><span class="line">  -p 5672:5672 \</span><br><span class="line">  -d \</span><br><span class="line">  rabbitmq:3-management</span><br></pre></td></tr></table></figure><ul><li>其中：两个环境变量分别配置登录用户和密码，15672是RabbitMQ的管理平台的端口，5672实时将来做消息通信的端口</li><li><p>容器启动成功之后，我们输入<code>虚拟机ip:15672</code>访问RabbitMQ的管理平台</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/Alr57xlO.png"/></div></div></li><li><p>RabbitMQ中的一些角色：</p><ul><li>publisher：生产者</li><li>consumer：消费者</li><li>exchange：交换机、负责消息路由</li><li>queue：队列，存储消息</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/4eBOnFia.png"/></div></div></li></ul></li></ul><h2 id="RabbitMQ消息类型"><a href="#RabbitMQ消息类型" class="headerlink" title="RabbitMQ消息类型"></a>RabbitMQ消息类型</h2><ul><li><p>RabbitMQ官方提供了5个不同的Demo实例，对应了不同的消息模型</p><ol><li>基本消息类型（BasicQueue）</li><li>工作消息队列（WorkQueue）</li></ol><ul><li>启动发布订阅（Publish、Subscribe），又根据交换机类型不同，分为三种<ol><li>广播（Fanout Exchange）</li><li>路由（Direct Exchange）</li><li>主题（Topic Exchange）</li></ol></li></ul></li></ul><h2 id="导入demo工程"><a href="#导入demo工程" class="headerlink" title="导入demo工程"></a>导入demo工程</h2><ul><li>包括三部分：<br>mq-demo：父工程，管理项目依赖<br>publisher：消息的发送者<br>consumer：消息的消费者</li></ul><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><blockquote><p>RabbitMQ是一个消息代理：它接受和转发消息。您可以把它想象成一个邮局：当你将要投寄的邮寄放入邮箱时，您可以确定邮递员最终会将邮件投递给您的收件人。在这个类比中，RabbitMQ是一个邮箱、一个邮局和一个邮递员。<br>RabbitMQ和邮局之间的主要区别在于它不处理纸张，而是接受、存储和转发<code>二进制</code>数据库块——消息。</p></blockquote><ul><li>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：<ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/w1zuH73d.png"/></div></div></li></ul></li></ul><h3 id="pbulisher实现"><a href="#pbulisher实现" class="headerlink" title="pbulisher实现"></a>pbulisher实现</h3><ol><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>发送消息</li><li>关闭连接和Channel</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.声明队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="consumer实现"><a href="#consumer实现" class="headerlink" title="consumer实现"></a>consumer实现</h3><ol><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>订阅消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.声明队列，声明一个队列是幂等的——只有当它不存在时才会被创建，我们在这里再次声明队列可以防止队列为null</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这种写法，看着就很麻烦，其中设置连接参数时，和我们之前学JDBC一样，手动在代码中设置连接四要素，但是后来我们数据库的连接参数都是写在yml文件中来简化代码的，这里同理，所以我们继续往下学SpringAMQP</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>基本消息队列的消息发送流程</p><ol><li>建立connection</li><li>创建channel</li><li>使用channel声明队列</li><li>使用channel向队列发送消息</li></ol></li><li><p>基本消息队列的消息接收流程</p><ol><li>建立connection</li><li>创建channel</li><li>使用channel声明队列</li><li>定义consumer的消费行为handleDelivery（），也就是接收到消息后要执行的业务逻辑</li><li>利用channel将消费者与队列绑定</li></ol></li></ul><h1 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h1><ul><li><p>SpringAMQP官方地址：<code>https://spring.io/projects/spring-amqp</code>， 它是基于RabbitMQ封装的一套模板，提供了模板来发送和接收消息。包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现，并且利用SpringBoot对其实现了自动装配，使用起来十分方便</p></li><li><p>AMQP(Advanced Message Queuing Portocol)，是用于在应用程序指甲你传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求</p></li><li><p>SpringAMQP提供了三个功能</p><ol><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息(之前在Redis中我们也接触过RedisTemplate)</li></ol></li></ul><h2 id="Basic-Queue"><a href="#Basic-Queue" class="headerlink" title="Basic Queue"></a>Basic Queue</h2><ul><li>在父工程mq-demo中引入依赖  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><ul><li><p>首先配置MQ地址，在publisher服务的application.yml中添加配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.128</span><span class="number">.130</span> <span class="comment">## 主机名</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">5672</span> <span class="comment">#端口</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span> <span class="comment">## 用户名</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span> <span class="comment">## 密码</span></span><br><span class="line">        <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment">## 虚拟主机</span></span><br></pre></td></tr></table></figure></li><li><p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送，如果没有创建simple.queue，可以在RabbitMQ管理平台</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, SpringAMQP! &quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息接收"><a href="#消息接收" class="headerlink" title="消息接收"></a>消息接收</h3><ul><li>刚刚我们已经完成了消息的发送，那么现在我们来完成消息的监听</li><li><p>首先配置MQ地址，在consumer服务的application.yml中添加配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.128</span><span class="number">.130</span> <span class="comment">## 主机名</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">5672</span> <span class="comment">#端口</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span> <span class="comment">## 用户名</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span> <span class="comment">## 密码</span></span><br><span class="line">        <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment">## 虚拟主机</span></span><br></pre></td></tr></table></figure></li><li><p>消费者要做的事情是监听消息，Spring已经帮我们跟MQ建立了连接，所以消费者只需要关心要监听哪个队列，以及监听到队列了，要干什么事儿</p></li><li><p>在consumer服务新建一个类，编写消费逻辑，其中<code>@Component</code>注解是将该类声明为一个Bean，这样Spring才能找到它，然后使用<code>@RabbitListener</code>注解声明要监听的队列，msg参数就是接收到的消息，我们可以在方法体内编写对消息的处理逻辑，但这里只是简单的输出了一下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动consumer服务，控制台可以看到接收到的消息，并且如果多次使用publisher服务发送消息，consumer服务也会接收多次消息，表现为控制台也输出多次语句</p>  <figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Spring 消费者接收到消息：【Hello, SpringAMQP! 】</span><br><span class="line">Spring 消费者接收到消息：【Hello, SpringAMQP! 】</span><br></pre></td></tr></table></figure></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>SpringAMQP如何接收消息？<ul><li>引入amqp的starter依赖</li><li>配置RabbitMQ地址</li><li>定义类，添加@Component注解</li><li>类中声明方法，添加<code>@RabbitListener</code>注解，方法参数就时消息</li></ul></li></ul><blockquote><p>注意：消息一旦消费就会从队列删除，RabbitMQ没有消息回溯功能</p></blockquote><h2 id="Wrok-Queue"><a href="#Wrok-Queue" class="headerlink" title="Wrok Queue"></a>Wrok Queue</h2><ul><li><code>Work Queue</code>，也被称为(Task queues)，任务模型。简单来说就是<code>让多个消费者绑定到一个队列，共同消费队列中的信息。</code></li><li>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度，长此以往，消息就会堆积的越来越多，无法及时处理。</li><li>此时就可以使用<code>Work模型</code>，多个消费者共同处理消息，那么处理速度就能大大提高了  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/CAyzUSJL.png"/></div></div></li></ul><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><ul><li>这次我们循环发送消息，模拟大量消息堆积的场景</li><li>在publisher服务中的SpringAmqpTest类中新增测试方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello, SpringAMQP! __ &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 循环发送50条消息，带上消息编号</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        <span class="comment">// 休眠20ms，模拟在1s内发送完</span></span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息接收-1"><a href="#消息接收-1" class="headerlink" title="消息接收"></a>消息接收</h3><ul><li>要模拟多个消费者绑定同一个队列，我们在<code>consumer</code>服务的<code>SpringRabbitListener</code>中添加两个方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueueMessage1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1 接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalDateTime.now());</span><br><span class="line">    <span class="comment">// 休眠20ms，1s大致能处理50条消息</span></span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueueMessage2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalDateTime.now());</span><br><span class="line">    <span class="comment">// 休眠200ms，1s大概能处理5条消息</span></span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li><p>启动<code>consumer</code>服务后，执行<code>publisher</code>服务中刚编写的测试方法，发送50条消息，查看控制台输出</p>  <figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">1】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">407</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">2】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">414</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">4】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">461</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">6】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">502</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">8】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">549</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">10】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">592</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">3】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">609</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">12】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">635</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">14】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">680</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">16】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">722</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">18】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">767</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">5】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">811</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">20】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">813</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">22】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">858</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">24】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">902</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">26】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">944</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">28】2022-12</span>-<span class="number">23T13:16:41</span>.<span class="number">990</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">7】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">013</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">30】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">035</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">32】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">078</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">34】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">122</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">36】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">165</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">38】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">210</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">9】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">215</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">40】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">256</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">42】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">300</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">44】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">343</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">46】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">387</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">11】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">416</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">48】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">431</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">50】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">473</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">13】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">617</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">15】2022-12</span>-<span class="number">23T13:16:42</span>.<span class="number">819</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">17】2022-12</span>-<span class="number">23T13:16:43</span>.<span class="number">021</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">19】2022-12</span>-<span class="number">23T13:16:43</span>.<span class="number">224</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">21】2022-12</span>-<span class="number">23T13:16:43</span>.<span class="number">425</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">23】2022-12</span>-<span class="number">23T13:16:43</span>.<span class="number">626</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">25】2022-12</span>-<span class="number">23T13:16:43</span>.<span class="number">827</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">27】2022-12</span>-<span class="number">23T13:16:44</span>.<span class="number">027</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">29】2022-12</span>-<span class="number">23T13:16:44</span>.<span class="number">229</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">31】2022-12</span>-<span class="number">23T13:16:44</span>.<span class="number">431</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">33】2022-12</span>-<span class="number">23T13:16:44</span>.<span class="number">634</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">35】2022-12</span>-<span class="number">23T13:16:44</span>.<span class="number">837</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">37】2022-12</span>-<span class="number">23T13:16:45</span>.<span class="number">040</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">39】2022-12</span>-<span class="number">23T13:16:45</span>.<span class="number">240</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">41】2022-12</span>-<span class="number">23T13:16:45</span>.<span class="number">444</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">43】2022-12</span>-<span class="number">23T13:16:45</span>.<span class="number">646</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">45】2022-12</span>-<span class="number">23T13:16:45</span>.<span class="number">846</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">47】2022-12</span>-<span class="number">23T13:16:46</span>.<span class="number">048</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">49】2022-12</span>-<span class="number">23T13:16:46</span>.<span class="number">250</span></span><br></pre></td></tr></table></figure></li><li><p>可以看到消费者1很快就完成了自己的25条消息，消费者2却在缓慢的处理自己的25条消息</p></li><li>也就是说当前的处理方式是平均分配给每个消费者，并没有按照我们设定的处理能力来处理消息，这样显然是有问题的，消费者2很大概率会出现消息积压的风险</li></ul><h3 id="能者多劳"><a href="#能者多劳" class="headerlink" title="能者多劳"></a>能者多劳</h3><ul><li><p>在spring中有一个简单的配置，可以解决这个问题。我们修改<code>consumer</code>服务中的<code>application.yml</code>文件，添加如下配置</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">listener:</span></span><br><span class="line">        <span class="attr">simple:</span></span><br><span class="line">            <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment">## 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure></li><li><p>重启服务，查看控制台输出</p>  <figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">1】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">252</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">2】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">262</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">3】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">284</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">4】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">307</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">5】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">331</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">6】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">354</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">7】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">377</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">8】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">399</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">9】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">422</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">10】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">444</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">11】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">464</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">12】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">486</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">13】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">509</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">14】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">533</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">15】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">559</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">16】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">583</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">17】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">606</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">18】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">630</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">19】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">653</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">20】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">668</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">21】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">687</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">22】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">710</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">23】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">732</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">24】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">755</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">25】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">777</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">26】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">801</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">27】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">825</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">28】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">847</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">29】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">871</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">30】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">885</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">31】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">908</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">32】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">930</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">33】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">955</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">34】2022-12</span>-<span class="number">23T13:37:15</span>.<span class="number">977</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">35】2022-12</span>-<span class="number">23T13:37:16</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">36】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">021</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">37】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">043</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">38】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">065</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">39】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">087</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">40】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">107</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">41】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">130</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">42】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">153</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">43】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">174</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">44】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">197</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">45】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">219</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">46】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">242</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">47】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">264</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">48】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">286</span></span><br><span class="line">消费者<span class="number">1</span> 接收到消息：【Hello, SpringAMQP! __ <span class="number">49】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">310</span></span><br><span class="line">消费者<span class="number">2</span>........接收到消息：【Hello, SpringAMQP! __ <span class="number">50】2022-12</span>-<span class="number">23T13:37:16</span>.<span class="number">330</span></span><br></pre></td></tr></table></figure></li><li><p>这次处理消息的比例差不多就是10:1了，能者多劳</p></li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>Wrok模型的使用：<ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置<code>prefetch</code>来控制消费者预取的消息数量</li></ul></li></ul><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><ul><li><p>发布订阅的模型如图</p></li><li><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发送给exchange(交换机)</li><li><p>Exchange：交换机。一方面，接收生产者发送的消息；另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或者是将消息对其。到底如何操作，取决于Exchange的类型。Exchange有以下三种类型</p><ol><li><code>Fanout</code>：广播，将消息交给所有绑定到交换机的队列</li><li><code>Direct</code>：定向，把消息交给符合指定routing key的队列</li><li><code>Topic</code>：通配符，把消息交给符合routing pattern(路由模式)的队列</li></ol></li><li><p>Consumer：消费者，与以前一样，订阅队列，没有变化</p></li><li>Queue：消息队列也与之前一样，接收消息，缓存消息</li></ul></li></ul><blockquote><p>Exchange(交换机)只负责转发消息，不具备存储消息的能力。因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p></blockquote><h2 id="Fanout"><a href="#Fanout" class="headerlink" title="Fanout"></a>Fanout</h2><ul><li><p>Fanout直译是扇出，但是在MQ中叫<code>广播</code>更合适</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/ZUsax73E.png"/></div></div></li><li><p>在广播模式下，消息发送流程是这样的</p><ol><li>可以存在多个队列</li><li>每个队列都要绑定到Exchange(交换机)</li><li>生产者发送消息，只能发送到交换机，交换机来决定要发给哪个队列，而不是生产者来决定</li><li>交换机把消息发送给绑定过的所有队列</li><li>订阅队列的消费者都能拿到消息</li></ol></li></ul><h3 id="声明队列和交换机"><a href="#声明队列和交换机" class="headerlink" title="声明队列和交换机"></a>声明队列和交换机</h3><ul><li><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/P9q3PmeG.png"/></div></div></li><li><p>在consumer中创建一个类，声明队列和交换机</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 声明交换机</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 第1个队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 绑定第1个队列和交换机</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue queue1, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 第2个队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Queue <span class="title function_">queue2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 绑定第2个队列和交换机</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue queue2, FanoutExchange fanoutExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息发送-1"><a href="#消息发送-1" class="headerlink" title="消息发送"></a>消息发送</h3><ul><li>在<code>publisher</code>服务的<code>SpringAmqpTest</code>类中添加测试方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;exchange&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello Everyone~&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息接收-2"><a href="#消息接收-2" class="headerlink" title="消息接收"></a>消息接收</h3><ul><li><p>在<code>consumer</code>服务的<code>SpringRabbitListener</code>中添加两个方法作为消费者</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1收到广播消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2收到广播消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启<code>consumer</code>服务，运行<code>publisher</code>中新编写的测试方法，控制台输出如下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">消费者<span class="number">1</span>收到广播消息：【Hello Everyone~】</span><br><span class="line">消费者<span class="number">2</span>收到广播消息：【Hello Everyone~】</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><p>交换机的作用是什么？</p><ol><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange会将消息路由到每个绑定的队列</li></ol></li><li><p>声明队列、交换机、绑定关系的Bean是什么？</p><ul><li><code>Queue</code></li><li><code>FanoutExchange</code></li><li><code>Binding</code></li></ul></li></ul><h2 id="Direct"><a href="#Direct" class="headerlink" title="Direct"></a>Direct</h2><ul><li><p>在<code>Fanout</code>模式中，一条消息，会被所有订阅的队列都消费，但是在某些场景下，我们希望不同的消息被不同的队列消费，这时就要用到Direct类型的Exchange</p></li><li><p>在<code>Direct</code>模型下</p><ul><li>队列与虚拟机绑定，不能是任意绑定了，而是需要指定一个<code>RoutingKey</code>(路由key)</li><li>消息的发送方在向Exchange发送消息时，也必须指定消息的<code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>RoutingKey</code>进行判断，只有队列的RoutingKey与消息的RoutingKey<code>完全一致</code>，才会收到消息</li></ul></li></ul><blockquote><p>案例需求如下：</p><ol><li>路由<code>RabbitListener</code>声明<code>Exchange</code>、<code>Queue</code>、<code>RoutingKey</code></li><li>在<code>consumer</code>服务中，编写两个消费者方法，分别监听<code>direct.queue1</code>和<code>direct.queue2</code></li><li>在<code>publisher</code>中编写测试方法，向<code>directExchange</code>发送消息</li></ol></blockquote><h3 id="基于注解声明队列和交换机"><a href="#基于注解声明队列和交换机" class="headerlink" title="基于注解声明队列和交换机"></a>基于注解声明队列和交换机</h3><ul><li><p>基于Bean的方式声明队列与交换机比较麻烦，所以Spring还提供了基于<code>注解方式</code>来声明（Spring 永远滴神）</p></li><li><p>在<code>consumer</code>的<code>SpringRabbitListener</code>中添加两个消费者，同时基于注解来声明队列和交换机</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;directExchange&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;Apex&quot;, &quot;DeepRock&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;directExchange&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;Apex&quot;, &quot;Terraria&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息发送-2"><a href="#消息发送-2" class="headerlink" title="消息发送"></a>消息发送</h3><ul><li>在<code>publisher</code>服务的<code>SpringAmqpTest</code>类中添加测试方法</li></ul><div class="tabs" id="消息发送"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="消息发送-1">Apex</button><button type="button" class="tab " data-href="消息发送-2">DeepRock</button><button type="button" class="tab " data-href="消息发送-3">Terraria</button></ul><div class="tab-contents"><div class="tab-item-content active" id="消息发送-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;打派派，上号&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;Apex&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="消息发送-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Rock And Stone，上号&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;DeepRock&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="消息发送-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;今晚打猪鲨，上号&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;Terraria&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><ul><li>运行以上三个测试方法，控制台输出如下  <figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">消费者收到<span class="keyword">direct</span>.queue2的消息：【打派派，上号】</span><br><span class="line">消费者收到<span class="keyword">direct</span>.queue1的消息：【打派派，上号】</span><br><span class="line">消费者收到<span class="keyword">direct</span>.queue1的消息：【Rock And Stone，上号】</span><br><span class="line">消费者收到<span class="keyword">direct</span>.queue2的消息：【今晚打猪鲨，上号】</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li><p><code>Direct</code>交换机与<code>Fanout</code>交换机的差异？</p><ul><li><code>Fanout</code>交换机将信息路由给每一个与之绑定的队列</li><li><code>Direct</code>交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的<code>RoutingKey</code>，则与<code>Fanout</code>功能类似，路由给每一个路由匹配的队列</li></ul></li><li><p>基于<code>@RabbitListener</code>注解声明队列和交换机有哪些常见的注解？</p><ul><li><code>@QueueBinding</code></li><li><code>@Queue</code></li><li><code>@Exchange</code></li></ul></li></ul><h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><p>Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列，只不过Topic类型的Exchange可以rag队列绑定Routing Key的时候使用通配符</p></li><li><p>Routing Key一般都是由一个或多个单词组成，多个单词间以.分割，例如<code>item.insert</code></p></li><li><p>通配符规则</p><ul><li><code>#</code>：匹配一个或多个词</li><li><code>*</code>：仅匹配一个词</li></ul></li></ul><blockquote><p>举例：</p><ul><li><code>item.#</code>：能够匹配<code>item.kyle.violet</code>或者<code>item.kyle</code></li><li><code>item.*</code>：只能匹配<code>item.kyle</code>或者<code>item.violet</code>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/bek7vrnq.png"/></div></div></li></ul></blockquote><ul><li>解释<ul><li>Queue1绑定的是<code>china.#</code>，因此凡是以<code>china.</code>开头的Routing Key都会被匹配到，包括<code>china.news</code>和<code>china.weather</code><br>Queue2绑定的是<code>#.news</code>，因此凡是以<code>.news</code>结尾的Routing Kye都会被匹配到，包括<code>china.news</code>和<code>japan.news</code></li></ul></li></ul><blockquote><p>案例需求如下图<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/aoFmbeLP.png"/></div></div></p><ol><li>利用<code>@RabbitListener</code>声明<code>Exchange</code>、<code>Queue</code>、<code>RoutingKey</code></li><li>在<code>consumer</code>服务中，编写两个消费者方法，分别监听<code>topic.queue1</code>和<code>topic.queue2</code></li><li>在<code>publisher</code>中编写测试方法，向<code>topic</code>发送消息</li></ol></blockquote><h3 id="消息发送-3"><a href="#消息发送-3" class="headerlink" title="消息发送"></a>消息发送</h3><ul><li>在<code>publisher</code>服务的<code>SpringAmqpTest</code>类中添加测试方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;如何看待马化腾称「短视频会侵蚀游戏时间」，「腾讯游戏要聚焦精品」?&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消息接收-3"><a href="#消息接收-3" class="headerlink" title="消息接收"></a>消息接收</h3><ul><li><p>在<code>consumer</code>服务的<code>SpringRabbitListener</code>中添加方法，一个队列通配符为<code>china.#</code>，一个队列通配符为<code>#.news</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">        key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启<code>consumer</code>服务，运行<code>publisher</code>服务中编写的测试方法，控制台输出如下</p>  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">消费者接收到topic.queue2的消息：【如何看待马化腾称「短视频会侵蚀游戏时间」，「腾讯游戏要聚焦精品」<span class="string">?】</span></span><br><span class="line">消费者接收到topic.queue1的消息：【如何看待马化腾称「短视频会侵蚀游戏时间」，「腾讯游戏要聚焦精品」<span class="string">?】</span></span><br></pre></td></tr></table></figure></li><li><p>修改测试方法，并运行</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;今 天 也 是 个 emo 的 好 天 气&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.weather&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制台输出如下</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消费者接收到topic.queue1的消息：【今 天 也 是 个 emo 的 好 天 气】</span><br></pre></td></tr></table></figure></li><li><p>修改测试方法，并运行</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTopicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;自由美利坚，枪击每一天&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;us.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制台输出如下</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">消费者接收到topic.queue2的消息：【自由美利坚，枪击每一天】</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><ul><li><code>Direct</code>交换机与<code>Topic</code>交换机的差异？<ul><li><code>Topic</code>交换机接收的消息<code>Routing Key</code>必须是多个单词，以.分隔</li><li><code>Topic</code>交换机与队列绑定时的<code>binding key</code>可以指定通配符<ul><li><code>#</code>：表示0个或多个单词</li><li><code>*</code>：仅表示1个单词</li></ul></li></ul></li></ul><h2 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h2><ul><li><p>之前说过，Spring会把发送的消息序列化为字节发送给MQ，接收消息的时候，会将字节反序列化为Java对象</p></li><li><p>但是默认情况下，Spring采用的序列化方式是JDK序列化，众所周知，<code>JDK序列化</code>存在以下问题</p><ol><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ol></li></ul><h3 id="测试默认转换器"><a href="#测试默认转换器" class="headerlink" title="测试默认转换器"></a>测试默认转换器</h3><ul><li><p>停止<code>consumer</code>服务，修改测试方法，发送一个Map对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hashMap.put(<span class="string">&quot;名称&quot;</span>, <span class="string">&quot;艾尔登法环&quot;</span>);</span><br><span class="line">    hashMap.put(<span class="string">&quot;价格&quot;</span>, <span class="number">299</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(queueName, hashMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在RabbitMQ的管理平台来看看我们发送的东西被序列化成什么了，啥也看不懂啊，我老头环呢</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/smAMFFCP.png"/></div></div></li></ul><h3 id="配置JSON转换器"><a href="#配置JSON转换器" class="headerlink" title="配置JSON转换器"></a>配置JSON转换器</h3><ul><li><p>显然，JDK序列化方式并不合适，我们希望消息的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化</p></li><li><p>那么这就需要我们在<code>publisher</code>和<code>consumer</code>两个服务中引入依赖（或者直接在父工程mq-demo中引入依赖，我就这么干的）</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后在<code>publisher</code>和<code>consumer</code>的启动类中都添加一个<code>Bean</code>即可</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">publis MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后再次执行测试方法，这次就能正常显示老头环了</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/07/aq90tZGe.png"/></div></div></li><li><p>修改consumer服务的SpringRabbitListener，添加方法，并重启服务</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(HashMap&lt;String, Object&gt; msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：<code>consumer</code>和<code>publisher</code>的序列化器需保持一致，同时<code>consumer</code>中接收数据的类型，也需要和发送数据的类型保持一致。例如上面的例子中都是用的<code>HashMap&lt;String, Object&gt;</code></p></blockquote><ul><li>控制台也正常输出  <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">消费者接收到消息：【</span><span class="template-variable">&#123;名称=艾尔登法环, 价格=299&#125;</span><span class="language-xml">】</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>对于RabbitMQ的学习就先告一段落了，后期需要的话，再继续学死信队列、延迟队列</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初始MQ&quot;&gt;&lt;a href=&quot;#初始MQ&quot; class=&quot;headerlink&quot; title=&quot;初始MQ&quot;&gt;&lt;/a&gt;初始MQ&lt;/h1&gt;&lt;h2 id=&quot;同步和异步通讯&quot;&gt;&lt;a href=&quot;#同步和异步通讯&quot; class=&quot;headerlink&quot; title=&quot;同步和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://andyh0824.github.io/posts/f5f9fa9b.html"/>
    <id>https://andyh0824.github.io/posts/f5f9fa9b.html</id>
    <published>2024-05-05T11:50:10.000Z</published>
    <updated>2024-05-07T08:37:38.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Docker"><a href="#初识Docker" class="headerlink" title="初识Docker"></a>初识Docker</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><ul><li>微服务似然具备各种各样的优势，但是服务的拆分通常给部署带来了很大的麻烦<ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时，往往会产生一些冲突</li><li>在数百、数千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul></li></ul><h3 id="应用部署的环境问题"><a href="#应用部署的环境问题" class="headerlink" title="应用部署的环境问题"></a>应用部署的环境问题</h3><ul><li><p>大型项目组件比较多，运行环境也比较复杂，部署时会碰到一些问题</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/Rkk3GXbF.png"/></div></div></li></ul></li><li><p>例如一个项目中，部署时需要依赖node.js、Redis、RabbitM、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，审核会有冲突，给部署带来了极大的困难</p></li></ul><h3 id="Docker解决依赖兼容问题"><a href="#Docker解决依赖兼容问题" class="headerlink" title="Docker解决依赖兼容问题"></a>Docker解决依赖兼容问题</h3><ul><li>而Docker却巧妙的解决的这些问题，那么Docker是如何实现的呢？</li><li><p>Docker为了解决依赖的兼容问题，采用了两个手段</p><ol><li>将应用的函数库（libs）、依赖（Deps）、配置与应用一起打包</li><li>将每个应用放到一个隔离<code>容器</code>去运行，避免相互干扰<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/oRExesR3.png"/></div></div></li></ol></li><li><p>这样打包好的应用中，既包含了应用本身，也包含了应用所需用到的函数库和依赖，无需在操作系统上安装这些，自然也就不存在不同应用之间的兼容问题了</p></li><li><p>虽然解决了不同应用的兼容问题，但是开发、测试等环节会存在差异，操作系统版本也会有差异，这些问题又该如何解决呢？</p></li></ul><h3 id="Docker解决操作系统环境差异"><a href="#Docker解决操作系统环境差异" class="headerlink" title="Docker解决操作系统环境差异"></a>Docker解决操作系统环境差异</h3><ul><li>要解决不同操作系统环境差异问题，必须先了解操作系统结构，以一个Ubuntu操作系统为例，结构如下<ul><li>系统应用：操作系统本身提供的应用、函数库。这些含数据是对内核指令的封装，使用更加方便</li><li>系统内核：所有Linux发行版本的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供内核指令，用于操作计算机硬件。</li><li>计算机硬件：例如CPU、内存、磁盘等</li></ul></li><li>应用于计算机交互的流程如下<ol><li>应用调用操作系统应用（函数库），实现各种功能</li><li>系统函数库是对内核指令集的封装，会调用内核指令</li><li>内核指令操作计算机硬件</li></ol></li><li>Ubuntu和CentOS都是基于Linux内核，无非是系统应用不同，提供的函数库有差异</li><li>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或不匹配，就会报错</li><li>Docker如何解决不同系统环境的问题？<ul><li>Docker将用户程序所需要的系统（比如Ubuntu）函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<code>打包</code>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<code>隔离</code></li></ul></li><li><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul></li><li>Docker是一个快速交付应用、运行应用的技术，具备以下优势<ol><li>可将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ol></li></ul><h2 id="Docker与虚拟机的区别"><a href="#Docker与虚拟机的区别" class="headerlink" title="Docker与虚拟机的区别"></a>Docker与虚拟机的区别</h2><ul><li><p>Docker可以让一个应用在任何操作系统中都十分方便的运行，而我们以前接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用</p></li><li><p>二者有什么差异呢？</p><ul><li>虚拟机（virtual machine）是在操作系统中<code>模拟</code>硬件设备，然后运行另一个操作系统。例如在Windows系统中运行CentOS系统，就可以运行任意的CentOS应用了</li><li><p>Docker仅仅是封装函数库，并没有模拟完整的操作系统</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/uwKu6rLq.png"/></div></div></li><li><p>对比来看</p></li></ul></li></ul><div class="table-container"><table><thead><tr><th>特性</th><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>性能</td><td>接近原生</td><td>性能较差</td></tr><tr><td>硬盘占用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr></tbody></table></div><ul><li>小结：Docker和虚拟机的差异<ul><li>Docker是一个系统进程；虚拟机是在操作系统中操作系统</li><li>Docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul></li></ul><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><ul><li>Docker中有几个重要的概念<ul><li><code>镜像（Image）</code>：Docker将应用程序及其所需要的依赖、函数库、环境、配置等文件打包在一起，称为镜像</li><li><code>容器（Container）</code>：镜像中的应用程序形成后的进程就是<code>容器</code>，只是Docker会给容器进程做隔离，对外不可见</li></ul></li><li>一切应用最终都是代码组成，都是硬盘中的一个个字节形成的文件，只有运行时，才会加载到内存，形成进程</li><li>而<code>镜像</code>，就是把一个应用在硬盘上的文件、机器运行环境、部分系统函数库文件一起打成包的文件包。这个文件包是只读的（防止你对镜像文件进行修改/污染，从而导致镜像不可用，容器从镜像中拷贝一份文件到自己的空间里来写数据）</li><li>而<code>容器</code>呢，就是把这些文件中编写的程序、函数加载到内存中允许形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/IHfYjN0C.png"/></div></div></li></ul><h3 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h3><ul><li>开源应用程序非常多，打包这些应用往往都是重复性劳动，为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上来共享使用，就像GitHub的代码共享一样<ul><li>DockerHub：DockerHub是一个官方的Docker镜像托管平台，这样的平台称为Docker Registry。</li><li>国内也有类似于DockerHub的公开服务，例如<code>网易云镜像服务</code>、<code>阿里云镜像库</code>等</li></ul></li><li>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像</li></ul><h3 id="Docker架构-1"><a href="#Docker架构-1" class="headerlink" title="Docker架构"></a>Docker架构</h3><ul><li>我们要使用Docker来操作镜像、容器，那就必须安装Docker</li><li>Docker是一个CS架构的程序，由两部分组成<ul><li>服务端（server）：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端（client）：通过命令或RestAPI向Docker服务端发送指令，可以在本地或远程向服务端发送指令<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/Vyfio2aW.png"/></div></div></li></ul></li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li><code>镜像：</code><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul></li><li><code>容器：</code><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul></li><li><code>Docker结构：</code><ul><li>服务端：接受命令或远程请求，操作镜像或容器</li><li>客户端：发送命令或者请求到Docker服务端</li></ul></li><li><code>DockerHub：</code><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul></li></ul><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><ul><li><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p></li><li><p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p></li><li><p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/"><code>安装指南</code></a> ，这里主要介绍 Docker CE 在 CentOS上的安装。</p></li><li><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。</p></li></ul><blockquote><p>CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p></blockquote><h2 id="卸载（可选）"><a href="#卸载（可选）" class="headerlink" title="卸载（可选）"></a>卸载（可选）</h2><ul><li>如果之前安装过旧版本的Docker，可以使用下面命令卸载：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装Docker-1"><a href="#安装Docker-1" class="headerlink" title="安装Docker"></a>安装Docker</h2><ul><li>首先先安装yum工具<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure></li><li>然后更新本地镜像源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 设置Docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><ul><li>然后安装社区版Docker<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><ul><li><p>Docker应用需要用到各种端口，挨个修改防火墙设置很麻烦，所以这里建议直接关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment">## 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure></li><li><p>通过命令启动Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 启动docker服务</span></span><br><span class="line">systemctl start docker </span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止docker服务</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启docker服务</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>然后输入命令，查看docker版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure></li><li><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker -v</span></span><br><span class="line">Docker version 20.10.21, build baeda1f</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><ul><li>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors"><code>https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</code></a></li></ul><h1 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h1><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><h3 id="镜像名称"><a href="#镜像名称" class="headerlink" title="镜像名称"></a>镜像名称</h3><ul><li>首先来看下镜像的名称组成：<ul><li>镜像名称一般分为两部分：[repository]:[tag]<blockquote><p>例如<code>mysql:5.7</code>，这里的mysql就是repository，5.7就是tag，合在一起就是镜像名称，代表5.7版本的MySQL镜像</p></blockquote></li><li>在没有指定tag时，默认是latest，代表最新版本的镜像，例如<code>mysql:latest</code></li></ul></li></ul><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><ul><li>常见的镜像命令如下图<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/UGEKLZmE.png"/></div></div></li></ul><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><ul><li>在这个案例，我们来练习拉取、查看镜像<blockquote><p>需求：从DockerHub中拉取一个Nginx镜像并查看</p></blockquote></li></ul><ol><li><p>首先我们去镜像仓库（例如DockerHub）中搜索Nginx镜像</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/SG4zVLp3.png"/></div></div></li><li><p>根据查看到的镜像名称，拉取自己需要的镜像，通过命令：<code>docker pull nginx</code>拉取最新的nginx镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker pull nginx</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">025c56f98b67: Pull complete </span><br><span class="line">ec0f5d052824: Pull complete </span><br><span class="line">cc9fb8360807: Pull complete </span><br><span class="line">defc9ba04d7c: Pull complete </span><br><span class="line">885556963dad: Pull complete </span><br><span class="line">f12443e5c9f7: Pull complete </span><br><span class="line">Digest: sha256:75263be7e5846fc69cb6c42553ff9c93d653d769b94917dbda71d42d3f3c00d3</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure></li></ol><p>从日志中我们也可以看出，如果不加tag，用的就是默认的latest，也就是拉取最新的docker镜像</p><ol><li>通过命令<code>docker images</code>查看拉取到的镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED      SIZE</span><br><span class="line">nginx        latest    3964ce7b8458   4 days ago   142MB</span><br></pre></td></tr></table></figure></li></ol><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><ul><li>在这个案例中，我们练习保存、导入镜像</li></ul><blockquote><p>需求：利用<code>docker save</code>将nginx镜像导出磁盘，然后通过<code>docker load</code>加载回来</p></blockquote><ol><li><p>利用<code>docker xx --help</code>命令查看<code>docker save</code>和<code>docker load</code>的语法</p><blockquote><ul><li>输入<code>docker save --helo</code>，结果如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker save --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"></span><br><span class="line">Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-o, --output string   Write to a file, instead of STDOUT</span><br></pre></td></tr></table></figure>命令格式：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure><ul><li>输入<code>docker load --help</code>，结果如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker load --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker load [OPTIONS]</span><br><span class="line"></span><br><span class="line">Load an image from a tar archive or STDIN</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">-i, --input string   Read from tar archive file, instead of STDIN</span><br><span class="line">-q, --quiet          Suppress the load output</span><br></pre></td></tr></table></figure>命令格式：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i [镜像压缩文件名]</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote></li><li><p>使用docker save导出镜像到磁盘，随后使用ls命令可以查看到nginx.tar文件</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure><ol><li>使用docker load加载镜像，在此之前，我们使用命令删除本地nginx镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi nginx:latest <span class="comment">## rmi是remove image的缩写</span></span><br></pre></td></tr></table></figure></li></ol><p>随后运行命令，加载本地文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><blockquote><p>需求：去DockerHub中搜索并拉取一个Redis镜像</p><ol><li>去DockerHub中搜索Redis镜像</li><li>查看Redis镜像的名称和版本</li><li>利用<code>docker pull</code>命令拉取镜像</li><li>使用<code>docker save</code>命令，将<code>redis:latest</code>打包成一个<code>redis.tar</code>包</li><li>使用<code>docker rmi</code>删除本地的<code>redis:latest</code></li><li>利用<code>docker load</code>重新加载<code>redis.tar</code>文件</li></ol></blockquote><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><ul><li><p>容器操作命令如图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/XA3l631K.png"/></div></div></li><li><p>容器保护三个状态</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul></li></ul><blockquote><ul><li>暂停和停止的操作系统的处理方式不同，暂停是操作系统将容器内的进程挂起，容器关联的内存暂存起来，然后CPU不再执行这个进程，但是使用<code>unpause</code>命令恢复，内存空间被恢复，程序继续运行</li><li>停止是直接将进程杀死，容器所占的内存回收，保存的仅剩容器的文件系统，也就是那些静态资源</li><li><code>docker rm</code>是将文件系统也彻底删除，也就是将容器彻底删除掉了</li></ul></blockquote><ul><li><code>docker run</code>：创建并运行一个容器，处于运行状态</li><li><code>docker pause</code>：让一个运行的容器暂停</li><li><code>docker unpause</code>：让一个容器从暂停状态恢复运行</li><li><code>docker stop</code>：停止一个运行的容器</li><li><code>docker start</code>：让一个停止的容器再次运行</li><li><code>docker rm</code>：删除一个容器</li></ul><h3 id="案例一-1"><a href="#案例一-1" class="headerlink" title="案例一"></a>案例一</h3><ul><li>创建并运行nginx容器的命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure><ul><li><p>命令解读</p><ul><li><code>docker run</code>：创建并运行一个容器</li><li><code>--name</code>：给容器起一个名字，例如叫做myNginx</li><li><code>-p</code>：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li><code>-d</code>：后台运行容器</li><li><code>nginx</code>：镜像名称，例如nginx</li></ul></li><li><p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口</p></li><li>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx</li><li>现在，容器的80端口和宿主机的80端口关联起来了，当我们访问宿主机的80端口时，就会被映射到容器的80端口，这样就能访问nginx了</li><li>那我们在浏览器输入虚拟机ip:80就能看到nginx默认页面了</li></ul><h3 id="案例二-1"><a href="#案例二-1" class="headerlink" title="案例二"></a>案例二</h3><blockquote><p>需求：进入Nginx容器，修改HTML文件内容，添加<code>Welcome To My Blog!</code><br>提示：进入容器要用到<code>docker exec</code>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker exec --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"></span><br><span class="line">Run a <span class="built_in">command</span> <span class="keyword">in</span> a running container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -d, --detach               Detached mode: run <span class="built_in">command</span> <span class="keyword">in</span> the background</span><br><span class="line">      --detach-keys string   Override the key sequence <span class="keyword">for</span> detaching a container</span><br><span class="line">  -e, --<span class="built_in">env</span> list             Set environment variables</span><br><span class="line">      --env-file list        Read <span class="keyword">in</span> a file of environment variables</span><br><span class="line">  -i, --interactive          Keep STDIN open even <span class="keyword">if</span> not attached</span><br><span class="line">      --privileged           Give extended privileges to the <span class="built_in">command</span></span><br><span class="line">  -t, --<span class="built_in">tty</span>                  Allocate a pseudo-TTY</span><br><span class="line">  -u, --user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class="line">  -w, --workdir string       Working directory inside the container</span><br></pre></td></tr></table></figure></p></blockquote><ol><li><p>进入容器，进入刚刚我们创建好的nginx容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it myNginx bash</span><br></pre></td></tr></table></figure><ul><li>命令解读<ul><li><code>docker exec</code>：进入容器内部，执行一个命令</li><li><code>-it</code>：给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li><li><code>myNginx</code>：要进入容器的名称</li><li><code>bash</code>：进入容器后执行的命令，bash是一个Linux终端交互命令</li></ul></li></ul></li><li><p>进入nginx的HTML所在目录</p><ul><li>容器内部会模拟一个独立的Linux文件系统，看起来就如同一个Linux服务器一样，nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件</li><li>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></li><li><p>我们执行命令进入到该目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure><p>查看目录下文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@310016c9b413:/usr/share/nginx/html<span class="comment">## ls</span></span><br><span class="line">50x.html  index.html</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改index.html的内容</p><ul><li><p>容器内没有vi命令，无法直接修改，我们使用下面的命令来修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#Welcome To My Blog#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在浏览器访问自己的虚拟机ip:80，即可看到结果（80端口可以不写）</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/05/Oc7OoRkE.png"/></div></div></li></ol><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul><li><p><code>docker run</code>命令常见参数有哪些？</p><ul><li><code>--name</code>：指定容器名称</li><li><code>-p</code>：指定端口映射</li><li><code>-d</code>：让容器后台运行</li></ul></li><li><p>查看容器日志的命令</p><ul><li><code>docker logs</code></li><li>添加<code>-f</code>参数可以持续查看日志</li></ul></li><li><p>查看容器状态：</p><ul><li><code>docker ps</code></li><li><code>docker ps -a</code>查看所有容器，包括已停止的</li></ul></li></ul><blockquote><p>现在是不是感觉修改文件好麻烦，因为没给提供vi命令，不能直接编辑，所以这就要用到我们下面说的数据卷了</p></blockquote><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><ul><li><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编译器，修改文件也很麻烦，这就是容器与数据（容器内文件）耦合带来的后果，如果我们另外运行一台新的nginx容器，那么这台新的nginx容器也不能直接使用我们修改好的html文件，具有很多缺点</p><ol><li>不便于修改：当我们要修改nginx的html内容时，需要进入容器内部修改，很不方便</li><li>数据不可复用：由于容器内的修改对外是不可见的，所有的修改对新创建的容器也是不可复用的</li><li>升级维护困难：数据在容器内，如果要升级容器必然删除旧容器，那么旧容器中的所有数据也跟着被删除了（包括改好的html页面）</li></ol></li><li><p>要解决这个问题，必须将数据和容器解耦，这就要用到数据卷了</p></li></ul><h3 id="什么是数据卷"><a href="#什么是数据卷" class="headerlink" title="什么是数据卷"></a>什么是数据卷</h3><ul><li><p>数据卷（volume）是一个虚拟目录，指向宿主机文件系统中的某个目录</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/06/LKDCcsBn.png"/></div></div></li><li><p>一旦完成数据卷挂载，对容器的一切操作都会作用在对应的宿主机目录了。这样我们操作宿主机的/var/lib/docker/volmues/html/目录，就等同于操作容器内的/usr/share/nginx/html目录了</p></li></ul><h3 id="数据卷操作命令"><a href="#数据卷操作命令" class="headerlink" title="数据卷操作命令"></a>数据卷操作命令</h3><ul><li><p>数据卷操作的基本语法如下</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure></li><li><p><code>docker volume</code>命令是数据卷操作，根据命令后跟随的<code>command</code>来确定下一步的操作</p><ul><li><code>create</code>：创建一个volume</li><li><code>inspect</code>：显示一个或多个volume的信息</li><li><code>ls</code>：列出所有的volume</li><li><code>prune</code>：删除未使用的volume</li><li><code>rm</code>：删除一个或多个指定的volume</li></ul></li></ul><h3 id="创建和查看数据卷"><a href="#创建和查看数据卷" class="headerlink" title="创建和查看数据卷"></a>创建和查看数据卷</h3><blockquote><p>需求：创建一个数据卷，并查看数据卷在宿主机的目录位置</p></blockquote><ol><li><p>创建数据卷</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure></li><li><p>查看所有数据卷</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     html</span><br></pre></td></tr></table></figure></li><li><p>查看数据卷详细信息卷</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure></li></ol><p>结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">## docker volume inspect html</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2022-12-19T12:51:54+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>可以看到我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code></p><ul><li>小结：<ul><li>数据卷的作用<ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul></li><li>数据卷操作：<ul><li><code>docker volume create</code>：创建数据卷</li><li><code>docker volume ls</code>：查看所有数据卷</li><li><code>docker volume inspect</code>：查看数据卷详细信息，包括关联的宿主机目录位置</li><li><code>docker volume rm</code>：删除指定数据卷</li><li><code>rocker volume prune</code>：删除所有未使用的数据卷</li></ul></li></ul></li></ul><h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h3><ul><li><p>我们在创建容器时，可以通过-v参数来挂载一个数据卷到某个容器内目录，命令格式如下</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -- name myNginx \</span><br><span class="line">    -v html:/root/html \</span><br><span class="line">    -p 8080:80 \</span><br><span class="line">    nginx \</span><br></pre></td></tr></table></figure></li><li><p>这里的-v就是挂载数据卷的命令</p><ul><li><code>-v html:/root/html</code>：把html数据卷挂载到容器内的/root/html这个目录中</li></ul></li></ul><h3 id="案例一-2"><a href="#案例一-2" class="headerlink" title="案例一"></a>案例一</h3><blockquote><p>需求：创建一个nginx容器，修改容器内的<code>html</code>目录的<code>index.html</code>内容<br>分析：上个案例中，我们进入nginx容器内部，已经知道了nginx的html目录所在位置<code>/usr/share/nginx/html</code>，我们需要把这个目录挂载到<code>html</code>这个数据卷上，方便操作其中的内容<br>提示：运行容器时，使用<code>-v</code>参数挂载数据卷</p></blockquote><ol><li><p>创建容器并挂载数据卷到容器内的HTML目录</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myNginx -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure></li><li><p>进入html数据卷所在位置，并修改HTML内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看数据卷位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment">## 进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment">## 修改文件</span></span><br><span class="line">vi index.html</span><br><span class="line"><span class="comment">## 也可以在FinalShell中使用外部编译器（例如VSCode）来修改文件</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="案例二-2"><a href="#案例二-2" class="headerlink" title="案例二"></a>案例二</h3><ul><li><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上，关系如下</p><ul><li>带数据卷模式：宿主机目录 —&gt; 数据卷 —&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —&gt; 容器内目录<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/06/YeBHp7La.png"/></div></div></li></ul></li><li><p>目录挂载和数据卷挂载的语法是类似的</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul></li></ul><blockquote><p>需求：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p></blockquote><ol><li><p>从DockerHub中拉取一个MySQL的镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure></li><li><p>创建目录/tmp/mysql/data</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/mysql/data</span><br></pre></td></tr></table></figure></li><li><p>创建目录/tmp/mysql/conf，将myCnf.cnf文件上传到/tmp/mysql/conf</p> <div class="tabs" id="数据卷案例二"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="数据卷案例二-1">命令</button><button type="button" class="tab " data-href="数据卷案例二-2">myCnf.cnf</button></ul><div class="tab-contents"><div class="tab-item-content active" id="数据卷案例二-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /tmp/mysql/conf</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="数据卷案例二-2"><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="attribute">character_set_server</span>=utf8</span><br><span class="line"><span class="attribute">datadir</span>=/var/lib/mysql</span><br><span class="line"><span class="attribute">server-id</span>=1000</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li><li><p>去DockerHub中查阅资料，找到mysql容器内的conf目录和data目录的位置<br> 容器中conf目录的位置是：<code>/etc/mysql/conf.d</code><br> 容器中存储数据的目录为：<code>/var/lib/mysql</code></p></li><li><p>创建并运行MySQL容器，要求</p><ul><li>挂载/tmp/mysql/data到mysql容器内数据存储目录</li><li>挂载/tmp/mysql/conf/myCnf.cnf到mysql容器的配置文件</li><li>设置MySQL密码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name mysql \ </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-v /tmp/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /tmp/mysql/data:/var/lib/mysql \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-d \</span><br><span class="line">mysql</span><br></pre></td></tr></table></figure></li></ul></li><li><p>尝试使用Navicat连接数据库，注意自己设置的密码</p></li></ol><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul><li><p><code>docker run</code>的命令中通过-v参数挂载文件或目录到容器中</p><ul><li><code>-v [volume名称]:[容器内目录]</code></li><li><code>-v [宿主机文件]:[容器内文件]</code></li><li><code>-v [宿主机目录]:[容器内目录]</code></li></ul></li><li><p>数据卷挂载与目录直接挂载的区别</p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul></li></ul><h1 id="Dockerfile自定义镜像"><a href="#Dockerfile自定义镜像" class="headerlink" title="Dockerfile自定义镜像"></a>Dockerfile自定义镜像</h1><ul><li>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须构建镜像了。而要自定义镜像，则必须先了解镜像的结构才行。</li></ul><h2 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h2><ul><li><p>镜像是将应用程序及其需要的系统函数库，环境、配置、依赖打包而成</p></li><li><p>以MySQL为例，来看看它的镜像组成结构</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/06/tcn0r36V.png"/></div></div></li><li><p>简单来说，镜像就是在系统函数库、运行环境的基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件</p></li><li><p>我们要构建镜像，其实就是实现上述打包的过程</p></li></ul><h2 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h2><ul><li><p>构建自定义镜像时，并不需要一个个文件去拷贝，打包。</p></li><li><p>我们只需要告诉Docker我们的镜像组成z，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像</p></li><li><p>而描述上述信息的就是Dockerfile文件。</p></li><li><p>Dockerfile就是一个文本文件，其中包含一个个指令（Instruction），用指令说明要执行什么操作来构建镜像，每一个指令都会形成一层Layer。</p></li></ul><div class="table-container"><table><thead><tr><th>指令</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM centos:6</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY ./mysql-5.7.rpm /tmp</td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令    RUN</td><td>yum install gcc</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINTjava -jar xxjar</td></tr></tbody></table></div><h2 id="构建Java项目"><a href="#构建Java项目" class="headerlink" title="构建Java项目"></a>构建Java项目</h2><h3 id="基于Ubuntu构建Java项目"><a href="#基于Ubuntu构建Java项目" class="headerlink" title="基于Ubuntu构建Java项目"></a>基于Ubuntu构建Java项目</h3><blockquote><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个Java项目</p></blockquote><ol><li>创建一个空文件夹docker-demo <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /tmp/docker-demo</span><br></pre></td></tr></table></figure></li><li>将docker-demo.jar文件拷贝到docker-demo这个目录</li><li>拷贝jdk8.tar.gz文件到docker-demo这个目录</li><li><p>在docker-demo目录下新建Dockerfile，并写入以下内容</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 指定基础镜像</span></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置环境变量，JDK的安装目录</span></span><br><span class="line">ENV JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment">## 拷贝jdk的到JAVA_DIR目录下</span></span><br><span class="line">COPY ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装JDK</span></span><br><span class="line">RUN <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> &amp;&amp; tar -xf ./jdk8.tar.gz &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_44 ./java8</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置环境变量</span></span><br><span class="line">ENV JAVA_HOME=<span class="variable">$JAVA_DIR</span>/java8</span><br><span class="line">ENV PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 拷贝java项目的包到指定目录下，我这里是/tmp/app.jar</span></span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"></span><br><span class="line"><span class="comment">## 暴露端口，注意这里是8090端口，如果你之前没有关闭防火墙，请关闭防火墙或打开对应端口，云服务器同理</span></span><br><span class="line">EXPOSE 8090</span><br><span class="line"></span><br><span class="line"><span class="comment">## 入口，java项目的启动命令</span></span><br><span class="line">ENTERPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure></li><li><p>在docker-demo目录下使用<code>docker build</code>命令构建镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t docker_demo:1.0 .</span><br></pre></td></tr></table></figure></li><li><p>使用docker images命令，查看镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker-demo]<span class="comment">## docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">docker_demo   1.0       c8acd2dd02cf   About a minute ago   722MB</span><br><span class="line">redis         latest    29ab4501eac3   2 days ago           117MB</span><br><span class="line">nginx         latest    3964ce7b8458   5 days ago           142MB</span><br><span class="line">ubuntu        16.04     b6f507652425   15 months ago        135MB</span><br><span class="line">mysql         5.7.25    98455b9624a9   3 years ago          372MB</span><br></pre></td></tr></table></figure></li><li><p>创建并运行一个docker_demo容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name testDemo -p 8090:8090 -d docker_demo:1.0</span><br></pre></td></tr></table></figure></li><li><p>浏览器访问<a href="http://192.168.84.128:8090/hello/count">http://192.168.84.128:8090/hello/count</a> ，即可看到页面效果（注意修改虚拟机ip）</p> <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/06/zRAmRbGG.png"/></div></div></li></ol><h3 id="基于Java8构建Java项目"><a href="#基于Java8构建Java项目" class="headerlink" title="基于Java8构建Java项目"></a>基于Java8构建Java项目</h3><ul><li><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包来构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p></li><li><p>我们刚刚构建的Java项目有一个固定的死步骤，那就是安装JDK并配置环境变量，我们每次构建Java项目的镜像的时候，都需要完成这个步骤，所以我们可以找一个已经安装好了JDK的基础镜像，然后在其基础上来构建我们的Java项目的镜像</p></li></ul><blockquote><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p></blockquote><ol><li>新建一个空目录(或者继续使用<code>/tmp/docker-demo</code>目录)</li><li>将docker-demo.jar复制到该目录下(继续使用刚刚的目录就不用管)</li><li><p>在目录中新建一个文件，命名为Dockerfile，并编写该文件(修改为如下样子就好)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 将openjdk:8作为基础镜像</span></span><br><span class="line">FROM openjdk:8</span><br><span class="line"><span class="comment">## 拷贝java项目的包到指定目录下，我这里是/tmp/app.jar</span></span><br><span class="line">COPY ./docker-demo.jar /tmp/app.jar</span><br><span class="line"><span class="comment">## 暴露端口</span></span><br><span class="line">EXPOSE 8090</span><br><span class="line"><span class="comment">## 入口</span></span><br><span class="line">ENTRYPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></table></figure></li><li><p>构建镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t docker_demo:2.0 .</span><br></pre></td></tr></table></figure></li><li><p>创建并运行一个docker_demo容器(在此之前停止之前的docker_demo容器)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name testDemo02 -p 8090:8090 -d docker_demo:2.0</span><br></pre></td></tr></table></figure></li><li><p>浏览器访问<a href="http://192.168.84.128:8090/hello/count，即可看到页面效果">http://192.168.84.128:8090/hello/count，即可看到页面效果</a></p></li></ol><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><ol><li>Dockerfile本质就是一个文件，通过指令描述镜像的构建过程</li><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li><li>基础镜像可以使基本操作系统，如Ubunut，也可以是其他人制作好的镜像，例如openjdk:8</li></ol><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><ul><li>Docker Compose可以基于Compose文件帮我们快速地部署分布式英语，而无需手动一个个创建和运行容器</li><li>真实企业项目开发中，可能有几十个</li></ul><h2 id="初识DockerCompose"><a href="#初识DockerCompose" class="headerlink" title="初识DockerCompose"></a>初识DockerCompose</h2><ul><li><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行，格式如下</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="comment">## docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -v /tmp/mysql/data:/var/lib/mysql -v /tmp/mysql/conf/myCnf.cf:/etc/mysql/conf.d/myCnf.cnf -d mysql:5.7.25</span></span><br><span class="line">    <span class="attr">mysql:</span>  <span class="comment">## 对应docker run中的 --name</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span> <span class="comment">## 对应docker run中最后声明的镜像</span></span><br><span class="line">    <span class="attr">enviroment:</span>   <span class="comment">## 对应docker run中的 -e MYSQL_ROOT_PASSWIRD=root</span></span><br><span class="line">        <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment">## 对应docker run中的 -v /tmp/mysql/data:/var/lib/mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;/tmp/mysql/conf/myCnf.cf:/etc/mysql/conf.d/myCnf.cnf&quot;</span></span><br><span class="line">    <span class="comment">## 这里并不需要-d参数来后台运行，因为此种方法默认就是后台运行</span></span><br><span class="line">    <span class="comment">## 同时也不需要暴露端口，在微服务集群部署中，MySQL仅仅是供给给集群内的服务使用的，所以不需要对外暴露端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 临时构建镜像并运行，下面的配置文件包含了docker build和docker run两个步骤</span></span><br><span class="line">    <span class="comment">## docker build -t web:1.0 .</span></span><br><span class="line">    <span class="comment">## docker run --name web -p 8090:8090 -d web:1.0</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;8090:8090&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li><code>mysql</code>：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个项目</li><li><code>web</code>：一个基于<code>docker build</code>临时构建的镜像容器，映射端口为8090</li></ul></li><li>DockerCompose的详细语法请参考官网：<a href="https://docs.docker.com/compose/compose-file/"><code>https://docs.docker.com/compose/compose-file/</code></a></li><li>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异</li></ul><h2 id="安装DockerCompose"><a href="#安装DockerCompose" class="headerlink" title="安装DockerCompose"></a>安装DockerCompose</h2><ul><li><p>在Linux下使用命令下载</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>修改文件权限</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>Base自动补全命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure></li></ul><p>如出现错误<code>Failed connect to raw.githubusercontent.com:443; Connection refused</code>，需要修改自己的hosts文件<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure></p><p>如出现新错误<code>TCP connection reset by peer</code>，重复发起命令，多试几次</p><h2 id="部署微服务集群"><a href="#部署微服务集群" class="headerlink" title="部署微服务集群"></a>部署微服务集群</h2><blockquote><p>需求：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p></blockquote><ul><li>实现思路<ol><li>编写docker-compose文件</li><li>修改自己的cloud-demo项目，将其中的数据库、nacos地址，都重命名为docker-compose中的服务名</li><li>使用maven打包工具，将项目中的每个微服务都打包为app.jar（打包名与Dockerfile中一致即可）</li><li>将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中，编写Dockerfile文件</li><li>将cloud-demo上传至虚拟机，利用<code>docker-compose up -d</code>来部署</li></ol></li></ul><h3 id="compose文件"><a href="#compose文件" class="headerlink" title="compose文件"></a>compose文件</h3><ul><li><p>针对我们之前写的cloud-demo，来编写对应的docker-compose文件</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">MDOE:</span> <span class="string">standalone</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">    <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.25</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span>  <span class="comment">## 这里的$PWD是执行linux命令，获取当前目录</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">    <span class="attr">userservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./user-service</span></span><br><span class="line">    <span class="attr">orderservice:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./order-service</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./gateway</span></span><br><span class="line">    <span class="attr">poets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;10010:10010&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>其中包含了5个服务：</p><ol><li>nacos：作为注册中心和配置中心<ul><li>image: nacos/nacos-server：基于nacos/nacos-server镜像构建</li><li>environment: 环境变量<ul><li>MODE: standalone：单点模式启动</li></ul></li><li>ports：端口映射，这里暴露了8848端口</li></ul></li><li>mysql：数据库<ul><li>image: mysql5.7.25：基于5.7.25版本的MySQL镜像构建</li><li>environment：环境变量<ul><li>MYSQL_ROOT_PASSWORD: root：设置数据库root账户密码为root</li></ul></li><li>volumes：数据卷挂载，这里挂载了mysql的data和conf目录</li></ul></li><li>userservice：基于Dockerfile临时构建，userservice不需要暴露端口，网关才是微服务的入口，如果暴露了userservice的端口，那么网关的身份认证，权限校验就形同虚设了</li><li>orderservice：基于Dockerfile临时构建，不需要暴露端口，理由同上</li><li>gateway：基于Dockerfile临时构建，网关需要暴露端口，它是其他微服务的入口</li></ol></li></ul><h3 id="修改微服务配置"><a href="#修改微服务配置" class="headerlink" title="修改微服务配置"></a>修改微服务配置</h3><ul><li><p>使用Docker Compose部署时，所有的服务之间都可以用服务名互相访问，那我们现在就需要修改我们cloud-demo中的yml配置文件，如下</p>  <div class="tabs" id="修改微服务配置"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="修改微服务配置-1">bootstrap.yml</button><button type="button" class="tab " data-href="修改微服务配置-2">application.yml</button></ul><div class="tab-contents"><div class="tab-item-content active" id="修改微服务配置-1"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">nacos:</span></span><br><span class="line">        <span class="comment">## server-addr: localhost:80 #Nacos地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment">## 使用compose中的服务名来互相访问，用nacos替换localhost</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">            <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">## 文件后缀名</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="修改微服务配置-2"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="comment">## url: jdbc:mysql://mysql:3306/cloud_user?useSSL=false</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/cloud_user?useSSL=false</span> <span class="comment">## 这里同理，使用mysql替换localhost</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li></ul><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><ul><li><p>将我们修改好的代码打包，注意修改pom文件指定打包名为app</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 服务打包的最终名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>之后使用maven工具打包</p></li></ul><h3 id="拷贝jar包到部署目录，并编写Dockerfile文件"><a href="#拷贝jar包到部署目录，并编写Dockerfile文件" class="headerlink" title="拷贝jar包到部署目录，并编写Dockerfile文件"></a>拷贝jar包到部署目录，并编写Dockerfile文件</h3><div class="tabs" id="打包"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="打包-1">gateway</button><button type="button" class="tab " data-href="打包-2">order-service</button><button type="button" class="tab " data-href="打包-3">user-service</button></ul><div class="tab-contents"><div class="tab-item-content active" id="打包-1"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">openjdk:8</span></span><br><span class="line">    <span class="string">COPY</span> <span class="string">./app.jar</span> <span class="string">/tmp/app.jar</span></span><br><span class="line">    <span class="string">ENTERPOINT</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/tmp/app.jar</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="打包-2"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">openjdk:8</span></span><br><span class="line">    <span class="string">COPY</span> <span class="string">./app.jar</span> <span class="string">/tmp/app.jar</span></span><br><span class="line">    <span class="string">ENTERPOINT</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/tmp/app.jar</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="打包-3"><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="string">openjdk:8</span></span><br><span class="line">    <span class="string">COPY</span> <span class="string">./app.jar</span> <span class="string">/tmp/app.jar</span></span><br><span class="line">    <span class="string">ENTERPOINT</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">/tmp/app.jar</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><ul><li>最终的目录结构如下<ul><li>cloud-demo<ul><li>gateway<ul><li>app.jar</li><li>Dockerfile.yml</li></ul></li><li>order-service<ul><li>app.jar</li><li>Dockerfile.yml</li></ul></li><li>user-service<ul><li>app.jar</li><li>Dockerfile.yml</li></ul></li><li>mysql<ul><li>data</li><li>conf</li></ul></li><li>docker-compose.yml</li></ul></li></ul></li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><p>将cloud-demo上传到虚拟机，进入目录，执行以下命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>启动之后查看日志，会发现日志中报错 <code>com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance/list after all servers([nacos:8848]) tried: java.net.ConnectException: Connection refused (Connection refused)</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure></li></ul><p>阿里巴巴nacos连接失败，其原因是userservice在nacos之前启动了，而nacos启动太慢了，userservice注册失败，而且也没有重试机制（等nacos启动完成后，重试注册，就可以避免这个问题）</p><ul><li>所以建议nacos单独先启动，其他服务后启动，我这里的解决方案是重启另外三个服务</li><li><p>重启gateway userservice orderservice服务</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart gateway userservice orderserivce </span><br></pre></td></tr></table></figure></li><li><p>查看userservice启动日志，这次就不报错了</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f userservice</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器访问<a href="http://192.168.84.128:10010/user/1?authorization=admin">http://192.168.84.128:10010/user/1?authorization=admin</a> ， 也可以看到数据</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/06/dQlsMLrJ.png"/></div></div></li></ul><h1 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h1><ul><li>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现</li><li>官网地址：<code>https://hub.docker.com/_/registry</code></li></ul><h2 id="搭建私有镜像仓库"><a href="#搭建私有镜像仓库" class="headerlink" title="搭建私有镜像仓库"></a>搭建私有镜像仓库</h2><ul><li>我们自己编写的项目显然是不适合放到Docker的共有仓库的，所以需要我们搭建一个私服</li></ul><h3 id="配置Docker信任地址"><a href="#配置Docker信任地址" class="headerlink" title="配置Docker信任地址"></a>配置Docker信任地址</h3><ul><li>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment">## 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.128.101:8080&quot;</span>]</span><br><span class="line"><span class="comment">## 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment">## 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li></ul><h3 id="带图形化界面版本"><a href="#带图形化界面版本" class="headerlink" title="带图形化界面版本"></a>带图形化界面版本</h3><ul><li><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line"><span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=Kyle&#x27;s</span> <span class="string">Blog私有仓库</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure></li><li><p>随后打开浏览器访问<a href="http://192.168.84.128:8080/，">http://192.168.84.128:8080/，</a> 就能看到带图形化界面的镜像仓库了</p>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/06/Ftz66mOD.png"/></div></div></li></ul><h2 id="推送、拉取镜像"><a href="#推送、拉取镜像" class="headerlink" title="推送、拉取镜像"></a>推送、拉取镜像</h2><ul><li><p>推送镜像到私有镜像服务必须先tag，步骤如下</p><ol><li><p>重新tag本地镜像，名称前缀为私有仓库的地址：192.168.84.128:8080/</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.84.128:8080/nginx:1.0</span><br></pre></td></tr></table></figure></li><li><p>推送镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.84.128:8080/nginx:1.0</span><br></pre></td></tr></table></figure><pre><code> &#123;% image https://img2.imgtp.com/2024/05/06/GJSYMIw5.png %&#125;</code></pre></li><li><p>拉取镜像</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.84.128:8080/nginx:1.0</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>作为程序员我们应<code>怎样理解docker？</code></p><ul><li><p>容器技术的<code>起源</code></p><ul><li><p>假设公司正在秘密研发下一个“今日头条”APP，我们姑且称为明日头条，程序员自己从头到尾搭建了一套环境开始写代码，写完代码后程序员要把代码交给测试同学测试，这时测试同学开始从头到尾搭建这套环境，测试过程中出现问题程序员也不用担心，大可以一脸无辜的撒娇，“明明在人家的环境上可以运行的”。</p></li><li><p>测试同学测完后终于可以上线了，这时运维同学又要重新从头到尾搭建这套环境，费了九牛二虎之力搭建好环境开始上线，糟糕，上线系统就崩溃了，这时心理素质好的程序员又可以施展演技了，“明明在人家的环境上可以运行的”。</p></li><li><p>从整个过程可以看到，不但我们重复搭建了三套环境还要迫使程序员转行演员浪费表演才华，典型的浪费时间和效率，聪明的程序员是永远不会满足现状的，因此又到了程序员改变世界的时候了，容器技术应运而生。</p></li><li><p>有的同学可能会说：“等等，先别改变世界，我们有虚拟机啊，VMware好用的飞起，先搭好一套虚拟机环境然后给测试和运维clone出来不就可以了吗？”</p></li></ul></li><li><p>在没有容器技术之前，这确实是一个好办法，只不过这个办法还<code>没有那么好。</code></p><ul><li>先科普一下，现在云计算其底层的基石就是虚拟机技术，云计算厂商买回来一堆硬件搭建好数据中心后使用虚拟机技术就可以将硬件资源进行切分了，比如可以切分出100台虚拟机，这样就可以卖给很多用户了。</li></ul></li><li><p>那么这个办法<code>为什么不好</code>呢？</p><ul><li><p>因为操作系统<code>太笨重</code>了，操作系统运行起来是需要占用很多资源的，大家对此肯定深有体会，刚装好的系统还什么都没有部署，单纯的操作系统其磁盘占用至少几十G起步，内存要几个G起步。</p></li><li><p>我们需要的只是一个简单的应用程序，不需要把内存浪费在对我们应用程序<code>无用</code>的操作系统上。</p></li><li><p>此外，还有启动时间的问题，我们知道操作系统重启是非常慢的，因为操作系统要从头到尾把该检测的都检测了，该加载的都加载上，这个过程非常缓慢，动辄就得几分钟，所以操作系统终究还是太笨重了</p></li></ul></li></ul></li><li><p>那么有没有一种技术可以让我们获得虚拟机的好处又能克服这些缺点从而一举实现<code>鱼和熊掌的兼得</code>呢？</p><ul><li>答案是肯定的，这就是容器技术。</li></ul></li><li><p><code>什么是容器</code></p><ul><li><p>容器一词的英文是container，其实container还有集装箱的意思，集装箱绝对是商业史上了不起的一项发明，大大降低了海洋贸易运输成本。让我们来看看集装箱的好处：</p><ul><li>集装箱之间相互隔离</li><li>长期反复使用</li><li>快速装载和卸载</li><li>规格标准，在港口和船上都可以摆放</li></ul></li><li><p>回到软件中的容器，其实容器和集装箱在概念上是很相似的。</p></li><li><p>现代软件开发的一大目的就是隔离，应用程序在运行时相互独立互不干扰，这种隔离实现起来是很不容易的，其中一种解决方案就是上面提到的虚拟机技术，通过将应用程序部署在不同的虚拟机中从而实现隔离。</p></li><li><p>但是虚拟机技术有上述提到的各种缺点，那么容器技术又怎么样呢？</p></li><li><p>与虚拟机通过操作系统实现隔离不同，容器技术只隔离应用程序的运行时环境但容器之间可以共享同一个操作系统，这里的运行时环境指的是程序运行依赖的各种库以及配置。</p></li><li><p>与操作系统动辄几G的内存占用相比，容器技术只需数M空间，因此我们可以在同样规格的硬件上大量部署容器，这是虚拟机所不能比拟的，而且不同于操作系统数分钟的启动时间容器几乎瞬时启动，容器技术为打包服务栈提供了一种更加高效的方式。</p></li></ul></li><li><p><code>那么我们该怎么使用容器呢？</code>这就要讲到docker了。</p><ul><li>注意，容器是一种通用技术，docker只是其中的一种实现。</li></ul></li><li><p><code>什么是docker</code></p><ul><li><p>docker是一个用Go语言实现的开源项目，可以让我们方便的创建和使用容器，docker将程序以及程序所有的依赖都打包到docker container，这样你的程序可以在任何环境都会有一致的表现，这里程序运行的依赖也就是容器就好比集装箱，容器所处的操作系统环境就好比货船或港口，程序的表现只和集装箱有关系(容器)，和集装箱放在哪个货船或者哪个港口(操作系统)没有关系。</p></li><li><p>因此我们可以看到docker可以屏蔽环境差异，也就是说，只要你的程序打包到了docker中，那么无论运行在什么环境下程序的行为都是一致的，程序员再也无法施展表演才华了，不会再有“在我的环境上可以运行”，真正实现“build once, run everywhere”。</p></li><li><p>此外docker的另一个好处就是快速部署，这是当前互联网公司最常见的一个应用场景，一个原因在于容器启动速度非常快，另一个原因在于只要确保一个容器中的程序正确运行，那么你就能确信无论在生产环境部署多少都能正确运行。</p></li></ul></li><li><p><code>如何使用docker</code></p><ul><li><p>docker中有这样几个概念：</p><ul><li>dockerfile</li><li>image</li><li>container</li></ul></li><li><p>实际上你可以简单的把image理解为可执行程序，container就是运行起来的进程。</p></li><li><p>那么写程序需要源代码，那么“写”image就需要dockerfile，dockerfile就是image的源代码，docker就是”编译器”。</p></li><li><p>因此我们只需要在dockerfile中指定需要哪些程序、依赖什么样的配置，之后把dockerfile交给“编译器”docker进行“编译”，也就是docker build命令，生成的可执行程序就是image，之后就可以运行这个image了，这就是docker run命令，image运行起来后就是docker container。</p></li><li><p>具体的使用方法就不再这里赘述了，大家可以参考docker的官方文档，那里有更详细的讲解。</p></li></ul></li><li><p><code>docker是如何工作的</code></p><ul><li>实际上docker使用了常见的CS架构，也就是client-server模式，docker client负责处理用户输入的各种命令，比如docker build、docker run，真正工作的其实是server，也就是docker demon，值得注意的是，docker client和docker demon可以运行在同一台机器上。</li></ul></li><li><p><code>接下来我们用几个命令来讲解一下docker的工作流程：</code></p><ol><li><p>docker build</p><ul><li>当我们写完dockerfile交给docker“编译”时使用这个命令，那么client在接收到请求后转发给docker daemon，接着docker daemon根据dockerfile创建出“可执行程序”image。</li></ul></li><li><p>docker run</p><ul><li>有了“可执行程序”image后就可以运行程序了，接下来使用命令docker run，docker daemon接收到该命令后找到具体的image，然后加载到内存开始执行，image执行起来就是所谓的container。</li></ul></li><li><p>docker pull</p><ul><li><p>其实docker build和docker run是两个最核心的命令，会用这两个命令基本上docker就可以用起来了，剩下的就是一些补充。</p></li><li><p>那么docker pull是什么意思呢？</p></li><li><p>我们之前说过，docker中image的概念就类似于“可执行程序”，我们可以从哪里下载到别人写好的应用程序呢？很简单，那就是APP Store，即应用商店。与之类似，既然image也是一种“可执行程序”，那么有没有”Docker Image Store”呢？答案是肯定的，这就是Docker Hub，docker官方的“应用商店”，你可以在这里下载到别人编写好的image，这样你就不用自己编写dockerfile了。</p></li><li><p>docker registry 可以用来存放各种image，公共的可以供任何人下载image的仓库就是docker Hub。那么该怎么从Docker Hub中下载image呢，就是这里的docker pull命令了。</p></li><li><p>因此，这个命令的实现也很简单，那就是用户通过docker client发送命令，docker daemon接收到命令后向docker registry发送image下载请求，下载后存放在本地，这样我们就可以使用image了。</p></li></ul></li></ol></li><li><p><code>最后，让我们来看一下docker的底层实现。</code></p><ul><li><p>docker基于Linux内核提供这样几项功能实现的：</p><ul><li>NameSpace<br>我们知道Linux中的PID、IPC、网络等资源是全局的，而NameSpace机制是一种资源隔离方案，在该机制下这些资源就不再是全局的了，而是属于某个特定的NameSpace，各个NameSpace下的资源互不干扰，这就使得每个NameSpace看上去就像一个独立的操作系统一样，但是只有NameSpace是不够。</li></ul></li><li><p>Control groups<br>虽然有了NameSpace技术可以实现资源隔离，但进程还是可以不受控的访问系统资源，比如CPU、内存、磁盘、网络等，为了控制容器中进程对资源的访问，Docker采用control groups技术(也就是cgroup)，有了cgroup就可以控制容器中进程对系统资源的消耗了，比如你可以限制某个容器使用内存的上限、可以在哪些CPU上运行等等。</p></li><li><p>有了这两项技术，容器看起来就真的像是独立的操作系统了。</p></li></ul></li><li><p><code>总结</code></p><ul><li>docker是目前非常流行的技术，很多公司都在生产环境中使用，但是docker依赖的底层技术实际上很早就已经出现了，现在以docker的形式重新焕发活力，并且能很好的解决面临的问题</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识Docker&quot;&gt;&lt;a href=&quot;#初识Docker&quot; class=&quot;headerlink&quot; title=&quot;初识Docker&quot;&gt;&lt;/a&gt;初识Docker&lt;/h1&gt;&lt;h2 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="https://andyh0824.github.io/posts/96a41905.html"/>
    <id>https://andyh0824.github.io/posts/96a41905.html</id>
    <published>2024-04-25T11:50:10.000Z</published>
    <updated>2024-05-05T13:08:20.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识微服务"><a href="#认识微服务" class="headerlink" title="认识微服务"></a>认识微服务</h1><ul><li>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。那这些架构之间有怎样的区别呢？</li></ul><h2 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h2><ul><li>单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/21/l2p25T6K.png"/></div></div></li><li>单体架构优缺点如下<ul><li><code>优点</code><ul><li>架构简单</li><li>部署成本低</li></ul></li><li><code>缺点</code><ul><li>耦合度高（维护困难、升级困难）</li></ul></li></ul></li></ul><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><ul><li>分布式架构：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/21/wUQpFKaZ.png"/></div></div></li><li>分布式架构优缺点如下<ul><li><code>优点</code><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul></li><li><code>缺点</code><ul><li>服务调用关系错综复杂</li></ul></li></ul></li><li>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考<ul><li>服务拆分的细粒度如何界定？</li><li>服务之间如何调用？</li><li>服务的调用关系如何管理？</li></ul></li><li>人们需要指定一套行之有效的标准来约数分布式架构</li></ul><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><ul><li>微服务的架构特征<ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题（例如积分服务挂了，不能影响到用户服务等其他服务）<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/21/9wscEcPc.png"/></div></div></li></ul></li><li>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合</li><li>因此，可以认为微服务是一种经过良好架构设计的分布式架构方案</li><li>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案</li><li>其中在Java领域最引人瞩目的就是SpringCloud 提供的方案了</li></ul><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><ul><li>SpringCloud 是目前国内使用最广泛的微服务架构。官网地址：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></li><li>SpringCloud 集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</li><li>其中常见的组件包括<ul><li>微服务注册与发现<ul><li>Eureka</li><li>Nacos</li><li>Consul</li></ul></li><li>服务远程调用<ul><li>OpenFeign</li><li>Dubbo</li></ul></li><li>服务链路监控<ul><li>Zipkin</li><li>Sleuth</li></ul></li><li>统一配置管理<ul><li>SpringCloudConfig</li><li>Nacos</li></ul></li><li>统一网关路由<ul><li>SpringCloudGateway</li><li>Zuul</li></ul></li><li>流控、降级、保护<ul><li>Hystix</li><li>Sentinel</li></ul></li></ul></li><li>另外，SpringCloud 底层是依赖于SpringBoot的，并且有版本的兼容关系，如下</li></ul><div class="table-container"><table><thead><tr><th>Release Train</th><th>Boot Version</th></tr></thead><tbody><tr><td>2020.0.x aka llford</td><td>2.4.x</td></tr><tr><td>Hoxton</td><td>2.2.x,2.3.x (Starting with SR5)</td></tr><tr><td>Greenwich</td><td>2.1.x</td></tr><tr><td>Finchley</td><td>2.0.x</td></tr><tr><td>Edgware</td><td>1.5.x</td></tr><tr><td>Dalston</td><td>1.5.X</td></tr></tbody></table></div><ul><li>本文的学习版本是Hoxton.SR10，因此对应的是SpringBoot版本是2.3.x</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</li><li>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目。例如：京东、淘宝</li><li>微服务：一种更好的分布式架构方案<ul><li>优点：拆分力度更小、服务更独立、耦合度更低</li><li>缺点：架构非常复杂，运维、监控、部署难度提高</li></ul></li><li>SpringCloud 是微服务架构的一站式解决方案，集成了各种优秀的微服务功能组件</li></ul><h1 id="服务拆分和远程调用"><a href="#服务拆分和远程调用" class="headerlink" title="服务拆分和远程调用"></a>服务拆分和远程调用</h1><ul><li>任何分布式架构都离不开服务的拆分，微服务也一样</li></ul><h2 id="服务拆分原则"><a href="#服务拆分原则" class="headerlink" title="服务拆分原则"></a>服务拆分原则</h2><ul><li><p>微服务拆分的几个原则</p><ol><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其他微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其他服务调用</li></ol></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/26/apGgHgfE.png"/></div></div><h2 id="服务拆分示例"><a href="#服务拆分示例" class="headerlink" title="服务拆分示例"></a>服务拆分示例</h2><ul><li><p>cloud-demo: 父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul></li><li><p>需求</p><ul><li>订单微服务和用户微服务必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul></li></ul><h3 id="导入Sql语句"><a href="#导入Sql语句" class="headerlink" title="导入Sql语句"></a>导入Sql语句</h3><div class="tabs" id="导入sql语句"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="导入sql语句-1">order表</button><button type="button" class="tab " data-href="导入sql语句-2">user表</button></ul><div class="tab-contents"><div class="tab-item-content active" id="导入sql语句-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE cloud_order;</span><br><span class="line">USE cloud_order;</span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_order</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_order`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_order`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品价格&#x27;</span>,</span><br><span class="line">  `num` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;商品数量&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `username`(`name`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">109</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_order</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">101</span>, <span class="number">1</span>, <span class="string">&#x27;Apple 苹果 iPhone 12 &#x27;</span>, <span class="number">699900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">102</span>, <span class="number">2</span>, <span class="string">&#x27;雅迪 yadea 新国标电动车&#x27;</span>, <span class="number">209900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">103</span>, <span class="number">3</span>, <span class="string">&#x27;骆驼（CAMEL）休闲运动鞋女&#x27;</span>, <span class="number">43900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">104</span>, <span class="number">4</span>, <span class="string">&#x27;小米10 双模5G 骁龙865&#x27;</span>, <span class="number">359900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">105</span>, <span class="number">5</span>, <span class="string">&#x27;OPPO Reno3 Pro 双模5G 视频双防抖&#x27;</span>, <span class="number">299900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">106</span>, <span class="number">6</span>, <span class="string">&#x27;美的（Midea) 新能效 冷静星II &#x27;</span>, <span class="number">544900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">107</span>, <span class="number">2</span>, <span class="string">&#x27;西昊/SIHOO 人体工学电脑椅子&#x27;</span>, <span class="number">79900</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_order` <span class="keyword">VALUES</span> (<span class="number">108</span>, <span class="number">3</span>, <span class="string">&#x27;梵班（FAMDBANN）休闲男鞋&#x27;</span>, <span class="number">31900</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="导入sql语句-2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE cloud_user;</span><br><span class="line">USE cloud_user;</span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;收件人&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `username`(`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">109</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;柳岩&#x27;</span>, <span class="string">&#x27;湖南省衡阳市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;文二狗&#x27;</span>, <span class="string">&#x27;陕西省西安市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;华沉鱼&#x27;</span>, <span class="string">&#x27;湖北省十堰市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;张必沉&#x27;</span>, <span class="string">&#x27;天津市&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;郑爽爽&#x27;</span>, <span class="string">&#x27;辽宁省沈阳市大东区&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;范兵兵&#x27;</span>, <span class="string">&#x27;山东省青岛市&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="导入demo"><a href="#导入demo" class="headerlink" title="导入demo"></a>导入demo</h3><ul><li>导入黑马提供好的代码，里面包含了order-service和user-service，将其配置文件中的数据库修改为自己的配置，随后将这两个服务启动，开始我们的调用案例</li></ul><h2 id="实现远程调用案例"><a href="#实现远程调用案例" class="headerlink" title="实现远程调用案例"></a>实现远程调用案例</h2><ul><li><p>在order-service中的web包下，有一个OrderController，是根据id查询订单的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE cloud_user;</span><br><span class="line">USE cloud_user;</span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line"><span class="type">SET</span> <span class="variable">FOREIGN_KEY_CHECKS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure <span class="keyword">for</span> tb_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `tb_user`;</span><br><span class="line">CREATE TABLE `tb_user`  (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(<span class="number">100</span>) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT <span class="string">&#x27;收件人&#x27;</span>,</span><br><span class="line">  `address` varchar(<span class="number">255</span>) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`id`)</span> USING BTREE,</span><br><span class="line">  UNIQUE INDEX `username`(`username`) USING BTREE</span><br><span class="line">) ENGINE = <span class="type">InnoDB</span> <span class="variable">AUTO_INCREMENT</span> <span class="operator">=</span> <span class="number">109</span> <span class="type">CHARACTER</span> <span class="variable">SET</span> <span class="operator">=</span> <span class="type">utf8</span> <span class="variable">COLLATE</span> <span class="operator">=</span> <span class="type">utf8_general_ci</span> <span class="variable">ROW_FORMAT</span> <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of tb_user</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `tb_user` VALUES (<span class="number">1</span>, <span class="string">&#x27;柳岩&#x27;</span>, <span class="string">&#x27;湖南省衡阳市&#x27;</span>);</span><br><span class="line">INSERT INTO `tb_user` VALUES (<span class="number">2</span>, <span class="string">&#x27;文二狗&#x27;</span>, <span class="string">&#x27;陕西省西安市&#x27;</span>);</span><br><span class="line">INSERT INTO `tb_user` VALUES (<span class="number">3</span>, <span class="string">&#x27;华沉鱼&#x27;</span>, <span class="string">&#x27;湖北省十堰市&#x27;</span>);</span><br><span class="line">INSERT INTO `tb_user` VALUES (<span class="number">4</span>, <span class="string">&#x27;张必沉&#x27;</span>, <span class="string">&#x27;天津市&#x27;</span>);</span><br><span class="line">INSERT INTO `tb_user` VALUES (<span class="number">5</span>, <span class="string">&#x27;郑爽爽&#x27;</span>, <span class="string">&#x27;辽宁省沈阳市大东区&#x27;</span>);</span><br><span class="line">INSERT INTO `tb_user` VALUES (<span class="number">6</span>, <span class="string">&#x27;范兵兵&#x27;</span>, <span class="string">&#x27;山东省青岛市&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">SET</span> <span class="variable">FOREIGN_KEY_CHECKS</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>我们打开浏览器，访问<a href="http://localhost:8080/order/101">http://localhost:8080/order/101</a> ，是可以查询到数据的，但此时的user是null</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">699900</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apple 苹果 iPhone 12 &quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>在user-service中的web包下，也有一个UserController，其中包含一个根据id查询用户的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 收起代码处理，遍历所有代码块元素，找到所有hider进行折叠style处理</span></span><br><span class="line">$figureHighlight.forEach(function(item) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">titleEle</span> <span class="operator">=</span> item.querySelector(<span class="string">&#x27;figcaption&gt;span&#x27;</span>)</span><br><span class="line">    <span class="type">let</span> <span class="variable">hiderSymbol</span> <span class="operator">=</span> <span class="string">&#x27;hider&#x27;</span></span><br><span class="line">    let title;</span><br><span class="line">    <span class="keyword">if</span> (titleEle &amp;&amp; (title = titleEle.innerText) &amp;&amp; (title === hiderSymbol || title.startsWith(hiderSymbol + <span class="string">&#x27; &#x27;</span>))) &#123;</span><br><span class="line">        <span class="comment">// 去掉hider符号</span></span><br><span class="line">        <span class="keyword">if</span> (title === hiderSymbol) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="variable">p</span> <span class="operator">=</span> titleEle.parentNode</span><br><span class="line">            titleEle.parentNode.removeChild(titleEle)</span><br><span class="line">            p.parentNode.removeChild(p)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            titleEle.innerText = title.substring(hiderSymbol.length + <span class="number">1</span>)</span><br><span class="line">            titleEle.parentNode.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 箭头</span></span><br><span class="line">        item.querySelector(<span class="string">&#x27;i.fa-angle-down&#x27;</span>).classList.add(<span class="string">&#x27;closed&#x27;</span>)</span><br><span class="line">        <span class="comment">// 隐藏代码</span></span><br><span class="line">        <span class="type">const</span> <span class="variable">code</span> <span class="operator">=</span> item.querySelector(<span class="string">&#x27;table&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (code) &#123;</span><br><span class="line">            code.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>我们打开浏览器，访问<a href="http://localhost:8081/user/1">http://localhost:8081/user/1</a> ，查询到的数据如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 收起代码处理，遍历所有代码块元素，找到所有hider进行折叠style处理</span></span><br><span class="line">$figureHighlight.forEach(function(item) <span class="punctuation">&#123;</span></span><br><span class="line">    const titleEle = item.querySelector(&#x27;figcaption&gt;span&#x27;)</span><br><span class="line">    let hiderSymbol = &#x27;hider&#x27;</span><br><span class="line">    let title;</span><br><span class="line">    if (titleEle &amp;&amp; (title = titleEle.innerText) &amp;&amp; (title === hiderSymbol || title.startsWith(hiderSymbol + &#x27; &#x27;))) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 去掉hider符号</span></span><br><span class="line">        if (title === hiderSymbol) <span class="punctuation">&#123;</span></span><br><span class="line">            const p = titleEle.parentNode</span><br><span class="line">            titleEle.parentNode.removeChild(titleEle)</span><br><span class="line">            p.parentNode.removeChild(p)</span><br><span class="line">        <span class="punctuation">&#125;</span> else <span class="punctuation">&#123;</span></span><br><span class="line">            titleEle.innerText = title.substring(hiderSymbol.length + <span class="number">1</span>)</span><br><span class="line">            titleEle.parentNode.style.display = &#x27;none&#x27;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="comment">// 箭头</span></span><br><span class="line">        item.querySelector(&#x27;i.fa-angle-down&#x27;).classList.add(&#x27;closed&#x27;)</span><br><span class="line">        <span class="comment">// 隐藏代码</span></span><br><span class="line">        const code = item.querySelector(&#x27;table&#x27;)</span><br><span class="line">        if (code) <span class="punctuation">&#123;</span></span><br><span class="line">            code.style.display = &#x27;none&#x27;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h3><ul><li>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一并返回</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/27/WsbzdA3P.png"/></div></div><ul><li><p>因此，我们需要在order-service中向user-service发起一个http请求，调用<a href="http://localhost:8081/user/{userId}">http://localhost:8081/user/{userId}</a> 这个接口。</p></li><li><p>大概步骤如下</p><ol><li>注册一个RestTemplate的实例到Spring容器</li><li>修改order-servcie服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li><li>将查询到的User填充到Order对象，一并返回</li></ol></li></ul><h2 id="注册RestTemplate"><a href="#注册RestTemplate" class="headerlink" title="注册RestTemplate"></a>注册RestTemplate</h2><ul><li>首先我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现远程调用"><a href="#实现远程调用" class="headerlink" title="实现远程调用"></a>实现远程调用</h3><ul><li>修改order-service服务中的queryById方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 2. 远程查询User</span></span><br><span class="line">        <span class="comment">// 2.1 url地址，这里的url是写死的，后面会改进</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="comment">// 2.2 发起调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="comment">// 3. 存入order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再次访问<a href="http://localhost:8080/order/101">http://localhost:8080/order/101</a> ，这次就能看到User数据了</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">699900</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apple 苹果 iPhone 12 &quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="提供者与消费者"><a href="#提供者与消费者" class="headerlink" title="提供者与消费者"></a>提供者与消费者</h2><ul><li><p>在服务调用关系中，会有两个不同的角色</p><ul><li><code>服务提供者</code> ：一次业务中，被其他微服务调用的服务（提供接口给其他服务）</li><li><code>服务消费者</code> ：一次业务中，调用其他微服务的服务（调用其他微服务提供的接口）</li></ul></li><li><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言</p></li><li><p>如果服务A调用了服务B，而服务B又调用了服务C，那么服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul></li><li><p>因此服务B既可以是服务提供者，也可以是服务消费者</p></li></ul><h1 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h1><ul><li><p>假如我们的服务提供者user-service提供了三个实例，占用的分别是8081、8082、8083端口</p></li><li><p>那我们来思考几个问题</p><ul><li><code>问题一</code>：order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li><code>问题二</code>：有多个user-service实例地址，order-service调用时，该如何选择？</li><li><code>问题三</code>：order-service如何得知某个user-service实例是否健康，是不是已经宕机？</li></ul></li></ul><h2 id="Eureka的结构和作用"><a href="#Eureka的结构和作用" class="headerlink" title="Eureka的结构和作用"></a>Eureka的结构和作用</h2><ul><li>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/28/1uVfQz9l.png"/></div></div><ul><li><p>那么现在来回答之前的问题</p><ul><li><p><code>问题一</code>：order-service如何得知user-service实例地址？</p><ul><li>获取地址信息流程如下<ol><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端），这个叫服务注册</li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据服务名称，拉去实例地址列表，这个叫服务发现或服务拉取</li></ol></li></ul></li><li><p><code>问题二</code>：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用负载均衡算法选一个实例地址</li><li>向该实例地址发起远程调用</li></ul></li><li><p><code>问题三</code>：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己的状态，成为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service拉取服务时，就能将该故障实例排除了</li></ul></li></ul></li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><ul><li><p>因此，我们接下来动手实践的步骤包括</p><ol><li>搭建注册中心<ul><li>搭建EurekaServer</li></ul></li><li>服务注册<ul><li>将user-service、order-service都注册到eureka</li></ul></li><li>服务发现<ul><li>在order-service中完成服务拉取，然后通过负载均衡挑选一个服务，实现远程调用</li></ul></li></ol></li></ul><h2 id="搭建eureka-server"><a href="#搭建eureka-server" class="headerlink" title="搭建eureka-server"></a>搭建eureka-server</h2><ul><li>首先我们注册中心服务端：eureka，这必须是一个独立的微服务</li></ul><h3 id="创建eureka-server服务"><a href="#创建eureka-server服务" class="headerlink" title="创建eureka-server服务"></a>创建eureka-server服务</h3><ul><li>在cloud-demo父工程下，创建一个子模块，这里就直接创建一个maven项目就好了，然后填写服务信息</li></ul><h3 id="引入eureka依赖"><a href="#引入eureka依赖" class="headerlink" title="引入eureka依赖"></a>引入eureka依赖</h3><ul><li>引入SpringCloud为eureka提供的starter依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h3><ul><li>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><ul><li>编写一个application.yml文件，内容如下</li><li>为什么也需要配置eureka的服务名称呢？<ul><li>eureka也会将自己注册为一个服务<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment">## 服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment">## eureka的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">## eureka的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><ul><li>启动微服务，然后在浏览器访问<a href="http://localhost:10086/">http://localhost:10086/</a> ，看到如下结果就是成功了</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/28/RB4Jm4H5.png"/></div></div><ul><li>从图中我们也可以看出eureka确实是将自己注册为了一个服务，这里的Kyle是主机名，也就是127.0.0.1</li></ul><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><ul><li>下面，我们将user-service注册到eureka-server中去</li></ul><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><ul><li>在user-service的pom.xml文件中，引入下面的eureka-client依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>在user-service中，修改application.yml文件，添加服务名称、eureka地址</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="启动多个user-service实例"><a href="#启动多个user-service实例" class="headerlink" title="启动多个user-service实例"></a>启动多个user-service实例</h3><ul><li>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service，其操作步骤就是复制一份user-service的配置，name配置为UserApplication2，同时也要配合VM选项，修改端口号 <code>-Dserver.port=8082</code> ，点击确定之后，在IDEA的服务选项卡中，就会出现两个user-service启动配置，一个端口是8081，一个端口是8082</li><li>之后我们按照相同的方法配置了order-service，并将两个user-service和一个order-service都启动，然后查看eureka-server管理页面，发现服务确实都启动了，而且user-service有两个</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/28/0V5zVO3a.png"/></div></div><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><ul><li>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现</li></ul><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><ul><li>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致</li><li>在order-service的pom.xml文件中，引入eureka-client依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息</li><li>在order-service中，修改application.yml文件，添加服务名称、eureka地址</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="服务拉取和负载均衡"><a href="#服务拉取和负载均衡" class="headerlink" title="服务拉取和负载均衡"></a>服务拉取和负载均衡</h3><ul><li>最后，我们要去eureka-server中拉取user-service服务的实例列表，并实现负载均衡</li><li>不过这些操作并不需要我们来做，是需要添加一下注解即可</li><li>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解</li></ul><figure class="highlight java"><figcaption><span>hider</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改order-service服务中的OderService类中的queryById方法，修改访问路径，用服务名来代替ip、端口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">    <span class="comment">// 2. 远程查询User</span></span><br><span class="line">    <span class="comment">// 2.1 url地址，用user-service替换了localhost:8081</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-service/user/&quot;</span> + order.getUserId();</span><br><span class="line">    <span class="comment">// 2.2 发起调用</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">    <span class="comment">// 3. 存入order</span></span><br><span class="line">    order.setUser(user);</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring会自动帮我们从eureka-server端，根据user-service这个服务名称，获取实例列表，然后完成负载均衡</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li><p>搭建EurekaServer</p><ul><li>引入eureka-server依赖</li><li>添加@EnableEurekaServer注解</li><li>在application.yml中配置eureka地址</li></ul></li><li><p>服务注册</p><ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li></ul></li><li><p>服务发现</p><ul><li>引入eureka-client依赖</li><li>在application.yml中配置eureka地址</li><li>在RestTemplate添加<code>@LoadBalanced</code>注解</li><li>用服务提供者的服务名称远程调用</li></ul></li></ol><h1 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h1><ul><li>在这个小节，我们来说明@LoadBlanced注解是怎么实现负载均衡功能的</li></ul><h2 id="负载均衡的原理"><a href="#负载均衡的原理" class="headerlink" title="负载均衡的原理"></a>负载均衡的原理</h2><ul><li>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/30/EENKhliH.png"/></div></div><ul><li>那么我们明明发出的请求是<a href="http://userservice/user/1">http://userservice/user/1</a> ，怎么变成了<a href="http://localhost:8080/user/1">http://localhost:8080/user/1</a> 的呢</li></ul><h2 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h2><ul><li>为什么我们只输出了service名称就可以访问了？之前还得获取ip和端口</li><li>答案显然是有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是LoadBalancerInterceptor，这个类会当RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法，得到真实的服务地址信息，替换服务id</li><li>那下面我们来进行源码跟踪</li></ul><ol><li><p>LoadBalancerInterceptor</p><ul><li><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ClientHttpRequestInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line">    <span class="keyword">private</span> LoadBalancerRequestFactory requestFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancer, LoadBalancerRequestFactory requestFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadBalancer = loadBalancer;</span><br><span class="line">        <span class="built_in">this</span>.requestFactory = requestFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(loadBalancer, <span class="keyword">new</span> <span class="title class_">LoadBalancerRequestFactory</span>(loadBalancer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="type">byte</span>[] body, <span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line">        Assert.state(serviceName != <span class="literal">null</span>, <span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line">        <span class="keyword">return</span> (ClientHttpResponse)<span class="built_in">this</span>.loadBalancer.execute(serviceName, <span class="built_in">this</span>.requestFactory.createRequest(request, body, execution));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/30/8IwRyLiI.png"/></div></div></li><li><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事</p><ol><li>request.getURI()：获取请求uri，本例中就是<a href="http://user-service/user/1">http://user-service/user/1</a></li><li>originalUri.getHost()：获取uri路径的主机名，其实就是服务id，user-service</li><li>this.loadBalancer.execute：处理服务id和用户请求</li></ol></li><li><p>这里的this.loadBalancer是LoadBalancerClient类型，我们继续跟入</p></li></ul></li><li><p>LoadBalancerClient</p><ul><li><p>继续跟入execute方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request, Object hint)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">ILoadBalancer</span> <span class="variable">loadBalancer</span> <span class="operator">=</span> <span class="built_in">this</span>.getLoadBalancer(serviceId);</span><br><span class="line">    <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="built_in">this</span>.getServer(loadBalancer, hint);</span><br><span class="line">    <span class="keyword">if</span> (server == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No instances available for &quot;</span> + serviceId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RibbonServer</span> <span class="variable">ribbonServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RibbonServer</span>(serviceId, server, <span class="built_in">this</span>.isSecure(server, serviceId), <span class="built_in">this</span>.serverIntrospector(serviceId).getMetadata(server));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.execute(serviceId, (ServiceInstance)ribbonServer, (LoadBalancerRequest)request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/30/iI3ttw6A.png"/></div></div></li><li><p>代码是这样的</p><ol><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalanc会拿着服务id去eureka中获取服务列表并保存起来</li><li>getServer(loadBalancer,hint)：利用内置的负载均衡算法，从服务列表中选择一个，本例中，可以看到获取到的是8081端口</li></ol></li><li><p>放行后，再次访问并跟踪，这次获取到的是8082端口，果然实现了负载均衡</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/30/8YT3WxUo.png"/></div></div></li></ul></li><li><p>负载均衡策略IRule</p></li></ol><ul><li><p>在刚才的代码中，可以看到获取服务是通过一个getServer的方法来做负载均衡，我们继续跟入，会发现这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Server <span class="title function_">chooseServer</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.counter == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.counter = <span class="built_in">this</span>.createCounter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.counter.increment();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.rule == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.rule.choose(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;LoadBalancer [&#123;&#125;]:  Error choosing server for key &#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="built_in">this</span>.name, key, var3&#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在try/catch代码块中，进行服务选择的是this.rule.choose(key)，那我们看看这个rule是谁</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/30/CvwncqjF.png"/></div></div></li><li><p>这里的rule默认值是一个RoundRobinRule，也就是轮询</p></li><li>那么到这里，整个负载均衡的流程我们就清楚了</li></ul></li></ul><ol><li>总结</li></ol><ul><li>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改，用一幅图来总结一下<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/30/5v9oKbNH.png"/></div></div></li><li>整个流程如下<ol><li>拦截我们的RestTemplate请求：<a href="http://user-service/user/1">http://user-service/user/1</a></li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡原则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代user-service，得到<a href="http://localhost:8081/user/1">http://localhost:8081/user/1</a> ，发起真实请求。</li></ol></li></ul><h2 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h2><h3 id="负载均衡策略-1"><a href="#负载均衡策略-1" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><ul><li><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/04/30/WFaqghmc.png"/></div></div></li><li><p>不同规则的含义如下</p></li></ul><div class="table-container"><table><thead><tr><th>内置负载均衡规则类</th><th>规则描述</th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的..ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td>ZoneAvoidanceRule</td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table></div><ul><li>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</li></ul><h3 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h3><ul><li>通过定义IRule实现，可以修改负载均衡规则，有两种方式<ol><li>代码方式：在order-service中的OrderApplication类中，定义一个IRule，此种方式定义的负载均衡规则，对所有微服务均有效<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置文件方式：在order-service中的application.yml文件中，添加新的配置也可以修改规则<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span> <span class="comment">## 给某个微服务配置负载均衡规则，这里是user-service服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">## 负载均衡规则 </span></span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>注意：一般使用没人的负载均衡规则，不做修改</p></blockquote><h2 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h2><ul><li>Ribbon默认是采用懒加载，即第一次访问时，才回去创建LoadBalanceClient，请求时间会很长</li><li>而饥饿加载在则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">## 开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">user-service</span>  <span class="comment">## 指定对user-service这个服务进行饥饿加载，可以指定多个服务</span></span><br></pre></td></tr></table></figure><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ol><li>Ribbon负载均衡规则<ul><li>规则接口是IRule</li><li>默认实现是ZoneAvoidanceRule，根据zone选择服务列表，然后轮询</li></ul></li><li>负载均衡自定义方式<ul><li>代码方式：配置灵活，但修改时需要重新打包发布</li><li>配置方式：直观，方便，无需重新打包发布，但是无法做全局配置（只能指定某一个微服务）</li></ul></li><li>饥饿加载<ul><li>开启饥饿加载<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>指定饥饿加载的微服务名称，可以配置多个<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clients:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">user-service</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">xxx-service</span> </span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="nacos注册中心"><a href="#nacos注册中心" class="headerlink" title="nacos注册中心"></a>nacos注册中心</h1><ul><li>国内公司一般都推崇阿里巴巴的技术，比如注册中心，<code>SpringCloud Alibaba</code>也推出了一个名为<code>Nacos</code>的注册中心</li></ul><h2 id="认识和安装Nacos"><a href="#认识和安装Nacos" class="headerlink" title="认识和安装Nacos"></a>认识和安装Nacos</h2><ul><li>Nacos是阿里巴巴的产品，现在是SpringCloud中的一个组件，相比于Eureka，功能更丰富，在国内受欢迎程度较高</li><li>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：<ul><li>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></li><li>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></li></ul></li><li>下载好了之后，将文件解压到非中文路径下的任何目录，目录说明：<ul><li>bin：启动脚本</li><li>conf： 配置文件</li></ul></li><li>Nacos的默认端口是8848，如果你电脑上的其他进程占用了8848端口，请先尝试关闭该进程。<ul><li>如果无法关闭占用8848端口的进程，也可以进入nacos的conf目录，修改配置文件application.properties中的server.port</li></ul></li><li>Nacos的启动非常简单，进入bin目录，打开cmd窗口执行以下命令即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><ul><li>之后在浏览器访问<a href="http://localhost:8848/nacos即可，默认的登录账号和密码都是nacos">http://localhost:8848/nacos即可，默认的登录账号和密码都是nacos</a></li></ul><h2 id="服务注册到Nacos"><a href="#服务注册到Nacos" class="headerlink" title="服务注册到Nacos"></a>服务注册到Nacos</h2><ul><li>Nacos是SpringCloudAlibaba的组件，而<code>SpringCloud Alibaba</code>也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos与使用Eureka对于微服务来说，并没有太大区别</li><li>主要差异在于<ol><li>依赖不同</li><li>服务地址不同</li></ol></li></ul><h3 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h3><ul><li>在cloud-demo父工程的pom.xml文件中引入SpringCloudAlibaba的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后在user-service和order-service中的pom文件引入nacos-discovery依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：同时也要将eureka的依赖注释/删除掉</p></blockquote><h3 id="配置Nacos地址"><a href="#配置Nacos地址" class="headerlink" title="配置Nacos地址"></a>配置Nacos地址</h3><ul><li>在user-service和order-service的application.yml中添加Nacos地址</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：同时也要将eureka的地址注释掉</p></blockquote><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><ul><li>重启微服务后，登录nacos的管理页面，可以看到微服务信息<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/02/V1MOPZRH.png"/></div></div></li></ul><h2 id="服务分级存储模型"><a href="#服务分级存储模型" class="headerlink" title="服务分级存储模型"></a>服务分级存储模型</h2><ul><li><p>一个服务可以有多个实例，例如我们的user-service，可以有</p><ul><li>127.0.0。1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul></li><li><p>假如这些实例分布于全国各地的不同机房，例如</p><ul><li>127.0.0.1:8081，在杭州机房</li><li>127.0.0.1:8082，在杭州机房</li><li>127.0.0.1:8083，在上海机房</li></ul></li><li><p>Nacos就将在同一个机房的实力，划分为一个<code>集群</code></p></li><li>也就是说，user-service是服务，一个服务可以包含多个集群，例如在杭州，上海，每个集群下可以有多个实例，形成分级模型</li><li>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快，访问本地集群不可用时，才去访问其他集群<ul><li>例如：杭州机房内的order-service应该有限访问同机房的user-service，若无法访问，则去访问上海机房的user-service</li></ul></li></ul><h3 id="给user-service配置集群"><a href="#给user-service配置集群" class="headerlink" title="给user-service配置集群"></a>给user-service配置集群</h3><ul><li>修改user-service的application.yml文件，添加集群配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment">## 集群名称，杭州</span></span><br></pre></td></tr></table></figure><ul><li>重启两个user-service实例</li><li>之后我们在复制一个user-service的启动配置，端口号为8083，之后修改application.yml文件，将集群名称设置为上海，之后启动该服务</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">SH</span> <span class="comment">## 集群名称，上海</span></span><br></pre></td></tr></table></figure><ul><li><p>那么我们现在就启动了两个集群名称为HZ的user-service，一个集群为SH的user-service，在Nacos控制台看到如下结果</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/02/XhzSplrL.png"/></div></div></li><li><p>Nacos服务分级存储模型</p><ol><li>一级是服务，例如user-service</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了user-service的服务器</li></ol></li><li><p>如何设置实例的集群属性</p><ul><li>修改application.yml文件，添加spring.cloud.nacos.discovery.cluster-name属性即可</li></ul></li></ul><h3 id="同集群优先的负载均衡"><a href="#同集群优先的负载均衡" class="headerlink" title="同集群优先的负载均衡"></a>同集群优先的负载均衡</h3><ul><li>默认的ZoneAvoidanceRule并不能根据同集群优先来实现负载均衡</li><li><p>因此Nacos中提供了一个NacosRule的实现，可以优先从同集群中挑选实例</p><ol><li><p>给order-service配置集群信息，修改其application.yml文件，将集群名称配置为HZ</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">   <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment">## 集群名称，杭州</span></span><br></pre></td></tr></table></figure></li><li><p>修改负载均衡规则</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span> <span class="comment">## 给某个微服务配置负载均衡规则，这里是user-service服务</span></span><br><span class="line"> <span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment">## 负载均衡规则</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>那我们现在访问<a href="http://localhost:8080/order/101">http://localhost:8080/order/101</a> ，同时观察三个user-service的日志输出，集群名称为HZ的两个user-service可以看到日志输出，而集群名称为SH的user-service则看不到日志输出</p></li><li><p>那我们现在将集群名称为HZ的两个user-service服务停掉，那么现在访问<a href="http://localhost:8080/order/101">http://localhost:8080/order/101</a> ，则集群名称为SH的user-service会输出日志</p></li><li><p>NacosRule负载均衡策略</p><ol><li>优先选择统计集群服务实例列表</li><li>本地集群找不到提供者，才去其集群寻找，并且会报警告</li><li>确定了可用实例列表后，再采用随机负载均衡挑选实例</li></ol></li></ul><h2 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h2><ul><li>实际部署中肯定会出现这样的场景<ul><li>服务器设备性能有差异，部分实例所在的机器性能较好，而另一些较差，那么你希望性能好的机器承担更多的用户请求</li><li>但默认情况下NacosRule是统计群内随机挑选，不会考虑机器性能的问题</li></ul></li><li>因此Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高</li><li>在Nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重</li></ul><blockquote><p>注意：若权重为修改为0，则该实例永远不会被访问<br>我们可以将某个服务的权重修改为0，然后进行更新，然后也不会影响到用户的正常访问别的服务集群，之后我们可以给更新后的该服务，设置一个很小的权重，这样就会有一小部分用户来访问该服务，测试该服务是否稳定（类似于灰度测试）</p></blockquote><h2 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h2><ul><li>Nacos提供了namespace来实现环境隔离功能<ul><li>nacos中可以有多个namespace</li><li>namespace下可以由group、service等</li><li>不同的namespace之间相互隔离，例如不同的namespace的服务互相不可见</li></ul></li></ul><h3 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h3><ul><li>默认情况下，所有的service、data、group都是在同一个namespace，名为public</li><li>我们点击<code>命名空间</code> -&gt; <code>新建命名空间</code> -&gt; <code>填写表单</code>,可以创建一个新的namespace</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/wRru4wS2.png"/></div></div><h3 id="给微服务配置namespace"><a href="#给微服务配置namespace" class="headerlink" title="给微服务配置namespace"></a>给微服务配置namespace</h3><ul><li>给微服务配置namespace只能通过修改配置来实现</li><li>例如，修改order-service的application.yml文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">ea980a8c-c886-4a2c-8653-d29c62d518bb</span> <span class="comment">## 命名空间，填上图中的命名空间ID</span></span><br></pre></td></tr></table></figure><ul><li>重启order-service后，访问Nacos控制台，可以看到下面的结果，此时访问order-service，因为namespace不同，会导致找不到user-service，若访问<a href="http://localhost:8080/order/101">http://localhost:8080/order/101</a> 则会报错</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/JtgPxsYw.png"/></div></div><h2 id="Nacos和Eureka的区别"><a href="#Nacos和Eureka的区别" class="headerlink" title="Nacos和Eureka的区别"></a>Nacos和Eureka的区别</h2><ul><li>Nacos的服务实例可以分为两种类型<ol><li>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型</li><li>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例</li></ol></li><li>配置一个服务实例为永久实例</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment">## 设置为非临时实例</span></span><br></pre></td></tr></table></figure><ul><li><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心脏等待，但是也存在一些差异</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/Dw9fY5VG.png"/></div></div></li><li><p>Nacos和Eureka的共同点</p><ol><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康监测</li></ol></li><li><p>Nacos和Eureka的区别</p><ol><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式（但是对服务器压力较大，不推荐）</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ol></li></ul><h1 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h1><ul><li>Nacos除了可以做注册中心，同样还可以做配置管理来使用</li></ul><h2 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h2><ul><li>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且容易出错，所以我们需要一种统一配置管理方案，可以集中管理所有实例的配置</li><li>Nacos一方面可以将配置集中管理，另一方面可以在配置变更时，及时通知微服务，实现配置的热更新</li></ul><h3 id="在Nacos中添加配置文件"><a href="#在Nacos中添加配置文件" class="headerlink" title="在Nacos中添加配置文件"></a>在Nacos中添加配置文件</h3><ul><li>如何在Nacos中管理配置呢<ul><li><code>配置列表</code> -&gt; <code>点击右侧加号</code></li></ul></li><li>在弹出的表单中，填写配置信息</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line">  <span class="attr">dateformat:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/0rZvdnYA.png"/></div></div><blockquote><p>注意：只有需要热更新的配置才有放到Nacos管理的必要，基本不会变更的一些配置，还是保存到微服务本地比较好（例如数据库连接配置等）</p></blockquote><h3 id="从微服务拉取配置"><a href="#从微服务拉取配置" class="headerlink" title="从微服务拉取配置"></a>从微服务拉取配置</h3><ul><li>微服务要拉取Nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动</li><li>但如果尚未读取application.yml，又如何得知Nacos地址呢？</li><li><p>Spring引入了一种新的配置文件：bootstrap.yml文件，会在application.yml之前被读取，流程如下</p><ol><li>项目启动</li><li>加载bootstrap.yml文件，获取Nacos地址，配置文件id</li><li>根据配置文件id，读取Nacos中的配置文件</li><li>读取本地配置文件application.yml，与Nacos拉取到的配置合并</li><li>创建Spring容器</li><li>加载bean</li></ol></li><li><p>引入nacos-config依赖</p><ul><li>首先在user-service服务中，引入nacos-config的客户端依赖<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加bootstrap.yml</p><ul><li>然后在user-service中添加一个bootstrap.yml文件，内容如下<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">user-service</span> <span class="comment">## 服务名称</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">## Nacos地址</span></span><br><span class="line">   <span class="attr">config:</span></span><br><span class="line">    <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">## 文件后缀名</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>这里会根据spring.cloud.nacos.server-addr获取Nacos地址，再根据<code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id，来读取配置。</p></li><li><p>在本例中，就是读取user-service-dev.yml</p></li><li>测试是否真的读取到了，我们在user-service的UserController中添加业务逻辑，读取nacos中的配置信息pattern.dateformat配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打开浏览器，访问<a href="http://localhost:8081/user/test">http://localhost:8081/user/test</a> ，看到如下结果，则说明读取到了信息<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/TbuOxUNW.png"/></div></div></li></ul><h2 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h2><ul><li>我们最终的目的，是修改Nacos中的配置后，微服务中无需重启即可让配置生效，也就是配置热更新</li><li>要实现配置热更新，可以使用两种方式</li></ul><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><ul><li>在@Value注入的变量类上添加注解@RefreshScope（刷新作用域）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试是否热更新</p><ul><li>启动服务，打开浏览器，访问<a href="http://localhost:8081/user/test">http://localhost:8081/user/test</a> ， 由于我们之前配置的dateformat是yyyy-MM-dd MM:hh:ss，所以看到的日期格式为<code>2022-11-12 22:11:03</code></li><li><p>那我们现在直接在Nacos中编辑配置信息，并保存</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line"> <span class="attr">dateformat:</span> <span class="string">yyyy年MM月dd日</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure></li><li><p>无需重启服务器，直接刷新页面，看到的日期格式为<code>2022年11月12日 22:16:13</code>，说明确实是热更新</p></li></ul></li></ul><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><ul><li>使用@ConfigurationProperties注解代替<code>@Value</code>注解</li><li>在user-service服务中，添加一个类，读取<code>pattern.dateformat</code>属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在UserController中用这个类来代替<code>@Value</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用同样的方法进行测试，这里就不赘述了</li></ul><h2 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h2><ul><li>其实微服务启动时，回去Nacos读取多个配置文件，例如<ul><li><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：user-service-dev.yaml</li><li><code>[spring.application.name].yaml</code>，例如：userservice.yaml</li></ul></li><li>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享</li><li>那下面我们通过案例来测试配置共享</li></ul><h3 id="添加一个环境共享配置"><a href="#添加一个环境共享配置" class="headerlink" title="添加一个环境共享配置"></a>添加一个环境共享配置</h3><ul><li>我们在Nacos中添加一个<code>Data ID</code>为<code>user-service.yml</code>文件，编写的配置内容如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line"> <span class="attr">envSharedValue:</span> <span class="string">多环境共享属性值</span></span><br></pre></td></tr></table></figure><ul><li>修改user-service-dev.yml文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line"> <span class="attr">dateformat:</span> <span class="string">yyyy/MM/dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line"> <span class="attr">env:</span> <span class="string">user-service开发环境配置</span></span><br></pre></td></tr></table></figure><h3 id="在user-service中读取共享配置"><a href="#在user-service中读取共享配置" class="headerlink" title="在user-service中读取共享配置"></a>在user-service中读取共享配置</h3><ul><li>修改我们的PatternProperties类，添加envSharedValue和env属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">    <span class="keyword">private</span> String envSharedValue;</span><br><span class="line">    <span class="keyword">private</span> String env;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同时修改UserController，添加一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/prop&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PatternProperties <span class="title function_">prop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patternProperties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改UserApplication2的启动项，改变其profile值为test（改变环境），同时新建一个user-service-test.yml配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pattern:</span></span><br><span class="line"> <span class="attr">dateformat:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line"> <span class="attr">env:</span> <span class="string">user-service测试环境配置</span></span><br></pre></td></tr></table></figure><p>-那现在，我们的UserApplication加载的是user-service-dev.yml和user-service.yml这两个配置文件</p><ul><li>我们的UserApplication2加载的是user-service-test.yml这两个配置文件</li><li>启动这两个服务，打开浏览器分别访问<a href="http://localhost:8081/user/prop">http://localhost:8081/user/prop</a> 和<a href="http://localhost:8082/user/prop">http://localhost:8082/user/prop</a> ，看到的结果如下</li></ul><div class="tabs" id="在user-service中读取共享配置"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="在user-service中读取共享配置-1">UserApplication（dev环境）</button><button type="button" class="tab " data-href="在user-service中读取共享配置-2">UserApplication2（test环境）</button></ul><div class="tab-contents"><div class="tab-item-content active" id="在user-service中读取共享配置-1"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;dateformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;envSharedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;多环境共享属性值&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user-service开发环境配置&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="在user-service中读取共享配置-2"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;dateformat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;envSharedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;多环境共享属性值&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user-service测试环境配置&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><ul><li>可以看出，不管是dev还是test环境，都读取到了envSharedValue这个属性的值，且dev和test也都有自己特有的属性值</li></ul><h3 id="配置共享的优先级"><a href="#配置共享的优先级" class="headerlink" title="配置共享的优先级"></a>配置共享的优先级</h3><ul><li>当Nacos、服务同时出现相同属性时，优先级也有高低之分</li><li>服务名-profile.yaml &gt; 服务名.yaml &gt; 本地配置<ul><li>user-service-dev.yml &gt; user-service.yaml &gt; application.yaml</li></ul></li></ul><h2 id="搭建Nacos集群"><a href="#搭建Nacos集群" class="headerlink" title="搭建Nacos集群"></a>搭建Nacos集群</h2><h3 id="集群结构图"><a href="#集群结构图" class="headerlink" title="集群结构图"></a>集群结构图</h3><ul><li>Nacos生成环境下一定要部署为集群状态</li><li><p>官方给出的Nacos集群图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/O6txyjnu.png"/></div></div></li><li><p>其中包含3个Nacos节点，然后一个负载均衡代理3个Nacos。这里的负载均衡器可以使用Nginx</p></li><li><p>我们计划的集群结构</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/Xyn8AUyu.png"/></div></div></li><li><p>3个Nacos节点的地址</p></li></ul><div class="table-container"><table><thead><tr><th>节点</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>192.168.150.1</td><td>8845</td></tr><tr><td>nacos2</td><td>192.168.150.1</td><td>8846</td></tr><tr><td>nacos3</td><td>192.168.150.1</td><td>8847</td></tr></tbody></table></div><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><ul><li><p>搭建集群的基本步骤</p><ol><li><p>搭建数据库，初始化数据库表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> nacos_config;</span><br><span class="line">USE nacos_config;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` TEXT COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">`c_desc` <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`c_use` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`effect` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`type` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`c_schema` TEXT,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`datum_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`beta_ips` <span class="type">VARCHAR</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">`md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` TEXT COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`tag_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` TEXT COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`tag_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">`tag_type` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`nid` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">`quota` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">`usage` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">`max_size` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_count` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_size` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_history_count` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">64</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`nid` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`data_id` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`group_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`app_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` LONGTEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`md5` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">`src_user` TEXT,</span><br><span class="line">`src_ip` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`op_type` <span class="type">CHAR</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">`quota` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">`usage` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">`max_size` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_count` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">`max_aggr_size` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_history_count` <span class="type">INT</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">`gmt_create` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">`id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`kp` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`tenant_name` <span class="type">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">`tenant_desc` <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">`create_source` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">`gmt_create` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">BOOLEAN</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">`role` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`resource` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`action` <span class="type">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, PASSWORD, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>配置Nacos</p><ul><li>我们进入Nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf，然后添加内容，如果后面启动报错了，就把这里的127.0.0.1换成本机真实IP</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1:8845</span></span><br><span class="line"><span class="number">127.0.0.1:8846</span></span><br><span class="line"><span class="number">127.0.0.1:8847</span></span><br></pre></td></tr></table></figure><ul><li>然后修改application.properties文件，添加数据库配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>启动Nacos集群</p><ul><li>将nacos文件夹复制3份，分别命名为：nacos1、nacos2、nacos3</li><li><p>然后分别修改这三个文件夹中的application.properties</p><ul><li>nacos1</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><ul><li>nacos2</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8846</span></span><br></pre></td></tr></table></figure><ul><li>nacos3</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8847</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Nginx反向代理</p><ul><li>修改conf/nginx.conf文件，将下面的配置粘贴到http块中</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> nacos-cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8845</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8846</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8847</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nacos &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>启动nginx，然后在浏览器访问<a href="http://localhost/nacos">http://localhost/nacos</a> 即可</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/Q9NUpB6Q.png"/></div></div></li><li><p>同时将bootstrap.yml中的Nacos地址修改为localhost:80，user-service和order-service中都改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## Nacos地址</span></span><br></pre></td></tr></table></figure></li><li><p>重启服务，在Nacos中可以看到管理的服务</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/03/UedLP7JN.png"/></div></div><blockquote><p>若报错，请将前面的127.0.0.1换成本机ip，例如192.168.1.7这种的</p></blockquote></li></ul></li></ul><h1 id="Feign远程调用"><a href="#Feign远程调用" class="headerlink" title="Feign远程调用"></a>Feign远程调用</h1><ul><li>先来看看我们以前利用RestTemplate发起远程调用的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://user-service/user/&quot;</span> + order.getUserId();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br></pre></td></tr></table></figure><ul><li><p>存在以下问题：</p><ol><li>代码可读性差，编程体验不统一</li><li>参数复杂的URL难以维护（百度随便搜一个中文名词，然后看一下url有多长，有多少参数）</li></ol></li><li><p>我们可以利用Feign来解决上面提到的问题</p></li><li>Feign是一个声明式的http客户端，官网地址<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a> ，其作用就是帮助我们优雅的实现http请求的发送</li></ul><h2 id="Feign替代RestTemplate"><a href="#Feign替代RestTemplate" class="headerlink" title="Feign替代RestTemplate"></a>Feign替代RestTemplate</h2><ul><li><p>Feign的使用步骤如下</p><ol><li><p>引入依赖</p><ul><li>我们在order-service服务中的pom文件中引入Feign的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加注解</p><ul><li>在order-service的启动类上添加<code>@EnableFeignClients</code>注解，开启Feign的功能</li></ul></li><li><p>编写Feign客户端</p><ul><li>在order-service中新建com.itcast.order.client包，然后新建一个接口，内容如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如<ol><li>服务名称：user-service</li><li>请求方式：GET</li><li>请求路径：/user/{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ol></li><li>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了</li></ul></li><li><p>测试</p><ul><li>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate</li></ul><div class="tabs" id="feign替代resttemplate"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="feign替代resttemplate-1">DIFF</button><button type="button" class="tab " data-href="feign替代resttemplate-2">修改后的代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="feign替代resttemplate-1"><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class OrderService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderMapper orderMapper;</span><br><span class="line"><span class="deletion">-   @Autowired</span></span><br><span class="line"><span class="deletion">-   private RestTemplate restTemplate;</span></span><br><span class="line"><span class="addition">+   @Autowired</span></span><br><span class="line"><span class="addition">+   private UserClient userClient;</span></span><br><span class="line"></span><br><span class="line">    public Order queryOrderById(Long orderId) &#123;</span><br><span class="line">        Order order = orderMapper.findById(orderId);</span><br><span class="line"><span class="deletion">-       String url = &quot;http://user-service/user/&quot; + order.getUserId();</span></span><br><span class="line"><span class="deletion">-       User user = restTemplate.getForObject(url, User.class);</span></span><br><span class="line"><span class="addition">+       User user = userClient.findById(order.getUserId());</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        return order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="feign替代resttemplate-2"><p>修改后的代码相较于之前，就显得优雅多了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 2. 利用Feign发起http请求，查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(order.getUserId());</span><br><span class="line">        <span class="comment">// 3. 封账user到order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4. 返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li><li><p>总结</p><ul><li>使用Feign的步骤<ol><li>引入依赖</li><li>主启动类添加@EnableFeignClients注解</li><li>编写FeignClient接口</li><li>使用FeignClient中定义的方法替代RestTemplate</li></ol></li></ul></li></ol></li></ul><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><ul><li>Feign可以支持很多的自定义配置，如下表所示</li></ul><div class="table-container"><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>feign.Logger.Level</td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table></div><ul><li>一般情况下，默认值就能满足我们的使用，如果需要自定义，只需要创建自定义的@Bean覆盖默认的Bean即可，下面以日志为例来演示如何自定义配置</li></ul><h3 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h3><ul><li>基于配置文件修改Feign的日志级别可以针对单个服务</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line"> <span class="attr">client:</span></span><br><span class="line"> <span class="attr">config:</span> </span><br><span class="line">  <span class="attr">userservice:</span> <span class="comment">## 针对某个微服务的配置</span></span><br><span class="line">   <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">##  日志级别</span></span><br></pre></td></tr></table></figure><ul><li>也可以针对所有服务</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line"> <span class="attr">client:</span></span><br><span class="line">  <span class="attr">config:</span> </span><br><span class="line">   <span class="attr">default:</span> <span class="comment">## 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">    <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">##  日志级别 </span></span><br></pre></td></tr></table></figure><ul><li>而日志的级别分为四种<ol><li>NONE：不记录任何日志信息，这是默认值</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应头的信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据</li></ol></li></ul><h3 id="java代码方式"><a href="#java代码方式" class="headerlink" title="java代码方式"></a>java代码方式</h3><ul><li>也可以基于java代码修改日志级别，先声明一个类，然后声明一个Logger.Level的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">//日志级别设置为 BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要全局生效，将其放到启动类的@EnableFeignClients这个注解中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration.class)</span></span><br></pre></td></tr></table></figure><ul><li>如果是局部生效，则把它放到对应的@FeignClient注解中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;, configuration = DefaultFeignConfiguration.class)</span></span><br></pre></td></tr></table></figure><h2 id="Feign使用优化"><a href="#Feign使用优化" class="headerlink" title="Feign使用优化"></a>Feign使用优化</h2><ul><li><p>Feign底层发起http请求，依赖于其他框架，其底层客户端实现包括</p><ol><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient：支持连接池</li><li>OKHttp：支持连接池</li></ol></li><li><p>因此提高Feign的性能主要手段就是使用连接池，代替默认的URLConnection</p></li><li><p>这里我们使用Apache的HttpClient来演示</p><ol><li><p>引入依赖</p><ul><li>在order-service的pom文件中引入Apache的HttpClient依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置连接池</p><ul><li>在order-service的application.yml中添加配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"> <span class="attr">client:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">   <span class="attr">default:</span> <span class="comment">## default全局的配置</span></span><br><span class="line">    <span class="attr">logger-level:</span> <span class="string">BASIC</span> <span class="comment">## 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line"><span class="attr">httpclient:</span></span><br><span class="line"> <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">## 开启feign对HttpClient的支持</span></span><br><span class="line"> <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment">## 最大的连接数</span></span><br><span class="line"> <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment">## 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>小结，Feign的优化</p><ol><li>日志级别尽量使用BASIC</li><li>使用HttpClient代替URLConnection<ul><li>引入feign-httpclient依赖</li><li>配置文件中开启httpclient功能，设置连接池参数</li></ul></li></ol></li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>所谓最佳实践，就是使用过程中总结的经验，最好的一种使用方式</li><li>仔细观察发现，Feign的客户端与服务提供者的controller代码十分相似</li></ul><div class="tabs" id="最佳实践"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="最佳实践-1">Feign</button><button type="button" class="tab " data-href="最佳实践-2">Controller</button></ul><div class="tab-contents"><div class="tab-item-content active" id="最佳实践-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;,configuration = DefaultFeignConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="最佳实践-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><ul><li>除了方法名，其余代码几乎一模一样，那有没有一种方法简化这种重复的代码编写呢？</li></ul><h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><ul><li><p>这两部分相同的代码，可以通过继承来共享</p><ol><li><p>定义一个API接口，利用定义方法，并基于SpringMVC注解做声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserAPI</span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Feign客户端和Controller都继承该接口</p><div class="tabs" id="继承方式"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="继承方式-1">Feign客户端</button><button type="button" class="tab " data-href="继承方式-2">Controller</button></ul><div class="tab-contents"><div class="tab-item-content active" id="继承方式-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> <span class="keyword">extends</span> <span class="title class_">UserAPI</span>&#123;&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="继承方式-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> implents UserAPI&#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="comment">// ...实现业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li></ol></li><li><p>优点</p><ol><li>简单</li><li>实现了代码共享</li></ol></li><li>缺点<ol><li>服务提供方、服务消费方紧耦合</li><li>参数列表中的注解映射并不会继承，所以Controller中必须再次声明方法、参数列表、注解</li></ol></li></ul><h3 id="抽取方式"><a href="#抽取方式" class="headerlink" title="抽取方式"></a>抽取方式</h3><ul><li>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块，提供给所有消费者使用</li><li>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/04/x2c1MVML.png"/></div></div></li></ul><h3 id="实现基于方法抽取的最佳实践"><a href="#实现基于方法抽取的最佳实践" class="headerlink" title="实现基于方法抽取的最佳实践"></a>实现基于方法抽取的最佳实践</h3><ol><li><p>抽取</p><ul><li><p>首先创建一个新的module，命名为feign-api，然后在pom文件中引入feign的starter依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后将order-service中编写UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/04/5XOPkq5r.png"/></div></div></li></ul></li><li><p>在order-service中使用feign-api</p><ul><li>首先，将order-service中的UserClient、User、DefaultFeignConfiguration等类或接口删除掉</li><li><p>然后在order-service中的pom文件中引入我们自己编写的feign-api环依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>接着修改order-service中涉及到以上三个组件的代码爆红部分</p></li></ul></li><li><p>解决包扫描问题</p></li></ol><ul><li><p>现在UserClient在cn.itcast.feign.clients包下，而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient</p><ul><li><p>方式一：指定Feign应该扫描的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：指定需要加载的Client接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Gateway服务网关"><a href="#Gateway服务网关" class="headerlink" title="Gateway服务网关"></a>Gateway服务网关</h1><ul><li>SpringCloudGateway是SpringCloud的一个全新项目，该项目基于Spring5.0，SpringBoot2.0和ProjectReactor等响应式办成和事件流技术开发的网关，它旨在为微服务框架提供一种简单有效的统一的API路由管理方式</li></ul><h2 id="为什么需要网关"><a href="#为什么需要网关" class="headerlink" title="为什么需要网关"></a>为什么需要网关</h2><ul><li>Gateway网关是我们服务的守门神，是所有微服务的统一入口</li><li>网关的核心功能特性<ol><li>请求路由</li><li>权限控制</li><li>限流</li></ol></li><li><p>架构图如下</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/04/J9byF0WF.png"/></div></div></li><li><p>路由和负载均衡：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫路由。当然路由的目标服务有多个时，还需要做负载均衡</p></li><li><p>权限控制：网关作为微服务的入口，需要校验用户是否有请求资格，如果没有则拦截</p></li><li>限流：当请求量过高时，在网关中按照微服务能够接受的速度来放行请求，避免服务压力过大</li><li><p>在SpringCloud中网关的实现包括两种</p><ol><li>gateway</li><li>zuul</li></ol></li><li><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能</p></li></ul><h2 id="gateway快速入门"><a href="#gateway快速入门" class="headerlink" title="gateway快速入门"></a>gateway快速入门</h2><ul><li><p>下面，我们就来演示一下网关的基本路由功能，基本步骤如下</p><ol><li><p>创建SpringBoot工程gateway，引入网关依赖</p><ul><li>创建一个maven工程就行，引入依赖如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写基础配置和路由规则</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">## 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">## 服务名称</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## nacos地址（我这里还是用的nginx反向代理，你们可以启动一个单体的nacos，用8848端口）</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">   <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment">## 路由id，自定义，只需要唯一即可</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">lb://user-service</span> <span class="comment">## 路由的目标地址，lb表示负载均衡，后面跟服务名称</span></span><br><span class="line">      <span class="comment">## uri: http://localhost:8081 ## 路由的目标地址，http就是固定地址</span></span><br><span class="line">      <span class="attr">predicates:</span> <span class="comment">## 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment">## 这个是按照路径匹配，只要是以/user开头的，就符合规则</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span> <span class="comment">## 按照上面的写法，再配置一下order-service</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">lb://order-service</span> </span><br><span class="line">      <span class="attr">predicates:</span> </span><br><span class="line">       <span class="bullet">-</span> <span class="string">Path=/order/**</span> </span><br></pre></td></tr></table></figure></li><li><p>启动网关服务进行测试</p><ul><li>重启网关，访问<a href="http://localhost:10010/user/1">http://localhost:10010/user/1</a> 时，符合/user/**规则，请求转发到<a href="http://user-service/user/1">http://user-service/user/1</a> ，结果如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>访问<a href="http://localhost:10010/order/101">http://localhost:10010/order/101</a> 时，符合/order/**规则，请求转发到<a href="http://order-service/order/101，结果如下">http://order-service/order/101，结果如下</a></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">699900</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Apple 苹果 iPhone 12 &quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;num&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;userId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>网关路由的流程图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/04/0btqKIta.png"/></div></div></li></ol></li><li><p>总结</p><ul><li>网关搭建的步骤<ol><li>创建项目，引入nacos和gateway依赖</li><li>配置application.yml，包括服务基本信息，nacos地址、路由</li></ol></li><li>路由配置包括<ol><li>路由id：路由的唯一标识</li><li>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名称负载均衡</li><li>路由断言（predicates）：判断路由的规则</li><li>路由过滤器（filters）：对请求或响应做处理</li></ol></li></ul></li><li>接下来我们就重点学习路由断言和路由过滤器的详细知识</li></ul><h2 id="断言工厂"><a href="#断言工厂" class="headerlink" title="断言工厂"></a>断言工厂</h2><ul><li>我们在配置文件中写的断言规则只是字符串，这些字符串会被<code>Predicate Factory</code>读取并处理，转变为路由判断的条件</li><li>例如<code>Path=/user/**</code>是按照路径匹配，这个规则是由<code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来处理的，像这样的断言工厂，在SpringCloudGateway还有十几个</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=.somehost.org,.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td></tr></tbody></table></div><ul><li>关于更详细的使用方法，可以参考官方文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories"><code>https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</code></a></li></ul><h2 id="过滤器工厂"><a href="#过滤器工厂" class="headerlink" title="过滤器工厂"></a>过滤器工厂</h2><ul><li>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理<div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/04/p3ylWZAh.png"/></div></div></li></ul><h3 id="路由过滤的种类"><a href="#路由过滤的种类" class="headerlink" title="路由过滤的种类"></a>路由过滤的种类</h3><ul><li>Spring提供了31种不同的路由过滤工厂，例如</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table></div><ul><li><p>官方文档的使用举例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">   <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_header_route</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">      <span class="attr">filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure></li><li><p>This listing adds X-Request-red:blue header to the downstream request’s headers for all matching requests.</p></li><li><p>关于更详细的使用方法，可以参考官方文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories"><code>https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</code></a></p></li></ul><h3 id="请求头过滤器"><a href="#请求头过滤器" class="headerlink" title="请求头过滤器"></a>请求头过滤器</h3><ul><li><p>下面我们以AddRequestHeader为例，作为讲解</p><blockquote><p>需求：给所有进入user-service的请求都添加一个请求头：Truth=Welcome to Andy’s Blog！</p></blockquote></li><li><p>只需要修改gateway服务的application.yml文件，添加路由过滤即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">## 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">## 服务名称</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## nacos地址</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">   <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">      <span class="attr">predicates:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">filters:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Andy&#x27;s</span> <span class="string">Blog！</span> <span class="comment">## 添加请求头</span></span><br></pre></td></tr></table></figure></li><li><p>当前过滤器写在user-service路由下，因此仅仅对访问user-service的请求有效，我们在UserController中编写对应的方法来测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="meta">@RequestHeader(&quot;Truth&quot;)</span> String tmp)</span> &#123;</span><br><span class="line">    System.out.println(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启网关和user-service，打开浏览器访问<a href="http://localhost:10010/user/test，">http://localhost:10010/user/test，</a> 控制台会输出<code>Welcome to Andy&#39;s Blog!</code>，证明我们的配置已经生效</li></ul><h3 id="默认过滤器"><a href="#默认过滤器" class="headerlink" title="默认过滤器"></a>默认过滤器</h3><ul><li>如果要对所有的路由都生效，则可以将过滤器工厂写到default下，格式如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">## 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">## 服务名称</span></span><br><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">   <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## nacos地址</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">   <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">      <span class="attr">predicates:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">    <span class="attr">default-filters:</span> </span><br><span class="line">     <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Kyle&#x27;s</span> <span class="string">Blog!</span> <span class="comment">## 添加请求头</span></span><br></pre></td></tr></table></figure><ul><li>重启网关服务，打开浏览器访问<a href="http://localhost:10010/user/test，">http://localhost:10010/user/test，</a> 控制台依旧会输出<code>Welcome to Andy&#39;s Blog!</code>，证明我们的配置已经生效</li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul><li>过滤器的作用是什么？<ul><li>对路由的请求或响应做加工处理，比如添加请求头</li><li>配置在路由下的过滤器只对当前路由请求生效</li></ul></li><li>default-filters的作用是什么？<ul><li>对所有路由都生效的过滤器</li></ul></li></ul><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><ul><li>上面提到的31中过滤器的每一种的作用都是固定的，如果我们希望拦截请求，做自己的业务逻辑，则无法实现，这就要用到我们的全局过滤器了</li></ul><h3 id="全局过滤器的作用"><a href="#全局过滤器的作用" class="headerlink" title="全局过滤器的作用"></a>全局过滤器的作用</h3><ul><li>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理的逻辑是固定的，而GlobalFilter的逻辑需要我们自己编写代码实现</li><li><p>定义的方式就是实现GlobalFilter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在filter中编写自定义逻辑，可以实现下列功能</p><ol><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ol></li></ul><h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><ul><li>需求：定义全局过滤器，拦截请求，判断请求参数是否满足下面条件<ol><li>参数中是否有authorization</li><li>authorization参数值是否为admin</li></ol></li><li>如果同时满足，则放行，否则拦截</li><li><p>具体实现如下</p><ul><li>在gateway模块下新建cn.itcast.gateway.filter包，然后在其中编写AuthorizationFilter类，实现GlobalFilter接口，重写其中的filter方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2. 获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(authorization)) &#123;</span><br><span class="line">            <span class="comment">// 4. 满足需求则放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 不满足需求，设置状态码，这里的常量底层就是401，在restFul中401表示未登录</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">// 6. 结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重启网关，测试我们的拦截器是否生效，打开浏览器访问<a href="http://localhost:10010/user/1，无法正常访问；加上需要的请求参数访问http://localhost:10010/user/1?authorization=admin，">http://localhost:10010/user/1，无法正常访问；加上需要的请求参数访问http://localhost:10010/user/1?authorization=admin，</a> 可以看到正常数据</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;柳岩&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖南省衡阳市&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h3><ul><li>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</li><li><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://img2.imgtp.com/2024/05/04/uiHShpoM.png"/></div></div></li><li><p>那么排序的规则是什么呢？</p><ul><li>每个过滤器都必须指定一个int类型的order值，order值越小，优先级越高，执行顺序越靠前（默认值为2147483647，即int最大值）</li><li>GlobalFilter通过实现<code>Ordered</code>接口，或者添加<code>@Order</code>注解来指定order值，需要我们自己指定<div class="tabs" id="过滤器执行顺序"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="过滤器执行顺序-1">实现Ordered接口</button><button type="button" class="tab " data-href="过滤器执行顺序-2">使用</button></ul><div class="tab-contents"><div class="tab-item-content active" id="过滤器执行顺序-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2. 获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(authorization)) &#123;</span><br><span class="line">            <span class="comment">// 4. 满足需求则放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 不满足需求，设置状态码，这里的常量底层就是401，在restFul中401表示未登录</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">// 6. 结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="过滤器执行顺序-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2. 获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(authorization)) &#123;</span><br><span class="line">            <span class="comment">// 4. 满足需求则放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 不满足需求，设置状态码，这里的常量底层就是401，在restFul中401表示未登录</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">        <span class="comment">// 6. 结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li></ul></li><li><p>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增</p></li><li><p>当过滤器的order值一样时，会按照defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行</p><ul><li>例如下面这种情况下的order值就会相同，如果我们在自定义全局过滤器中设定的order也为1，那么也会冲突<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">10010</span> <span class="comment">## 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment">## 服务名称</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment">## nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Kyle&#x27;s</span> <span class="string">Blog!</span> <span class="comment">## 1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Kyle&#x27;s</span> <span class="string">Blog!</span> <span class="comment">## 2</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Kyle&#x27;s</span> <span class="string">Blog!</span> <span class="comment">## 3</span></span><br><span class="line">    <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Kyle&#x27;s</span> <span class="string">Blog!</span> <span class="comment">## 1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Kyle&#x27;s</span> <span class="string">Blog!</span> <span class="comment">## 2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">Kyle&#x27;s</span> <span class="string">Blog!</span> <span class="comment">## 3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>详细内容，可以查看源码：</p><ul><li><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</li><li><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</li></ul></li></ul><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><h3 id="什么是跨域问题"><a href="#什么是跨域问题" class="headerlink" title="什么是跨域问题"></a>什么是跨域问题</h3><ul><li>跨域：域名不一致就是跨域，主要包括<ol><li>域名不同：www.baidu.com和www.baidu.org，www.js.com和miaosha.js.com</li><li>域名相同，端口不同：localhost:8080和localhost:8081</li></ol></li><li>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</li><li>解决方案：CORS<ul><li>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</li><li>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</li></ul></li></ul><h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><ul><li>在gateway服务的application.yml文件中，添加下面的配置<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment">## 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment">## 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:9527&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment">## 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment">## 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment">## 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment">## 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure><blockquote><p>完结撒花</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识微服务&quot;&gt;&lt;a href=&quot;#认识微服务&quot; class=&quot;headerlink&quot; title=&quot;认识微服务&quot;&gt;&lt;/a&gt;认识微服务&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。那这些</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>技术随想</title>
    <link href="https://andyh0824.github.io/posts/dfb8a81f.html"/>
    <id>https://andyh0824.github.io/posts/dfb8a81f.html</id>
    <published>2024-03-25T11:50:10.000Z</published>
    <updated>2024-03-30T03:35:00.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我是技术随想"><a href="#我是技术随想" class="headerlink" title="我是技术随想"></a>我是技术随想</h2><h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;我是技术随想&quot;&gt;&lt;a href=&quot;#我是技术随想&quot; class=&quot;headerlink&quot; title=&quot;我是技术随想&quot;&gt;&lt;/a&gt;我是技术随想&lt;/h2&gt;&lt;h1 id=&quot;你好&quot;&gt;&lt;a href=&quot;#你好&quot; class=&quot;headerlink&quot; title=&quot;你好&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>随心所欲</title>
    <link href="https://andyh0824.github.io/posts/5fd6e59a.html"/>
    <id>https://andyh0824.github.io/posts/5fd6e59a.html</id>
    <published>2024-03-25T11:50:10.000Z</published>
    <updated>2024-03-25T12:51:13.767Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>home</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tip home&quot;&gt;&lt;p&gt;home&lt;/p&gt;
&lt;/div&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hyj</title>
    <link href="https://andyh0824.github.io/posts/ea1f0973.html"/>
    <id>https://andyh0824.github.io/posts/ea1f0973.html</id>
    <published>2024-03-24T03:31:25.000Z</published>
    <updated>2024-03-25T12:51:29.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="111"><a href="#111" class="headerlink" title="111"></a>111</h1><h1 id="222"><a href="#222" class="headerlink" title="222"></a>222</h1><div class="tip "><p>default</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;111&quot;&gt;&lt;a href=&quot;#111&quot; class=&quot;headerlink&quot; title=&quot;111&quot;&gt;&lt;/a&gt;111&lt;/h1&gt;&lt;h1 id=&quot;222&quot;&gt;&lt;a href=&quot;#222&quot; class=&quot;headerlink&quot; title=&quot;222&quot;&gt;&lt;/a&gt;222&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://andyh0824.github.io/posts/4a17b156.html"/>
    <id>https://andyh0824.github.io/posts/4a17b156.html</id>
    <published>2024-03-24T03:22:06.664Z</published>
    <updated>2024-03-24T04:09:39.059Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
